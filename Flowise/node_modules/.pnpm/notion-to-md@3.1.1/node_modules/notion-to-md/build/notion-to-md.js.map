{"version":3,"file":"notion-to-md.js","sourceRoot":"","sources":["../src/notion-to-md.ts"],"names":[],"mappings":"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","sourcesContent":["import { Client } from \"@notionhq/client\";\n\nimport {\n  Annotations,\n  CustomTransformer,\n  ListBlockChildrenResponseResult,\n  ListBlockChildrenResponseResults,\n  MdBlock,\n  NotionToMarkdownOptions,\n  Equation,\n  Text,\n  ConfigurationOptions,\n  MdStringObject,\n  BlockType,\n} from \"./types\";\nimport * as md from \"./utils/md\";\nimport { getBlockChildren } from \"./utils/notion\";\n\n/**\n * Converts a Notion page to Markdown.\n */\nexport class NotionToMarkdown {\n  private notionClient: Client;\n  private config: ConfigurationOptions;\n  private customTransformers: Record<string, CustomTransformer>;\n\n  constructor(options: NotionToMarkdownOptions) {\n    this.notionClient = options.notionClient;\n    const defaultConfig: ConfigurationOptions = {\n      separateChildPage: false,\n      convertImagesToBase64: false,\n      parseChildPages: true,\n    };\n    this.config = { ...defaultConfig, ...options.config };\n    this.customTransformers = {};\n  }\n\n  setCustomTransformer(\n    type: BlockType,\n    transformer: CustomTransformer\n  ): NotionToMarkdown {\n    this.customTransformers[type] = transformer;\n\n    return this;\n  }\n\n  /**\n   * Converts Markdown Blocks to string\n   * @param {MdBlock[]} mdBlocks - Array of markdown blocks\n   * @param {number} nestingLevel - Defines max depth of nesting\n   * @returns {MdStringObject} - Returns markdown string with child pages separated\n   */\n  toMarkdownString(\n    mdBlocks: MdBlock[] = [],\n    pageIdentifier: string = \"parent\",\n    nestingLevel: number = 0\n  ): MdStringObject {\n    let mdOutput: MdStringObject = {};\n\n    mdBlocks.forEach((mdBlocks) => {\n      // NOTE: toggle in the child blocks logic\n      // adding a toggle check prevents duplicate\n      // rendering of toggle title\n\n      // process parent blocks\n      if (\n        mdBlocks.parent &&\n        mdBlocks.type !== \"toggle\" &&\n        mdBlocks.type !== \"child_page\"\n      ) {\n        if (\n          mdBlocks.type !== \"to_do\" &&\n          mdBlocks.type !== \"bulleted_list_item\" &&\n          mdBlocks.type !== \"numbered_list_item\"\n        ) {\n          // initialize if key doesn't exist\n          mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n\n          // add extra line breaks non list blocks\n          mdOutput[pageIdentifier] += `\\n${md.addTabSpace(\n            mdBlocks.parent,\n            nestingLevel\n          )}\\n\\n`;\n        } else {\n          // initialize if key doesn't exist\n          mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n\n          mdOutput[pageIdentifier] += `${md.addTabSpace(\n            mdBlocks.parent,\n            nestingLevel\n          )}\\n`;\n        }\n      }\n\n      // process child blocks\n      if (mdBlocks.children && mdBlocks.children.length > 0) {\n        if (\n          mdBlocks.type === \"synced_block\" ||\n          mdBlocks.type === \"column_list\" ||\n          mdBlocks.type === \"column\"\n        ) {\n          let mdstr = this.toMarkdownString(mdBlocks.children, pageIdentifier);\n          mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n\n          Object.keys(mdstr).forEach((key) => {\n            if (mdOutput[key]) {\n              mdOutput[key] += mdstr[key];\n            } else {\n              mdOutput[key] = mdstr[key];\n            }\n          });\n        } else if (mdBlocks.type === \"child_page\") {\n          const childPageTitle = mdBlocks.parent;\n          let mdstr = this.toMarkdownString(mdBlocks.children, childPageTitle);\n\n          if (this.config.separateChildPage) {\n            mdOutput = { ...mdOutput, ...mdstr };\n          } else {\n            mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n            if (mdstr[childPageTitle]) {\n              // child page heading followed by child page content\n              mdOutput[\n                pageIdentifier\n              ] += `\\n${childPageTitle}\\n${mdstr[childPageTitle]}`;\n            }\n          }\n        } else if (mdBlocks.type === \"toggle\") {\n          // convert children md object to md string\n          const toggle_children_md_string = this.toMarkdownString(\n            mdBlocks.children\n          );\n\n          mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n          mdOutput[pageIdentifier] += md.toggle(\n            mdBlocks.parent,\n            toggle_children_md_string[\"parent\"]\n          );\n        } else {\n          let mdstr = this.toMarkdownString(\n            mdBlocks.children,\n            pageIdentifier,\n            nestingLevel + 1\n          );\n\n          mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n          if (pageIdentifier !== \"parent\" && mdstr[\"parent\"]) {\n            mdOutput[pageIdentifier] += mdstr[\"parent\"];\n          } else if (mdstr[pageIdentifier]) {\n            mdOutput[pageIdentifier] += mdstr[pageIdentifier];\n          }\n        }\n      }\n    });\n\n    return mdOutput;\n  }\n\n  /**\n   * Retrieves Notion Blocks based on ID and converts them to Markdown Blocks\n   * @param {string} id - notion page id (not database id)\n   * @param {number} totalPage - Retrieve block children request number, page_size Maximum = totalPage * 100 (Default=null)\n   * @returns {Promise<MdBlock[]>} - List of markdown blocks\n   */\n  async pageToMarkdown(\n    id: string,\n    totalPage: number | null = null\n  ): Promise<MdBlock[]> {\n    if (!this.notionClient) {\n      throw new Error(\n        \"notion client is not provided, for more details check out https://github.com/souvikinator/notion-to-md\"\n      );\n    }\n    const blocks = await getBlockChildren(this.notionClient, id, totalPage);\n\n    const parsedData = await this.blocksToMarkdown(blocks);\n\n    return parsedData;\n  }\n\n  /**\n   * Converts list of Notion Blocks to Markdown Blocks\n   * @param {ListBlockChildrenResponseResults | undefined} blocks - List of notion blocks\n   * @param {number} totalPage - Retrieve block children request number, page_size Maximum = totalPage * 100\n   * @param {MdBlock[]} mdBlocks - Defines max depth of nesting\n   * @returns {Promise<MdBlock[]>} - Array of markdown blocks with their children\n   */\n  async blocksToMarkdown(\n    blocks?: ListBlockChildrenResponseResults,\n    totalPage: number | null = null,\n    mdBlocks: MdBlock[] = []\n  ): Promise<MdBlock[]> {\n    if (!this.notionClient) {\n      throw new Error(\n        \"notion client is not provided, for more details check out https://github.com/souvikinator/notion-to-md\"\n      );\n    }\n\n    if (!blocks) return mdBlocks;\n\n    for (let i = 0; i < blocks.length; i++) {\n      let block: ListBlockChildrenResponseResult = blocks[i];\n\n      // @ts-ignore\n      if (block.type === \"child_page\" && !this.config.parseChildPages) {\n        continue;\n      }\n\n      if (\"has_children\" in block && block.has_children) {\n        const block_id =\n          block.type == \"synced_block\" &&\n          block.synced_block?.synced_from?.block_id\n            ? block.synced_block.synced_from.block_id\n            : block.id;\n        // Get children of this block.\n        let child_blocks = await getBlockChildren(\n          this.notionClient,\n          block_id,\n          totalPage\n        );\n\n        // Push this block to mdBlocks.\n        mdBlocks.push({\n          type: block.type,\n          blockId: block.id,\n          parent: await this.blockToMarkdown(block),\n          children: [],\n        });\n\n        // Recursively call blocksToMarkdown to get children of this block.\n        // check for custom transformer before parsing child\n        if (\n          !(block.type in this.customTransformers) &&\n          !this.customTransformers[block.type]\n        ) {\n          let l = mdBlocks.length;\n          await this.blocksToMarkdown(\n            child_blocks,\n            totalPage,\n            mdBlocks[l - 1].children\n          );\n        }\n\n        continue;\n      }\n\n      let tmp = await this.blockToMarkdown(block);\n      mdBlocks.push({\n        // @ts-ignore\n        type: block.type,\n        blockId: block.id,\n        parent: tmp,\n        children: [],\n      });\n    }\n    return mdBlocks;\n  }\n\n  /**\n   * Converts a Notion Block to a Markdown Block\n   * @param {ListBlockChildrenResponseResult} block - single notion block\n   * @returns {string} corresponding markdown string of the passed block\n   */\n  async blockToMarkdown(block: ListBlockChildrenResponseResult) {\n    if (typeof block !== \"object\" || !(\"type\" in block)) return \"\";\n\n    let parsedData = \"\";\n    const { type } = block;\n    if (type in this.customTransformers && !!this.customTransformers[type]) {\n      const customTransformerValue = await this.customTransformers[type](block);\n      if (typeof customTransformerValue === \"string\")\n        return customTransformerValue;\n    }\n\n    switch (type) {\n      case \"image\":\n        {\n          let blockContent = block.image;\n          let image_title = \"image\";\n\n          const image_caption_plain = blockContent.caption\n            .map((item: any) => item.plain_text)\n            .join(\"\");\n\n          const image_type = blockContent.type;\n          let link = \"\";\n\n          if (image_type === \"external\") {\n            link = blockContent.external.url;\n          }\n\n          if (image_type === \"file\") {\n            link = blockContent.file.url;\n          }\n\n          // image caption with high priority\n          if (image_caption_plain.trim().length > 0) {\n            image_title = image_caption_plain;\n          } else if (image_type === \"file\" || image_type === \"external\") {\n            const matches = link.match(/[^\\/\\\\&\\?]+\\.\\w{3,4}(?=([\\?&].*$|$))/);\n            image_title = matches ? matches[0] : image_title;\n          }\n\n          return await md.image(\n            image_title,\n            link,\n            this.config.convertImagesToBase64\n          );\n        }\n        break;\n\n      case \"divider\": {\n        return md.divider();\n      }\n\n      case \"equation\": {\n        return md.equation(block.equation.expression);\n      }\n\n      case \"video\":\n      case \"file\":\n      case \"pdf\":\n        {\n          let blockContent;\n          let title: string = type;\n\n          if (type === \"video\") blockContent = block.video;\n          if (type === \"file\") blockContent = block.file;\n          if (type === \"pdf\") blockContent = block.pdf;\n\n          const caption = blockContent?.caption\n            .map((item: any) => item.plain_text)\n            .join(\"\");\n\n          if (blockContent) {\n            const file_type = blockContent.type;\n            let link = \"\";\n            if (file_type === \"external\") link = blockContent.external.url;\n            if (file_type === \"file\") link = blockContent.file.url;\n\n            if (caption && caption.trim().length > 0) {\n              title = caption;\n            } else if (link) {\n              const matches = link.match(\n                /[^\\/\\\\&\\?]+\\.\\w{3,4}(?=([\\?&].*$|$))/\n              );\n              title = matches ? matches[0] : type;\n            }\n\n            return md.link(title, link);\n          }\n        }\n        break;\n\n      case \"bookmark\":\n      case \"embed\":\n      case \"link_preview\":\n      case \"link_to_page\":\n        {\n          let blockContent;\n          let title: string = type;\n          if (type === \"bookmark\") blockContent = block.bookmark;\n          if (type === \"embed\") blockContent = block.embed;\n          if (type === \"link_preview\") blockContent = block.link_preview;\n          if (\n            type === \"link_to_page\" &&\n            block.link_to_page.type === \"page_id\"\n          ) {\n            blockContent = { url: block.link_to_page.page_id };\n          }\n\n          if (blockContent) return md.link(title, blockContent.url);\n        }\n        break;\n\n      case \"child_page\":\n        {\n          if (!this.config.parseChildPages) return \"\";\n\n          let pageTitle: string = block.child_page.title;\n\n          if (this.config.separateChildPage) {\n            return pageTitle;\n          }\n\n          return md.heading2(pageTitle);\n        }\n        break;\n      case \"child_database\":\n        {\n          let pageTitle = block.child_database.title || `child_database`;\n          return pageTitle;\n        }\n        break;\n\n      case \"table\": {\n        const { id, has_children } = block;\n        let tableArr: string[][] = [];\n        if (has_children) {\n          const tableRows = await getBlockChildren(this.notionClient, id, 100);\n          let rowsPromise = tableRows?.map(async (row) => {\n            const { type } = row as any;\n            const cells = (row as any)[type][\"cells\"];\n\n            /**\n             * this is more like a hack since matching the type text was\n             * difficult. So converting each cell to paragraph type to\n             * reuse the blockToMarkdown function\n             */\n            let cellStringPromise = cells.map(\n              async (cell: any) =>\n                await this.blockToMarkdown({\n                  type: \"paragraph\",\n                  paragraph: { rich_text: cell },\n                } as ListBlockChildrenResponseResult)\n            );\n\n            const cellStringArr = await Promise.all(cellStringPromise);\n            tableArr.push(cellStringArr);\n          });\n          await Promise.all(rowsPromise || []);\n        }\n        return md.table(tableArr);\n      }\n      // Rest of the types\n      // \"paragraph\"\n      // \"heading_1\"\n      // \"heading_2\"\n      // \"heading_3\"\n      // \"bulleted_list_item\"\n      // \"numbered_list_item\"\n      // \"quote\"\n      // \"to_do\"\n      // \"template\"\n      // \"synced_block\"\n      // \"child_page\"\n      // \"child_database\"\n      // \"code\"\n      // \"callout\"\n      // \"breadcrumb\"\n      // \"table_of_contents\"\n      // \"link_to_page\"\n      // \"audio\"\n      // \"unsupported\"\n\n      default: {\n        // In this case typescript is not able to index the types properly, hence ignoring the error\n        // @ts-ignore\n        let blockContent = block[type].text || block[type].rich_text || [];\n        blockContent.map((content: Text | Equation) => {\n          if (content.type === \"equation\") {\n            parsedData += md.inlineEquation(content.equation.expression);\n            return;\n          }\n\n          const annotations = content.annotations;\n          let plain_text = content.plain_text;\n\n          plain_text = this.annotatePlainText(plain_text, annotations);\n\n          if (content[\"href\"])\n            plain_text = md.link(plain_text, content[\"href\"]);\n\n          parsedData += plain_text;\n        });\n      }\n    }\n\n    switch (type) {\n      case \"code\":\n        {\n          parsedData = md.codeBlock(parsedData, block[type].language);\n        }\n        break;\n\n      case \"heading_1\":\n        {\n          parsedData = md.heading1(parsedData);\n        }\n        break;\n\n      case \"heading_2\":\n        {\n          parsedData = md.heading2(parsedData);\n        }\n        break;\n\n      case \"heading_3\":\n        {\n          parsedData = md.heading3(parsedData);\n        }\n        break;\n\n      case \"quote\":\n        {\n          parsedData = md.quote(parsedData);\n        }\n        break;\n\n      case \"callout\":\n        {\n          const { id, has_children } = block;\n          let callout_string = \"\";\n\n          if (!has_children) {\n            return md.callout(parsedData, block[type].icon);\n          }\n\n          const callout_children_object = await getBlockChildren(\n            this.notionClient,\n            id,\n            100\n          );\n\n          // // parse children blocks to md object\n          const callout_children = await this.blocksToMarkdown(\n            callout_children_object\n          );\n\n          callout_string += `${parsedData}\\n`;\n          callout_children.map((child) => {\n            callout_string += `${child.parent}\\n\\n`;\n          });\n\n          parsedData = md.callout(callout_string.trim(), block[type].icon);\n        }\n        break;\n\n      case \"bulleted_list_item\":\n        {\n          parsedData = md.bullet(parsedData);\n        }\n        break;\n\n      case \"numbered_list_item\":\n        {\n          parsedData = md.bullet(parsedData, block.numbered_list_item.number);\n        }\n        break;\n\n      case \"to_do\":\n        {\n          parsedData = md.todo(parsedData, block.to_do.checked);\n        }\n        break;\n    }\n\n    return parsedData;\n  }\n\n  /**\n   * Annoate text using provided annotations\n   * @param {string} text - String to be annotated\n   * @param {Annotations} annotations - Annotation object of a notion block\n   * @returns {string} - Annotated text\n   */\n  annotatePlainText(text: string, annotations: Annotations): string {\n    // if text is all spaces, don't annotate\n    if (text.match(/^\\s*$/)) return text;\n\n    const leadingSpaceMatch = text.match(/^(\\s*)/);\n    const trailingSpaceMatch = text.match(/(\\s*)$/);\n\n    const leading_space = leadingSpaceMatch ? leadingSpaceMatch[0] : \"\";\n    const trailing_space = trailingSpaceMatch ? trailingSpaceMatch[0] : \"\";\n\n    text = text.trim();\n\n    if (text !== \"\") {\n      if (annotations.code) text = md.inlineCode(text);\n      if (annotations.bold) text = md.bold(text);\n      if (annotations.italic) text = md.italic(text);\n      if (annotations.strikethrough) text = md.strikethrough(text);\n      if (annotations.underline) text = md.underline(text);\n    }\n\n    return leading_space + text + trailing_space;\n  }\n}\n"]}