{"version":3,"file":"notion-to-md.spec.js","sourceRoot":"","sources":["../src/notion-to-md.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { NotionToMarkdown } from \"./notion-to-md\";\n\ndescribe(\"setCustomTransformer\", () => {\n  test(\"blockToMarkdown sends parsing block to customTransformer\", () => {\n    const customTransformerMock = jest.fn();\n    const n2m = new NotionToMarkdown({ notionClient: {} as any });\n    n2m.setCustomTransformer(\"test\", customTransformerMock);\n    n2m.blockToMarkdown({\n      id: \"test\",\n      name: \"test\",\n      type: \"test\",\n      test: { foo: \"bar\" },\n    } as any);\n    expect(customTransformerMock).toHaveBeenCalledWith(\n      expect.objectContaining({\n        type: \"test\",\n        test: { foo: \"bar\" },\n      })\n    );\n  });\n  test(\"supports only one customTransformer per type \", () => {\n    const customTransformerMock1 = jest.fn();\n    const customTransformerMock2 = jest.fn();\n    const n2m = new NotionToMarkdown({ notionClient: {} as any });\n    n2m.setCustomTransformer(\"test\", customTransformerMock1);\n    n2m.setCustomTransformer(\"test\", customTransformerMock2);\n    n2m.blockToMarkdown({\n      id: \"test\",\n      name: \"test\",\n      type: \"test\",\n      test: { foo: \"bar\" },\n    } as any);\n    expect(customTransformerMock1).not.toHaveBeenCalled();\n    expect(customTransformerMock2).toHaveBeenCalled();\n  });\n\n  test(\"customTransformer implementation works\", async () => {\n    const customTransformerMock = jest.fn();\n    customTransformerMock.mockImplementation(async () => {\n      return \"hello\";\n    });\n    const n2m = new NotionToMarkdown({ notionClient: {} as any });\n    n2m.setCustomTransformer(\"divider\", customTransformerMock);\n    const md = await n2m.blockToMarkdown({\n      id: \"test\",\n      type: \"divider\",\n      divider: {},\n      object: \"block\",\n    });\n    expect(md).toBe(\"hello\");\n  });\n\n  test(\"customTransformer default implementation works\", async () => {\n    const customTransformerMock = jest.fn();\n    customTransformerMock.mockImplementation(async () => {\n      return false;\n    });\n    const n2m = new NotionToMarkdown({ notionClient: {} as any });\n    n2m.setCustomTransformer(\"divider\", customTransformerMock);\n    const md = await n2m.blockToMarkdown({\n      id: \"test\",\n      type: \"divider\",\n      divider: {},\n      object: \"block\",\n    });\n    expect(md).toBe(\"---\");\n  });\n});\n"]}