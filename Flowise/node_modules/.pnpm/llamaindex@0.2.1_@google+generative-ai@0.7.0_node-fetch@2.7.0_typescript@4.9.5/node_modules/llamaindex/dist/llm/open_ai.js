import { getEnv } from "@llamaindex/env";
import _ from "lodash";
import OpenAI from "openai";
export class AzureOpenAI extends OpenAI {
    authHeaders() {
        return {
            "api-key": this.apiKey
        };
    }
}
export class OpenAISession {
    openai;
    constructor(options = {}){
        if (!options.apiKey) {
            options.apiKey = getEnv("OPENAI_API_KEY");
        }
        if (!options.apiKey) {
            throw new Error("Set OpenAI Key in OPENAI_API_KEY env variable"); // Overriding OpenAI package's error message
        }
        if (options.azure) {
            this.openai = new AzureOpenAI(options);
        } else {
            this.openai = new OpenAI({
                ...options
            });
        }
    }
}
// I'm not 100% sure this is necessary vs. just starting a new session
// every time we make a call. They say they try to reuse connections
// so in theory this is more efficient, but we should test it in the future.
const defaultOpenAISession = [];
/**
 * Get a session for the OpenAI API. If one already exists with the same options,
 * it will be returned. Otherwise, a new session will be created.
 * @param options
 * @returns
 */ export function getOpenAISession(options = {}) {
    let session = defaultOpenAISession.find((session)=>{
        return _.isEqual(session.options, options);
    })?.session;
    if (!session) {
        session = new OpenAISession(options);
        defaultOpenAISession.push({
            session,
            options
        });
    }
    return session;
}
