import { globalsHelper } from "../GlobalsHelper.js";
import { ObjectType, jsonToNode } from "../Node.js";
import { serviceContextFromDefaults } from "../ServiceContext.js";
import { DEFAULT_PROJECT_NAME } from "./types.js";
import { getClient } from "./utils.js";
export class LlamaCloudRetriever {
    client;
    clientParams;
    retrieveParams;
    projectName = DEFAULT_PROJECT_NAME;
    pipelineName;
    serviceContext;
    resultNodesToNodeWithScore(nodes) {
        return nodes.map((node)=>{
            return {
                // Currently LlamaCloud only supports text nodes
                node: jsonToNode(node.node, ObjectType.TEXT),
                score: node.score
            };
        });
    }
    constructor(params){
        this.clientParams = {
            apiKey: params.apiKey,
            baseUrl: params.baseUrl
        };
        if (params.similarityTopK) {
            params.denseSimilarityTopK = params.similarityTopK;
        }
        this.retrieveParams = params;
        this.pipelineName = params.name;
        if (params.projectName) {
            this.projectName = params.projectName;
        }
        this.serviceContext = params.serviceContext ?? serviceContextFromDefaults();
    }
    async getClient() {
        if (!this.client) {
            this.client = await getClient(this.clientParams);
        }
        return this.client;
    }
    async retrieve({ query, parentEvent, preFilters }) {
        const pipelines = await (await this.getClient()).pipeline.searchPipelines({
            projectName: this.projectName,
            pipelineName: this.pipelineName
        });
        if (pipelines.length !== 1 && !pipelines[0].id) {
            throw new Error(`No pipeline found with name ${this.pipelineName} in project ${this.projectName}`);
        }
        const results = await (await this.getClient()).pipeline.runSearch(pipelines[0].id, {
            ...this.retrieveParams,
            query,
            searchFilters: preFilters
        });
        const nodes = this.resultNodesToNodeWithScore(results.retrievalNodes);
        if (this.serviceContext.callbackManager.onRetrieve) {
            this.serviceContext.callbackManager.onRetrieve({
                query,
                nodes,
                event: globalsHelper.createEvent({
                    parentEvent,
                    type: "retrieve"
                })
            });
        }
        return nodes;
    }
    getServiceContext() {
        return this.serviceContext;
    }
}
