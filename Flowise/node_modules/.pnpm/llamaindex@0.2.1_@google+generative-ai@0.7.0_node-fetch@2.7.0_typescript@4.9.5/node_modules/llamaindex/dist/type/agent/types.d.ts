import type { AgentChatResponse, ChatEngineAgentParams, StreamingAgentChatResponse } from "../engines/chat/index.js";
import type { QueryEngineParamsNonStreaming } from "../types.js";
export interface AgentWorker {
    initializeStep(task: Task, kwargs?: any): TaskStep;
    runStep(step: TaskStep, task: Task, kwargs?: any): Promise<TaskStepOutput>;
    streamStep(step: TaskStep, task: Task, kwargs?: any): Promise<TaskStepOutput>;
    finalizeTask(task: Task, kwargs?: any): void;
}
interface BaseChatEngine {
    chat(params: ChatEngineAgentParams): Promise<AgentChatResponse | StreamingAgentChatResponse>;
}
interface BaseQueryEngine {
    query(params: QueryEngineParamsNonStreaming): Promise<AgentChatResponse | StreamingAgentChatResponse>;
}
/**
 * BaseAgent is the base class for all agents.
 */
export declare abstract class BaseAgent implements BaseChatEngine, BaseQueryEngine {
    protected _getPrompts(): string[];
    protected _getPromptModules(): string[];
    abstract chat(params: ChatEngineAgentParams): Promise<AgentChatResponse | StreamingAgentChatResponse>;
    abstract reset(): void;
    /**
     * query is the main entrypoint for the agent. It takes a query and returns a response.
     * @param params
     * @returns
     */
    query(params: QueryEngineParamsNonStreaming): Promise<AgentChatResponse | StreamingAgentChatResponse>;
}
type TaskParams = {
    taskId: string;
    input: string;
    memory: any;
    extraState: Record<string, any>;
};
/**
 * Task is a unit of work for the agent.
 * @param taskId: taskId
 */
export declare class Task {
    taskId: string;
    input: string;
    memory: any;
    extraState: Record<string, any>;
    constructor({ taskId, input, memory, extraState }: TaskParams);
}
interface ITaskStep {
    taskId: string;
    stepId: string;
    input?: string | null;
    stepState: Record<string, any>;
    nextSteps: Record<string, TaskStep>;
    prevSteps: Record<string, TaskStep>;
    isReady: boolean;
    getNextStep(stepId: string, input?: string, stepState?: Record<string, any>): TaskStep;
    linkStep(nextStep: TaskStep): void;
}
/**
 * TaskStep is a unit of work for the agent.
 * @param taskId: taskId
 * @param stepId: stepId
 * @param input: input
 * @param stepState: stepState
 */
export declare class TaskStep implements ITaskStep {
    taskId: string;
    stepId: string;
    input?: string | null;
    stepState: Record<string, any>;
    nextSteps: Record<string, TaskStep>;
    prevSteps: Record<string, TaskStep>;
    isReady: boolean;
    constructor(taskId: string, stepId: string, input?: string | null, stepState?: Record<string, any> | null);
    getNextStep(stepId: string, input?: string, stepState?: Record<string, unknown>): TaskStep;
    linkStep(nextStep: TaskStep): void;
}
/**
 * TaskStepOutput is a unit of work for the agent.
 * @param output: output
 * @param taskStep: taskStep
 * @param nextSteps: nextSteps
 * @param isLast: isLast
 */
export declare class TaskStepOutput {
    output: any;
    taskStep: TaskStep;
    nextSteps: TaskStep[];
    isLast: boolean;
    constructor(output: any, taskStep: TaskStep, nextSteps: TaskStep[], isLast?: boolean);
    toString(): string;
}
export {};
