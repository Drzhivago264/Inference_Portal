import type { Anthropic } from "@anthropic-ai/sdk";
import type { NodeWithScore } from "../Node.js";
export type EventTag = "intermediate" | "final";
export type EventType = "retrieve" | "llmPredict" | "wrapper";
export interface Event {
    id: string;
    type: EventType;
    tags?: EventTag[];
    parentId?: string;
}
interface BaseCallbackResponse {
    event: Event;
}
export interface DefaultStreamToken {
    id: string;
    object: string;
    created: number;
    model: string;
    choices: {
        index: number;
        delta: {
            content?: string | null;
            role?: "user" | "assistant" | "system" | "function" | "tool";
        };
        finish_reason: string | null;
    }[];
}
export type OpenAIStreamToken = DefaultStreamToken;
export type AnthropicStreamToken = Anthropic.Completion;
export interface StreamCallbackResponse extends BaseCallbackResponse {
    index: number;
    isDone?: boolean;
    token?: DefaultStreamToken;
}
export interface RetrievalCallbackResponse extends BaseCallbackResponse {
    query: string;
    nodes: NodeWithScore[];
}
interface CallbackManagerMethods {
    onLLMStream?: (params: StreamCallbackResponse) => Promise<void> | void;
    onRetrieve?: (params: RetrievalCallbackResponse) => Promise<void> | void;
}
export declare class CallbackManager implements CallbackManagerMethods {
    onLLMStream?: (params: StreamCallbackResponse) => Promise<void> | void;
    onRetrieve?: (params: RetrievalCallbackResponse) => Promise<void> | void;
    constructor(handlers?: CallbackManagerMethods);
}
export {};
