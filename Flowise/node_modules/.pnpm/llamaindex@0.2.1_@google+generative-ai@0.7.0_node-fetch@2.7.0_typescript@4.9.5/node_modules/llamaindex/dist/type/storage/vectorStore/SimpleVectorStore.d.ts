import type { GenericFileSystem } from "@llamaindex/env";
import type { BaseNode } from "../../Node.js";
import type { VectorStore, VectorStoreQuery, VectorStoreQueryResult } from "./types.js";
declare class SimpleVectorStoreData {
    embeddingDict: Record<string, number[]>;
    textIdToRefDocId: Record<string, string>;
}
export declare class SimpleVectorStore implements VectorStore {
    storesText: boolean;
    private data;
    private fs;
    private persistPath;
    constructor(data?: SimpleVectorStoreData, fs?: GenericFileSystem);
    static fromPersistDir(persistDir?: string, fs?: GenericFileSystem): Promise<SimpleVectorStore>;
    get client(): any;
    get(textId: string): Promise<number[]>;
    add(embeddingResults: BaseNode[]): Promise<string[]>;
    delete(refDocId: string): Promise<void>;
    query(query: VectorStoreQuery): Promise<VectorStoreQueryResult>;
    persist(persistPath?: string, fs?: GenericFileSystem): Promise<void>;
    static fromPersistPath(persistPath: string, fs?: GenericFileSystem): Promise<SimpleVectorStore>;
    static fromDict(saveDict: SimpleVectorStoreData): SimpleVectorStore;
    toDict(): SimpleVectorStoreData;
}
export {};
