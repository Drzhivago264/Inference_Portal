import { AstraDB } from "@datastax/astra-db-ts";
import type { BaseNode } from "../../Node.js";
import type { VectorStore, VectorStoreQuery, VectorStoreQueryResult } from "./types.js";
export declare class AstraDBVectorStore implements VectorStore {
    storesText: boolean;
    flatMetadata: boolean;
    astraDBClient: AstraDB;
    idKey: string;
    contentKey: string;
    metadataKey: string;
    private collection;
    constructor(init?: Partial<AstraDBVectorStore> & {
        params?: {
            token: string;
            endpoint: string;
            namespace: string;
        };
    });
    /**
     * Create a new collection in your Astra DB vector database.
     * You must still use connect() to connect to the collection.
     *
     * @param collection your new colletion's name
     * @param options: CreateCollectionOptions used to set the number of vector dimensions and similarity metric
     * @returns Promise that resolves if the creation did not throw an error.
     */
    create(collection: string, options?: Parameters<AstraDB["createCollection"]>[1]): Promise<void>;
    /**
     * Connect to an existing collection in your Astra DB vector database.
     * You must call this before adding, deleting, or querying.
     *
     * @param collection your existing colletion's name
     * @returns Promise that resolves if the connection did not throw an error.
     */
    connect(collection: string): Promise<void>;
    /**
     * Get an instance of your Astra DB client.
     * @returns the AstraDB client
     */
    client(): AstraDB;
    /**
     * Add your document(s) to your Astra DB collection.
     *
     * @returns and array of node ids which were added
     */
    add(nodes: BaseNode[]): Promise<string[]>;
    /**
     * Delete a document from your Astra DB collection.
     *
     * @param refDocId the id of the document to delete
     * @param deleteOptions: any DeleteOneOptions to pass to the delete query
     * @returns Promise that resolves if the delete query did not throw an error.
     */
    delete(refDocId: string, deleteOptions?: any): Promise<void>;
    /**
     * Query documents from your Astra DB collection to get the closest match to your embedding.
     *
     * @param query: VectorStoreQuery
     * @param options: Not used
     */
    query(query: VectorStoreQuery, options?: any): Promise<VectorStoreQueryResult>;
}
