import type { ChatMessage } from "../../llm/index.js";
export interface BaseReasoningStep {
    getContent(): string;
    isDone(): boolean;
}
export declare class ObservationReasoningStep implements BaseReasoningStep {
    observation: string;
    constructor(init?: Partial<ObservationReasoningStep>);
    getContent(): string;
    isDone(): boolean;
}
export declare class ActionReasoningStep implements BaseReasoningStep {
    thought: string;
    action: string;
    actionInput: Record<string, any>;
    constructor(init?: Partial<ActionReasoningStep>);
    getContent(): string;
    isDone(): boolean;
}
export declare abstract class BaseOutputParser {
    abstract parse(output: string, isStreaming?: boolean): BaseReasoningStep;
    format(output: string): string;
    formatMessages(messages: ChatMessage[]): ChatMessage[];
}
export declare class ResponseReasoningStep implements BaseReasoningStep {
    thought: string;
    response: string;
    isStreaming: boolean;
    constructor(init?: Partial<ResponseReasoningStep>);
    getContent(): string;
    isDone(): boolean;
}
