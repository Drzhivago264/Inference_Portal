import type { ChromaClientParams, Collection, Where, WhereDocument } from "chromadb";
import { ChromaClient } from "chromadb";
import type { BaseNode } from "../../Node.js";
import type { VectorStore, VectorStoreQuery, VectorStoreQueryResult } from "./types.js";
type ChromaDeleteOptions = {
    where?: Where;
    whereDocument?: WhereDocument;
};
type ChromaQueryOptions = {
    whereDocument?: WhereDocument;
};
export declare class ChromaVectorStore implements VectorStore {
    storesText: boolean;
    flatMetadata: boolean;
    textKey: string;
    private chromaClient;
    private collection;
    private collectionName;
    constructor(init: {
        collectionName: string;
        textKey?: string;
        chromaClientParams?: ChromaClientParams;
    });
    client(): ChromaClient;
    getCollection(): Promise<Collection>;
    private getDataToInsert;
    add(nodes: BaseNode[]): Promise<string[]>;
    delete(refDocId: string, deleteOptions?: ChromaDeleteOptions): Promise<void>;
    query(query: VectorStoreQuery, options?: ChromaQueryOptions): Promise<VectorStoreQueryResult>;
}
export {};
