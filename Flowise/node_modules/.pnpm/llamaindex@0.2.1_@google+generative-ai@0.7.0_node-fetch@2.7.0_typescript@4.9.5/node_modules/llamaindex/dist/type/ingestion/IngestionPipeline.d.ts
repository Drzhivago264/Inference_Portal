import type { BaseNode, Document } from "../Node.js";
import type { BaseReader } from "../readers/type.js";
import type { BaseDocumentStore } from "../storage/docStore/types.js";
import type { VectorStore } from "../storage/vectorStore/types.js";
import { IngestionCache } from "./IngestionCache.js";
import { DocStoreStrategy } from "./strategies/index.js";
import type { TransformComponent } from "./types.js";
type IngestionRunArgs = {
    documents?: Document[];
    nodes?: BaseNode[];
};
type TransformRunArgs = {
    inPlace?: boolean;
    cache?: IngestionCache;
};
export declare function runTransformations(nodesToRun: BaseNode[], transformations: TransformComponent[], transformOptions?: any, { inPlace, cache }?: TransformRunArgs): Promise<BaseNode[]>;
export declare class IngestionPipeline {
    transformations: TransformComponent[];
    documents?: Document[];
    reader?: BaseReader;
    vectorStore?: VectorStore;
    docStore?: BaseDocumentStore;
    docStoreStrategy: DocStoreStrategy;
    cache?: IngestionCache;
    disableCache: boolean;
    private _docStoreStrategy?;
    constructor(init?: Partial<IngestionPipeline>);
    prepareInput(documents?: Document[], nodes?: BaseNode[]): Promise<BaseNode[]>;
    run(args?: IngestionRunArgs & TransformRunArgs, transformOptions?: any): Promise<BaseNode[]>;
}
export {};
