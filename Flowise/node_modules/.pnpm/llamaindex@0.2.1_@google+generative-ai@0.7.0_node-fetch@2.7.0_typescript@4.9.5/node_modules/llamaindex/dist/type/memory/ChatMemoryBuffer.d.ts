import type { ChatMessage } from "../llm/index.js";
import type { BaseChatStore } from "../storage/chatStore/types.js";
import type { BaseMemory } from "./types.js";
type ChatMemoryBufferParams = {
    tokenLimit?: number;
    chatStore?: BaseChatStore;
    chatStoreKey?: string;
    chatHistory?: ChatMessage[];
};
/**
 * Chat memory buffer.
 */
export declare class ChatMemoryBuffer implements BaseMemory {
    tokenLimit: number;
    chatStore: BaseChatStore;
    chatStoreKey: string;
    /**
     * Initialize.
     */
    constructor(init?: Partial<ChatMemoryBufferParams>);
    /**
      Get chat history.
      @param initialTokenCount: number of tokens to start with
    */
    get(initialTokenCount?: number): ChatMessage[];
    /**
     * Get all chat history.
     * @returns {ChatMessage[]} chat history
     */
    getAll(): ChatMessage[];
    /**
     * Put chat history.
     * @param message
     */
    put(message: ChatMessage): void;
    /**
     * Set chat history.
     * @param messages
     */
    set(messages: ChatMessage[]): void;
    /**
     * Reset chat history.
     */
    reset(): void;
    /**
     * Get token count for message count.
     * @param messageCount
     * @returns {number} token count
     */
    private _tokenCountForMessageCount;
}
export {};
