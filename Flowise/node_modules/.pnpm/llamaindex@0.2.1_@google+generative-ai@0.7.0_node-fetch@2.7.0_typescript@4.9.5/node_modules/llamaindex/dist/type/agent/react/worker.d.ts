import { CallbackManager } from "../../callbacks/CallbackManager.js";
import { AgentChatResponse } from "../../engines/chat/index.js";
import type { ChatResponse, LLM } from "../../llm/index.js";
import type { ObjectRetriever } from "../../objects/base.js";
import { ToolOutput } from "../../tools/index.js";
import type { BaseTool } from "../../types.js";
import type { AgentWorker, Task } from "../types.js";
import { TaskStep, TaskStepOutput } from "../types.js";
import { ReActChatFormatter } from "./formatter.js";
import { ReActOutputParser } from "./outputParser.js";
import type { BaseReasoningStep } from "./types.js";
type ReActAgentWorkerParams = {
    tools: BaseTool[];
    llm?: LLM;
    maxInteractions?: number;
    reactChatFormatter?: ReActChatFormatter | undefined;
    outputParser?: ReActOutputParser | undefined;
    callbackManager?: CallbackManager | undefined;
    verbose?: boolean | undefined;
    toolRetriever?: ObjectRetriever | undefined;
};
/**
 * ReAct agent worker.
 */
export declare class ReActAgentWorker implements AgentWorker {
    llm: LLM;
    verbose: boolean;
    maxInteractions: number;
    reactChatFormatter: ReActChatFormatter;
    outputParser: ReActOutputParser;
    callbackManager: CallbackManager;
    _getTools: (message: string) => Promise<BaseTool[]>;
    constructor({ tools, llm, maxInteractions, reactChatFormatter, outputParser, callbackManager, verbose, toolRetriever, }: ReActAgentWorkerParams);
    /**
     * Initialize a task step.
     * @param task - task
     * @param kwargs - keyword arguments
     * @returns - task step
     */
    initializeStep(task: Task, kwargs?: any): TaskStep;
    /**
     * Extract reasoning step from chat response.
     * @param output - chat response
     * @param isStreaming - whether the chat response is streaming
     * @returns - [message content, reasoning steps, is done]
     */
    extractReasoningStep(output: ChatResponse, isStreaming: boolean): [string, BaseReasoningStep[], boolean];
    /**
     * Process actions.
     * @param task - task
     * @param tools - tools
     * @param output - chat response
     * @param isStreaming - whether the chat response is streaming
     * @returns - [reasoning steps, is done]
     */
    _processActions(task: Task, tools: BaseTool[], output: ChatResponse, isStreaming?: boolean): Promise<[BaseReasoningStep[], boolean]>;
    /**
     * Get response.
     * @param currentReasoning - current reasoning steps
     * @param sources - tool outputs
     * @returns - agent chat response
     */
    _getResponse(currentReasoning: BaseReasoningStep[], sources: ToolOutput[]): AgentChatResponse;
    /**
     * Get task step response.
     * @param agentResponse - agent chat response
     * @param step - task step
     * @param isDone - whether the task is done
     * @returns - task step output
     */
    _getTaskStepResponse(agentResponse: AgentChatResponse, step: TaskStep, isDone: boolean): TaskStepOutput;
    /**
     * Run a task step.
     * @param step - task step
     * @param task - task
     * @param kwargs - keyword arguments
     * @returns - task step output
     */
    _runStep(step: TaskStep, task: Task, kwargs?: any): Promise<TaskStepOutput>;
    /**
     * Run a task step.
     * @param step - task step
     * @param task - task
     * @param kwargs - keyword arguments
     * @returns - task step output
     */
    runStep(step: TaskStep, task: Task, kwargs?: any): Promise<TaskStepOutput>;
    /**
     * Run a task step.
     * @param step - task step
     * @param task - task
     * @param kwargs - keyword arguments
     * @returns - task step output
     */
    streamStep(step: TaskStep, task: Task, kwargs?: any): Promise<TaskStepOutput>;
    /**
     * Finalize a task.
     * @param task - task
     * @param kwargs - keyword arguments
     */
    finalizeTask(task: Task, kwargs?: any): void;
}
export {};
