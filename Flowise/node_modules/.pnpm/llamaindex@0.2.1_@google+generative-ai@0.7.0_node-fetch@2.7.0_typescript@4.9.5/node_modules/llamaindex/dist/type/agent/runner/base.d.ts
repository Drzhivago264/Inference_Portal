import { CallbackManager } from "../../callbacks/CallbackManager.js";
import type { ChatEngineAgentParams } from "../../engines/chat/index.js";
import { AgentChatResponse, StreamingAgentChatResponse } from "../../engines/chat/index.js";
import type { ChatMessage, LLM } from "../../llm/index.js";
import type { BaseMemory } from "../../memory/types.js";
import type { AgentWorker, TaskStepOutput } from "../types.js";
import { Task, TaskStep } from "../types.js";
import { AgentState, BaseAgentRunner } from "./types.js";
type AgentRunnerParams = {
    agentWorker: AgentWorker;
    chatHistory?: ChatMessage[];
    state?: AgentState;
    memory?: BaseMemory;
    llm?: LLM;
    callbackManager?: CallbackManager;
    initTaskStateKwargs?: Record<string, any>;
    deleteTaskOnFinish?: boolean;
    defaultToolChoice?: string;
};
export declare class AgentRunner extends BaseAgentRunner {
    agentWorker: AgentWorker;
    state: AgentState;
    memory: BaseMemory;
    callbackManager: CallbackManager;
    initTaskStateKwargs: Record<string, any>;
    deleteTaskOnFinish: boolean;
    defaultToolChoice: string;
    /**
     * Creates an AgentRunner.
     */
    constructor(params: AgentRunnerParams);
    /**
     * Creates a task.
     * @param input
     * @param kwargs
     */
    createTask(input: string, kwargs?: any): Task;
    /**
     * Deletes the task.
     * @param taskId
     */
    deleteTask(taskId: string): void;
    /**
     * Returns the list of tasks.
     */
    listTasks(): Task[];
    /**
     * Returns the task.
     */
    getTask(taskId: string): Task;
    /**
     * Returns the completed steps in the task.
     * @param taskId
     * @param kwargs
     */
    getCompletedSteps(taskId: string): TaskStepOutput[];
    /**
     * Returns the next steps in the task.
     * @param taskId
     * @param kwargs
     */
    getUpcomingSteps(taskId: string, kwargs: any): TaskStep[];
    private _runStep;
    /**
     * Runs the next step in the task.
     * @param taskId
     * @param kwargs
     * @param step
     * @returns
     */
    runStep(taskId: string, input?: string | null, step?: TaskStep, kwargs?: any): Promise<TaskStepOutput>;
    /**
     * Runs the step and returns the response.
     * @param taskId
     * @param input
     * @param step
     * @param kwargs
     */
    streamStep(taskId: string, input: string, step?: TaskStep, kwargs?: any): Promise<TaskStepOutput>;
    /**
     * Finalizes the response and returns it.
     * @param taskId
     * @param kwargs
     * @param stepOutput
     * @returns
     */
    finalizeResponse(taskId: string, stepOutput: TaskStepOutput, kwargs?: any): Promise<AgentChatResponse | StreamingAgentChatResponse>;
    protected _chat({ message, toolChoice, stream, }: ChatEngineAgentParams): Promise<AgentChatResponse>;
    protected _chat({ message, toolChoice, stream, }: ChatEngineAgentParams & {
        stream: true;
    }): Promise<StreamingAgentChatResponse>;
    /**
     * Sends a message to the LLM and returns the response.
     * @param message
     * @param chatHistory
     * @param toolChoice
     * @returns
     */
    chat({ message, chatHistory, toolChoice, stream, }: ChatEngineAgentParams & {
        stream?: false;
    }): Promise<AgentChatResponse>;
    chat({ message, chatHistory, toolChoice, stream, }: ChatEngineAgentParams & {
        stream: true;
    }): Promise<StreamingAgentChatResponse>;
    protected _getPromptModules(): string[];
    protected _getPrompts(): string[];
    /**
     * Resets the agent.
     */
    reset(): void;
    getCompletedStep(taskId: string, stepId: string, kwargs: any): TaskStepOutput;
    /**
     * Undoes the step.
     * @param taskId
     */
    undoStep(taskId: string): void;
}
export {};
