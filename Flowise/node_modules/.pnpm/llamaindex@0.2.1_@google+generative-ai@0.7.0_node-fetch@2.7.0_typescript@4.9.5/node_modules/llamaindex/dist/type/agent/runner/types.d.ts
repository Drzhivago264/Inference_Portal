import type { AgentChatResponse, StreamingAgentChatResponse } from "../../engines/chat/index.js";
import type { Task, TaskStep, TaskStepOutput } from "../types.js";
import { BaseAgent } from "../types.js";
export declare class TaskState {
    task: Task;
    stepQueue: TaskStep[];
    completedSteps: TaskStepOutput[];
    constructor(init?: Partial<TaskState>);
}
export declare abstract class BaseAgentRunner extends BaseAgent {
    constructor(init?: Partial<BaseAgentRunner>);
    abstract createTask(input: string, kwargs: any): Task;
    abstract deleteTask(taskId: string): void;
    abstract getTask(taskId: string, kwargs: any): Task;
    abstract listTasks(kwargs: any): Task[];
    abstract getUpcomingSteps(taskId: string, kwargs: any): TaskStep[];
    abstract getCompletedSteps(taskId: string, kwargs: any): TaskStepOutput[];
    getCompletedStep(taskId: string, stepId: string, kwargs: any): TaskStepOutput;
    abstract runStep(taskId: string, input: string, step: TaskStep, kwargs: any): Promise<TaskStepOutput>;
    abstract streamStep(taskId: string, input: string, step: TaskStep, kwargs?: any): Promise<TaskStepOutput>;
    abstract finalizeResponse(taskId: string, stepOutput: TaskStepOutput, kwargs?: any): Promise<AgentChatResponse | StreamingAgentChatResponse>;
    abstract undoStep(taskId: string): void;
}
export declare class AgentState {
    taskDict: Record<string, TaskState>;
    constructor(init?: Partial<AgentState>);
    getTask(taskId: string): Task;
    getCompletedSteps(taskId: string): TaskStepOutput[];
    getStepQueue(taskId: string): TaskStep[];
    addSteps(taskId: string, steps: TaskStep[]): void;
    addCompletedStep(taskId: string, stepOutputs: TaskStepOutput[]): void;
}
