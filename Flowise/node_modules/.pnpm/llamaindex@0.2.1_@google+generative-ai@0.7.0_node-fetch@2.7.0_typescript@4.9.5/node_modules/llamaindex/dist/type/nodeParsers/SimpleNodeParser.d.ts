import type { BaseNode } from "../Node.js";
import { SentenceSplitter } from "../TextSplitter.js";
import type { NodeParser } from "./types.js";
/**
 * SimpleNodeParser is the default NodeParser. It splits documents into TextNodes using a splitter, by default SentenceSplitter
 */
export declare class SimpleNodeParser implements NodeParser {
    /**
     * The text splitter to use.
     */
    textSplitter: SentenceSplitter;
    /**
     * Whether to include metadata in the nodes.
     */
    includeMetadata: boolean;
    /**
     * Whether to include previous and next relationships in the nodes.
     */
    includePrevNextRel: boolean;
    constructor(init?: {
        textSplitter?: SentenceSplitter;
        includeMetadata?: boolean;
        includePrevNextRel?: boolean;
        chunkSize?: number;
        chunkOverlap?: number;
        splitLongSentences?: boolean;
    });
    transform(nodes: BaseNode[], _options?: any): Promise<BaseNode[]>;
    static fromDefaults(init?: {
        chunkSize?: number;
        chunkOverlap?: number;
        includeMetadata?: boolean;
        includePrevNextRel?: boolean;
    }): SimpleNodeParser;
    /**
     * Generate Node objects from documents
     * @param documents
     */
    getNodesFromDocuments(documents: BaseNode[]): import("../Node.js").TextNode<import("../Node.js").Metadata>[];
}
