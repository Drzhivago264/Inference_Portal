import { IngestionCache, getTransformationHash } from "./IngestionCache.js";
import { DocStoreStrategy, createDocStoreStrategy } from "./strategies/index.js";
export async function runTransformations(nodesToRun, transformations, transformOptions = {}, { inPlace = true, cache } = {}) {
    let nodes = nodesToRun;
    if (!inPlace) {
        nodes = [
            ...nodesToRun
        ];
    }
    for (const transform of transformations){
        if (cache) {
            const hash = getTransformationHash(nodes, transform);
            const cachedNodes = await cache.get(hash);
            if (cachedNodes) {
                nodes = cachedNodes;
            } else {
                nodes = await transform.transform(nodes, transformOptions);
                await cache.put(hash, nodes);
            }
        } else {
            nodes = await transform.transform(nodes, transformOptions);
        }
    }
    return nodes;
}
export class IngestionPipeline {
    transformations = [];
    documents;
    reader;
    vectorStore;
    docStore;
    docStoreStrategy = DocStoreStrategy.UPSERTS;
    cache;
    disableCache = false;
    _docStoreStrategy;
    constructor(init){
        Object.assign(this, init);
        this._docStoreStrategy = createDocStoreStrategy(this.docStoreStrategy, this.docStore, this.vectorStore);
        if (!this.disableCache) {
            this.cache = new IngestionCache();
        }
    }
    async prepareInput(documents, nodes) {
        const inputNodes = [];
        if (documents) {
            inputNodes.push(...documents);
        }
        if (nodes) {
            inputNodes.push(...nodes);
        }
        if (this.documents) {
            inputNodes.push(...this.documents);
        }
        if (this.reader) {
            inputNodes.push(...await this.reader.loadData());
        }
        return inputNodes;
    }
    async run(args = {}, transformOptions) {
        args.cache = args.cache ?? this.cache;
        const inputNodes = await this.prepareInput(args.documents, args.nodes);
        let nodesToRun;
        if (this._docStoreStrategy) {
            nodesToRun = await this._docStoreStrategy.transform(inputNodes);
        } else {
            nodesToRun = inputNodes;
        }
        const nodes = await runTransformations(nodesToRun, this.transformations, transformOptions, args);
        if (this.vectorStore) {
            const nodesToAdd = nodes.filter((node)=>node.embedding);
            await this.vectorStore.add(nodesToAdd);
        }
        return nodes;
    }
}
