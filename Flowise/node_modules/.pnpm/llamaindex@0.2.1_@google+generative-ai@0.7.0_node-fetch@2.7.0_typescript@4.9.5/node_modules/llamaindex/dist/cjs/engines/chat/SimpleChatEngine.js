"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SimpleChatEngine", {
    enumerable: true,
    get: function() {
        return SimpleChatEngine;
    }
});
const _ChatHistory = require("../../ChatHistory.js");
const _Response = require("../../Response.js");
const _index = require("../../llm/index.js");
const _utils = require("../../llm/utils.js");
class SimpleChatEngine {
    chatHistory;
    llm;
    constructor(init){
        this.chatHistory = (0, _ChatHistory.getHistory)(init?.chatHistory);
        this.llm = init?.llm ?? new _index.OpenAI();
    }
    async chat(params) {
        const { message, stream } = params;
        const chatHistory = params.chatHistory ? (0, _ChatHistory.getHistory)(params.chatHistory) : this.chatHistory;
        chatHistory.addMessage({
            content: message,
            role: "user"
        });
        if (stream) {
            const stream = await this.llm.chat({
                messages: await chatHistory.requestMessages(),
                stream: true
            });
            return (0, _utils.streamConverter)((0, _utils.streamReducer)({
                stream,
                initialValue: "",
                reducer: (accumulator, part)=>accumulator += part.delta,
                finished: (accumulator)=>{
                    chatHistory.addMessage({
                        content: accumulator,
                        role: "assistant"
                    });
                }
            }), (r)=>new _Response.Response(r.delta));
        }
        const response = await this.llm.chat({
            messages: await chatHistory.requestMessages()
        });
        chatHistory.addMessage(response.message);
        return new _Response.Response(response.message.content);
    }
    reset() {
        this.chatHistory.reset();
    }
}
