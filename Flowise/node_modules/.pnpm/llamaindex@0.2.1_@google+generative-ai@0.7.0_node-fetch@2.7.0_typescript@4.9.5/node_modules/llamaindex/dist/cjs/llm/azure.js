"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getAzureBaseUrl: function() {
        return getAzureBaseUrl;
    },
    getAzureConfigFromEnv: function() {
        return getAzureConfigFromEnv;
    },
    getAzureModel: function() {
        return getAzureModel;
    },
    shouldUseAzure: function() {
        return shouldUseAzure;
    }
});
const _env = require("@llamaindex/env");
// NOTE we're not supporting the legacy models as they're not available for new deployments
// https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/legacy-models
// If you have a need for them, please open an issue on GitHub
const ALL_AZURE_OPENAI_CHAT_MODELS = {
    "gpt-35-turbo": {
        contextWindow: 4096,
        openAIModel: "gpt-3.5-turbo"
    },
    "gpt-35-turbo-16k": {
        contextWindow: 16384,
        openAIModel: "gpt-3.5-turbo-16k"
    },
    "gpt-4": {
        contextWindow: 8192,
        openAIModel: "gpt-4"
    },
    "gpt-4-32k": {
        contextWindow: 32768,
        openAIModel: "gpt-4-32k"
    },
    "gpt-4-vision-preview": {
        contextWindow: 128000,
        openAIModel: "gpt-4-vision-preview"
    },
    "gpt-4-1106-preview": {
        contextWindow: 128000,
        openAIModel: "gpt-4-1106-preview"
    }
};
const ALL_AZURE_OPENAI_EMBEDDING_MODELS = {
    "text-embedding-ada-002": {
        dimensions: 1536,
        openAIModel: "text-embedding-ada-002",
        maxTokens: 8191
    },
    "text-embedding-3-small": {
        dimensions: 1536,
        dimensionOptions: [
            512,
            1536
        ],
        openAIModel: "text-embedding-3-small",
        maxTokens: 8191
    },
    "text-embedding-3-large": {
        dimensions: 3072,
        dimensionOptions: [
            256,
            1024,
            3072
        ],
        openAIModel: "text-embedding-3-large",
        maxTokens: 8191
    }
};
const ALL_AZURE_API_VERSIONS = [
    "2022-12-01",
    "2023-05-15",
    "2023-03-15-preview",
    "2023-06-01-preview",
    "2023-07-01-preview",
    "2023-08-01-preview",
    "2023-09-01-preview",
    "2023-12-01-preview"
];
const DEFAULT_API_VERSION = "2023-05-15";
function getAzureConfigFromEnv(init) {
    return {
        apiKey: init?.apiKey ?? (0, _env.getEnv)("AZURE_OPENAI_KEY") ?? // From Azure docs
        (0, _env.getEnv)("OPENAI_API_KEY") ?? // Python compatible
        (0, _env.getEnv)("AZURE_OPENAI_API_KEY"),
        endpoint: init?.endpoint ?? (0, _env.getEnv)("AZURE_OPENAI_ENDPOINT") ?? // From Azure docs
        (0, _env.getEnv)("OPENAI_API_BASE") ?? // Python compatible
        (0, _env.getEnv)("AZURE_OPENAI_API_INSTANCE_NAME"),
        apiVersion: init?.apiVersion ?? (0, _env.getEnv)("AZURE_OPENAI_API_VERSION") ?? // From Azure docs
        (0, _env.getEnv)("OPENAI_API_VERSION") ?? // Python compatible
        (0, _env.getEnv)("AZURE_OPENAI_API_VERSION") ?? // LCJS compatible
        DEFAULT_API_VERSION,
        deploymentName: init?.deploymentName ?? (0, _env.getEnv)("AZURE_OPENAI_DEPLOYMENT") ?? // From Azure docs
        (0, _env.getEnv)("AZURE_OPENAI_API_DEPLOYMENT_NAME") ?? // LCJS compatible
        init?.model
    };
}
function getAzureBaseUrl(config) {
    return `${config.endpoint}/openai/deployments/${config.deploymentName}`;
}
function getAzureModel(openAIModel) {
    for (const [key, value] of Object.entries(ALL_AZURE_OPENAI_EMBEDDING_MODELS)){
        if (value.openAIModel === openAIModel) {
            return key;
        }
    }
    for (const [key, value] of Object.entries(ALL_AZURE_OPENAI_CHAT_MODELS)){
        if (value.openAIModel === openAIModel) {
            return key;
        }
    }
    throw new Error(`Unknown model: ${openAIModel}`);
}
function shouldUseAzure() {
    return (0, _env.getEnv)("AZURE_OPENAI_ENDPOINT") || (0, _env.getEnv)("AZURE_OPENAI_API_INSTANCE_NAME") || (0, _env.getEnv)("OPENAI_API_TYPE") === "azure";
}
