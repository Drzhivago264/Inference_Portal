"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SimpleNodeParser", {
    enumerable: true,
    get: function() {
        return SimpleNodeParser;
    }
});
const _TextSplitter = require("../TextSplitter.js");
const _constants = require("../constants.js");
const _utils = require("./utils.js");
class SimpleNodeParser {
    /**
   * The text splitter to use.
   */ textSplitter;
    /**
   * Whether to include metadata in the nodes.
   */ includeMetadata;
    /**
   * Whether to include previous and next relationships in the nodes.
   */ includePrevNextRel;
    constructor(init){
        this.textSplitter = init?.textSplitter ?? new _TextSplitter.SentenceSplitter({
            chunkSize: init?.chunkSize ?? _constants.DEFAULT_CHUNK_SIZE,
            chunkOverlap: init?.chunkOverlap ?? _constants.DEFAULT_CHUNK_OVERLAP,
            splitLongSentences: init?.splitLongSentences ?? false
        });
        this.includeMetadata = init?.includeMetadata ?? true;
        this.includePrevNextRel = init?.includePrevNextRel ?? true;
    }
    async transform(nodes, _options) {
        return this.getNodesFromDocuments(nodes);
    }
    static fromDefaults(init) {
        return new SimpleNodeParser(init);
    }
    /**
   * Generate Node objects from documents
   * @param documents
   */ getNodesFromDocuments(documents) {
        return documents.map((document)=>(0, _utils.getNodesFromDocument)(document, this.textSplitter.splitText.bind(this.textSplitter), this.includeMetadata, this.includePrevNextRel)).flat();
    }
}
