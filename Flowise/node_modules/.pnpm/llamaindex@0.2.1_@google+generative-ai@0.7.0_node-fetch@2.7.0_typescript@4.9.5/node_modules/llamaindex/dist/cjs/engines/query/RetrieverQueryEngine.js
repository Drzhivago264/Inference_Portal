"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RetrieverQueryEngine", {
    enumerable: true,
    get: function() {
        return RetrieverQueryEngine;
    }
});
const _env = require("@llamaindex/env");
const _Mixin = require("../../prompts/Mixin.js");
const _index = require("../../synthesizers/index.js");
class RetrieverQueryEngine extends _Mixin.PromptMixin {
    retriever;
    responseSynthesizer;
    nodePostprocessors;
    preFilters;
    constructor(retriever, responseSynthesizer, preFilters, nodePostprocessors){
        super();
        this.retriever = retriever;
        const serviceContext = this.retriever.getServiceContext();
        this.responseSynthesizer = responseSynthesizer || new _index.ResponseSynthesizer({
            serviceContext
        });
        this.preFilters = preFilters;
        this.nodePostprocessors = nodePostprocessors || [];
    }
    _getPromptModules() {
        return {
            responseSynthesizer: this.responseSynthesizer
        };
    }
    async applyNodePostprocessors(nodes, query) {
        let nodesWithScore = nodes;
        for (const postprocessor of this.nodePostprocessors){
            nodesWithScore = await postprocessor.postprocessNodes(nodesWithScore, query);
        }
        return nodesWithScore;
    }
    async retrieve(query, parentEvent) {
        const nodes = await this.retriever.retrieve({
            query,
            parentEvent,
            preFilters: this.preFilters
        });
        return await this.applyNodePostprocessors(nodes, query);
    }
    async query(params) {
        const { query, stream } = params;
        const parentEvent = params.parentEvent || {
            id: (0, _env.randomUUID)(),
            type: "wrapper",
            tags: [
                "final"
            ]
        };
        const nodesWithScore = await this.retrieve(query, parentEvent);
        if (stream) {
            return this.responseSynthesizer.synthesize({
                query,
                nodesWithScore,
                parentEvent,
                stream: true
            });
        }
        return this.responseSynthesizer.synthesize({
            query,
            nodesWithScore,
            parentEvent
        });
    }
}
