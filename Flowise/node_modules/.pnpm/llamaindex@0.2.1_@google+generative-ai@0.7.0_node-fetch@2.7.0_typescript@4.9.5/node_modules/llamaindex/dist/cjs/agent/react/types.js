"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ActionReasoningStep: function() {
        return ActionReasoningStep;
    },
    BaseOutputParser: function() {
        return BaseOutputParser;
    },
    ObservationReasoningStep: function() {
        return ObservationReasoningStep;
    },
    ResponseReasoningStep: function() {
        return ResponseReasoningStep;
    }
});
class ObservationReasoningStep {
    observation;
    constructor(init){
        this.observation = init?.observation ?? "";
    }
    getContent() {
        return `Observation: ${this.observation}`;
    }
    isDone() {
        return false;
    }
}
class ActionReasoningStep {
    thought;
    action;
    actionInput;
    constructor(init){
        this.thought = init?.thought ?? "";
        this.action = init?.action ?? "";
        this.actionInput = init?.actionInput ?? {};
    }
    getContent() {
        return `Thought: ${this.thought}\nAction: ${this.action}\nAction Input: ${JSON.stringify(this.actionInput)}`;
    }
    isDone() {
        return false;
    }
}
class BaseOutputParser {
    format(output) {
        return output;
    }
    formatMessages(messages) {
        if (messages) {
            if (messages[0].role === "system") {
                messages[0].content = this.format(messages[0].content || "");
            } else {
                messages[messages.length - 1].content = this.format(messages[messages.length - 1].content || "");
            }
        }
        return messages;
    }
}
class ResponseReasoningStep {
    thought;
    response;
    isStreaming = false;
    constructor(init){
        this.thought = init?.thought ?? "";
        this.response = init?.response ?? "";
        this.isStreaming = init?.isStreaming ?? false;
    }
    getContent() {
        if (this.isStreaming) {
            return `Thought: ${this.thought}\nAnswer (Starts With): ${this.response} ...`;
        } else {
            return `Thought: ${this.thought}\nAnswer: ${this.response}`;
        }
    }
    isDone() {
        return true;
    }
}
