"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ANTHROPIC_AI_PROMPT: function() {
        return ANTHROPIC_AI_PROMPT;
    },
    ANTHROPIC_HUMAN_PROMPT: function() {
        return ANTHROPIC_HUMAN_PROMPT;
    },
    AnthropicSession: function() {
        return AnthropicSession;
    },
    getAnthropicSession: function() {
        return getAnthropicSession;
    }
});
const _sdk = /*#__PURE__*/ _interop_require_wildcard(require("@anthropic-ai/sdk"));
const _env = require("@llamaindex/env");
const _lodash = /*#__PURE__*/ _interop_require_default(require("lodash"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class AnthropicSession {
    anthropic;
    constructor(options = {}){
        if (!options.apiKey) {
            options.apiKey = (0, _env.getEnv)("ANTHROPIC_API_KEY");
        }
        if (!options.apiKey) {
            throw new Error("Set Anthropic Key in ANTHROPIC_API_KEY env variable"); // Overriding Anthropic package's error message
        }
        this.anthropic = new _sdk.default(options);
    }
}
// I'm not 100% sure this is necessary vs. just starting a new session
// every time we make a call. They say they try to reuse connections
// so in theory this is more efficient, but we should test it in the future.
const defaultAnthropicSession = [];
function getAnthropicSession(options = {}) {
    let session = defaultAnthropicSession.find((session)=>{
        return _lodash.default.isEqual(session.options, options);
    })?.session;
    if (!session) {
        session = new AnthropicSession(options);
        defaultAnthropicSession.push({
            session,
            options
        });
    }
    return session;
}
const ANTHROPIC_HUMAN_PROMPT = _sdk.HUMAN_PROMPT;
const ANTHROPIC_AI_PROMPT = _sdk.AI_PROMPT;
