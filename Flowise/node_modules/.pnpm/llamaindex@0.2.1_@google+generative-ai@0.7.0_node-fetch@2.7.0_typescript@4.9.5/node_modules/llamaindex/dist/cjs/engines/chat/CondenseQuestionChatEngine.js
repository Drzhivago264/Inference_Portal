"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CondenseQuestionChatEngine", {
    enumerable: true,
    get: function() {
        return CondenseQuestionChatEngine;
    }
});
const _ChatHistory = require("../../ChatHistory.js");
const _Prompt = require("../../Prompt.js");
const _ServiceContext = require("../../ServiceContext.js");
const _utils = require("../../llm/utils.js");
const _index = require("../../prompts/index.js");
class CondenseQuestionChatEngine extends _index.PromptMixin {
    queryEngine;
    chatHistory;
    llm;
    condenseMessagePrompt;
    constructor(init){
        super();
        this.queryEngine = init.queryEngine;
        this.chatHistory = (0, _ChatHistory.getHistory)(init?.chatHistory);
        this.llm = init?.serviceContext?.llm ?? (0, _ServiceContext.serviceContextFromDefaults)().llm;
        this.condenseMessagePrompt = init?.condenseMessagePrompt ?? _Prompt.defaultCondenseQuestionPrompt;
    }
    _getPrompts() {
        return {
            condenseMessagePrompt: this.condenseMessagePrompt
        };
    }
    _updatePrompts(promptsDict) {
        if (promptsDict.condenseMessagePrompt) {
            this.condenseMessagePrompt = promptsDict.condenseMessagePrompt;
        }
    }
    async condenseQuestion(chatHistory, question) {
        const chatHistoryStr = (0, _Prompt.messagesToHistoryStr)(await chatHistory.requestMessages());
        return this.llm.complete({
            prompt: this.condenseMessagePrompt({
                question: question,
                chatHistory: chatHistoryStr
            })
        });
    }
    async chat(params) {
        const { message, stream } = params;
        const chatHistory = params.chatHistory ? (0, _ChatHistory.getHistory)(params.chatHistory) : this.chatHistory;
        const condensedQuestion = (await this.condenseQuestion(chatHistory, (0, _utils.extractText)(message))).text;
        chatHistory.addMessage({
            content: message,
            role: "user"
        });
        if (stream) {
            const stream = await this.queryEngine.query({
                query: condensedQuestion,
                stream: true
            });
            return (0, _utils.streamReducer)({
                stream,
                initialValue: "",
                reducer: (accumulator, part)=>accumulator += part.response,
                finished: (accumulator)=>{
                    chatHistory.addMessage({
                        content: accumulator,
                        role: "assistant"
                    });
                }
            });
        }
        const response = await this.queryEngine.query({
            query: condensedQuestion
        });
        chatHistory.addMessage({
            content: response.response,
            role: "assistant"
        });
        return response;
    }
    reset() {
        this.chatHistory.reset();
    }
}
