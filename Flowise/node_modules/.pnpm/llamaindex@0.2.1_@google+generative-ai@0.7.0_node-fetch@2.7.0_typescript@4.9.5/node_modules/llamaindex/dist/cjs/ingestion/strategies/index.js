"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DocStoreStrategy: function() {
        return DocStoreStrategy;
    },
    createDocStoreStrategy: function() {
        return createDocStoreStrategy;
    }
});
const _DuplicatesStrategy = require("./DuplicatesStrategy.js");
const _UpsertsStrategy = require("./UpsertsStrategy.js");
var DocStoreStrategy;
(function(DocStoreStrategy) {
    DocStoreStrategy["UPSERTS"] = "upserts";
    DocStoreStrategy["DUPLICATES_ONLY"] = "duplicates_only";
    DocStoreStrategy["UPSERTS_AND_DELETE"] = "upserts_and_delete";
})(DocStoreStrategy || (DocStoreStrategy = {}));
function createDocStoreStrategy(docStoreStrategy, docStore, vectorStore) {
    if (docStore && vectorStore) {
        if (docStoreStrategy === "upserts" || docStoreStrategy === "upserts_and_delete") {
            return new _UpsertsStrategy.UpsertsStrategy(docStore, vectorStore);
        } else if (docStoreStrategy === "duplicates_only") {
            return new _DuplicatesStrategy.DuplicatesStrategy(docStore);
        } else {
            throw new Error(`Invalid docstore strategy: ${docStoreStrategy}`);
        }
    } else if (docStore && !vectorStore) {
        if (docStoreStrategy === "upserts") {
            console.warn("Docstore strategy set to upserts, but no vector store. Switching to duplicates_only strategy.");
        } else if (docStoreStrategy === "upserts_and_delete") {
            console.warn("Docstore strategy set to upserts and delete, but no vector store. Switching to duplicates_only strategy.");
        }
        return new _DuplicatesStrategy.DuplicatesStrategy(docStore);
    }
}
