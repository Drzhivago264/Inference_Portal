"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MarkdownReader", {
    enumerable: true,
    get: function() {
        return MarkdownReader;
    }
});
const _env = require("@llamaindex/env");
const _Node = require("../Node.js");
class MarkdownReader {
    _removeHyperlinks;
    _removeImages;
    /**
   * @param {boolean} [removeHyperlinks=true] - Indicates whether hyperlinks should be removed.
   * @param {boolean} [removeImages=true] - Indicates whether images should be removed.
   */ constructor(removeHyperlinks = true, removeImages = true){
        this._removeHyperlinks = removeHyperlinks;
        this._removeImages = removeImages;
    }
    /**
   * Convert a markdown file to a dictionary.
   * The keys are the headers and the values are the text under each header.
   * @param {string} markdownText - The markdown text to convert.
   * @returns {Array<MarkdownTuple>} - An array of tuples, where each tuple contains a header (or null) and its corresponding text.
   */ markdownToTups(markdownText) {
        const markdownTups = [];
        const lines = markdownText.split("\n");
        let currentHeader = null;
        let currentText = "";
        for (const line of lines){
            const headerMatch = line.match(/^#+\s/);
            if (headerMatch) {
                if (currentHeader) {
                    if (!currentText) {
                        currentHeader += line + "\n";
                        continue;
                    }
                    markdownTups.push([
                        currentHeader,
                        currentText
                    ]);
                }
                currentHeader = line;
                currentText = "";
            } else {
                currentText += line + "\n";
            }
        }
        markdownTups.push([
            currentHeader,
            currentText
        ]);
        if (currentHeader) {
            // pass linting, assert keys are defined
            markdownTups.map((tuple)=>[
                    tuple[0]?.replace(/#/g, "").trim() || null,
                    tuple[1].replace(/<.*?>/g, "")
                ]);
        } else {
            markdownTups.map((tuple)=>[
                    tuple[0],
                    tuple[1].replace(/<.*?>/g, "")
                ]);
        }
        return markdownTups;
    }
    removeImages(content) {
        const pattern = /!{1}\[\[(.*)\]\]/g;
        return content.replace(pattern, "");
    }
    removeHyperlinks(content) {
        const pattern = /\[(.*?)\]\((.*?)\)/g;
        return content.replace(pattern, "$1");
    }
    parseTups(content) {
        let modifiedContent = content;
        if (this._removeHyperlinks) {
            modifiedContent = this.removeHyperlinks(modifiedContent);
        }
        if (this._removeImages) {
            modifiedContent = this.removeImages(modifiedContent);
        }
        return this.markdownToTups(modifiedContent);
    }
    async loadData(file, fs = _env.defaultFS) {
        const content = await fs.readFile(file);
        const tups = this.parseTups(content);
        const results = [];
        for (const [header, value] of tups){
            if (header) {
                results.push(new _Node.Document({
                    text: `\n\n${header}\n${value}`
                }));
            } else {
                results.push(new _Node.Document({
                    text: value
                }));
            }
        }
        return results;
    }
}
