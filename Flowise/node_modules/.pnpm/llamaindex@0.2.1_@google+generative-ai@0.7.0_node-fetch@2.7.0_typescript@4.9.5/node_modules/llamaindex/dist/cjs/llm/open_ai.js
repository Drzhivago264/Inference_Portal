"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AzureOpenAI: function() {
        return AzureOpenAI;
    },
    OpenAISession: function() {
        return OpenAISession;
    },
    getOpenAISession: function() {
        return getOpenAISession;
    }
});
const _env = require("@llamaindex/env");
const _lodash = /*#__PURE__*/ _interop_require_default(require("lodash"));
const _openai = /*#__PURE__*/ _interop_require_default(require("openai"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class AzureOpenAI extends _openai.default {
    authHeaders() {
        return {
            "api-key": this.apiKey
        };
    }
}
class OpenAISession {
    openai;
    constructor(options = {}){
        if (!options.apiKey) {
            options.apiKey = (0, _env.getEnv)("OPENAI_API_KEY");
        }
        if (!options.apiKey) {
            throw new Error("Set OpenAI Key in OPENAI_API_KEY env variable"); // Overriding OpenAI package's error message
        }
        if (options.azure) {
            this.openai = new AzureOpenAI(options);
        } else {
            this.openai = new _openai.default({
                ...options
            });
        }
    }
}
// I'm not 100% sure this is necessary vs. just starting a new session
// every time we make a call. They say they try to reuse connections
// so in theory this is more efficient, but we should test it in the future.
const defaultOpenAISession = [];
function getOpenAISession(options = {}) {
    let session = defaultOpenAISession.find((session)=>{
        return _lodash.default.isEqual(session.options, options);
    })?.session;
    if (!session) {
        session = new OpenAISession(options);
        defaultOpenAISession.push({
            session,
            options
        });
    }
    return session;
}
