"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PortkeySession: function() {
        return PortkeySession;
    },
    getPortkeySession: function() {
        return getPortkeySession;
    }
});
const _env = require("@llamaindex/env");
const _lodash = /*#__PURE__*/ _interop_require_default(require("lodash"));
const _portkeyai = require("portkey-ai");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class PortkeySession {
    portkey;
    constructor(options = {}){
        if (!options.apiKey) {
            options.apiKey = (0, _env.getEnv)("PORTKEY_API_KEY");
        }
        if (!options.baseURL) {
            options.baseURL = (0, _env.getEnv)("PORTKEY_BASE_URL") ?? "https://api.portkey.ai";
        }
        this.portkey = new _portkeyai.Portkey({});
        this.portkey.llms = [
            {}
        ];
        if (!options.apiKey) {
            throw new Error("Set Portkey ApiKey in PORTKEY_API_KEY env variable");
        }
        this.portkey = new _portkeyai.Portkey(options);
    }
}
const defaultPortkeySession = [];
function getPortkeySession(options = {}) {
    let session = defaultPortkeySession.find((session)=>{
        return _lodash.default.isEqual(session.options, options);
    })?.session;
    if (!session) {
        session = new PortkeySession(options);
        defaultPortkeySession.push({
            session,
            options
        });
    }
    return session;
}
