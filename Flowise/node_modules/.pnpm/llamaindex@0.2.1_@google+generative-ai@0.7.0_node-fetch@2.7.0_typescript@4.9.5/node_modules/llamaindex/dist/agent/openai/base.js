import { OpenAI } from "../../llm/index.js";
import { AgentRunner } from "../runner/base.js";
import { OpenAIAgentWorker } from "./worker.js";
/**
 * An agent that uses OpenAI's API to generate text.
 *
 * @category OpenAI
 */ export class OpenAIAgent extends AgentRunner {
    constructor({ tools, llm, memory, prefixMessages, verbose, maxFunctionCalls = 5, defaultToolChoice = "auto", callbackManager, toolRetriever, systemPrompt }){
        llm = llm ?? new OpenAI({
            model: "gpt-3.5-turbo-0613"
        });
        if (systemPrompt) {
            if (prefixMessages) {
                throw new Error("Cannot provide both systemPrompt and prefixMessages");
            }
            prefixMessages = [
                {
                    content: systemPrompt,
                    role: "system"
                }
            ];
        }
        if (!llm?.metadata.isFunctionCallingModel) {
            throw new Error("LLM model must be a function-calling model");
        }
        const stepEngine = new OpenAIAgentWorker({
            tools,
            callbackManager,
            llm,
            prefixMessages,
            maxFunctionCalls,
            toolRetriever,
            verbose
        });
        super({
            agentWorker: stepEngine,
            memory,
            callbackManager,
            defaultToolChoice,
            chatHistory: prefixMessages
        });
    }
}
