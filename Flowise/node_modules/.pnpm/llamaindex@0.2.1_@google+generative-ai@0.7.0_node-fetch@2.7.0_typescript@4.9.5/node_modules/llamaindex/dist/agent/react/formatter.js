import { getReactChatSystemHeader } from "./prompts.js";
import { ObservationReasoningStep } from "./types.js";
function getReactToolDescriptions(tools) {
    const toolDescs = [];
    for (const tool of tools){
        // @ts-ignore
        const toolDesc = `> Tool Name: ${tool.metadata.name}\nTool Description: ${tool.metadata.description}\nTool Args: ${JSON.stringify(tool?.metadata?.parameters?.properties)}\n`;
        toolDescs.push(toolDesc);
    }
    return toolDescs;
}
export class ReActChatFormatter {
    systemHeader = "";
    context = "'";
    constructor(init){
        Object.assign(this, init);
    }
    format(tools, chatHistory, currentReasoning) {
        currentReasoning = currentReasoning ?? [];
        const formatArgs = {
            toolDesc: getReactToolDescriptions(tools).join("\n"),
            toolNames: tools.map((tool)=>tool.metadata.name).join(", "),
            context: ""
        };
        if (this.context) {
            formatArgs["context"] = this.context;
        }
        const reasoningHistory = [];
        for (const reasoningStep of currentReasoning){
            let message;
            if (reasoningStep instanceof ObservationReasoningStep) {
                message = {
                    content: reasoningStep.getContent(),
                    role: "user"
                };
            } else {
                message = {
                    content: reasoningStep.getContent(),
                    role: "system"
                };
            }
            reasoningHistory.push(message);
        }
        const systemContent = getReactChatSystemHeader({
            toolDesc: formatArgs.toolDesc,
            toolNames: formatArgs.toolNames
        });
        return [
            {
                content: systemContent,
                role: "system"
            },
            ...chatHistory,
            ...reasoningHistory
        ];
    }
}
