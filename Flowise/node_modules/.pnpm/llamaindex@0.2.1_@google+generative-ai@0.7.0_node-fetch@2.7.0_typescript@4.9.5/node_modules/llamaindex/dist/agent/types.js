/**
 * BaseAgent is the base class for all agents.
 */ export class BaseAgent {
    _getPrompts() {
        return [];
    }
    _getPromptModules() {
        return [];
    }
    /**
   * query is the main entrypoint for the agent. It takes a query and returns a response.
   * @param params
   * @returns
   */ async query(params) {
        // Handle non-streaming query
        const agentResponse = await this.chat({
            message: params.query,
            chatHistory: []
        });
        return agentResponse;
    }
}
/**
 * Task is a unit of work for the agent.
 * @param taskId: taskId
 */ export class Task {
    taskId;
    input;
    memory;
    extraState;
    constructor({ taskId, input, memory, extraState }){
        this.taskId = taskId;
        this.input = input;
        this.memory = memory;
        this.extraState = extraState ?? {};
    }
}
/**
 * TaskStep is a unit of work for the agent.
 * @param taskId: taskId
 * @param stepId: stepId
 * @param input: input
 * @param stepState: stepState
 */ export class TaskStep {
    taskId;
    stepId;
    input;
    stepState = {};
    nextSteps = {};
    prevSteps = {};
    isReady = true;
    constructor(taskId, stepId, input, stepState){
        this.taskId = taskId;
        this.stepId = stepId;
        this.input = input;
        this.stepState = stepState ?? this.stepState;
    }
    /*
   * getNextStep is a function that returns the next step.
   * @param stepId: stepId
   * @param input: input
   * @param stepState: stepState
   * @returns: TaskStep
   */ getNextStep(stepId, input, stepState) {
        return new TaskStep(this.taskId, stepId, input, stepState ?? this.stepState);
    }
    /*
   * linkStep is a function that links the next step.
   * @param nextStep: nextStep
   * @returns: void
   */ linkStep(nextStep) {
        this.nextSteps[nextStep.stepId] = nextStep;
        nextStep.prevSteps[this.stepId] = this;
    }
}
/**
 * TaskStepOutput is a unit of work for the agent.
 * @param output: output
 * @param taskStep: taskStep
 * @param nextSteps: nextSteps
 * @param isLast: isLast
 */ export class TaskStepOutput {
    output;
    taskStep;
    nextSteps;
    isLast;
    constructor(output, taskStep, nextSteps, isLast = false){
        this.output = output;
        this.taskStep = taskStep;
        this.nextSteps = nextSteps;
        this.isLast = isLast;
    }
    toString() {
        return String(this.output);
    }
}
