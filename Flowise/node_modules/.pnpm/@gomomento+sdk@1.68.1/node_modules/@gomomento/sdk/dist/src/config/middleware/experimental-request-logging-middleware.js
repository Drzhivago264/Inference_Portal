"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalRequestLoggingMiddleware = void 0;
class ExperimentalLoggingMiddlewareRequestHandler {
    constructor(logger, requestId) {
        this.logger = logger;
        this.requestId = requestId;
    }
    onRequestMetadata(metadata) {
        this.logger.debug('Logging middleware: request %s onRequestMetadata: %s', this.requestId, metadata.toJsonString());
        return Promise.resolve(metadata);
    }
    onRequestBody(request) {
        this.logger.debug('Logging middleware: request %s onRequestBody: request type: %s, request size: %s', this.requestId, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        request.constructor.name, request.messageLength());
        return Promise.resolve(request);
    }
    onResponseMetadata(metadata) {
        this.logger.debug('Logging middleware: request %s onResponseMetadata: %s', this.requestId, metadata.toJsonString());
        return Promise.resolve(metadata);
    }
    onResponseBody(response) {
        var _a, _b, _c;
        this.logger.debug('Logging middleware: request %s onResponseBody: response type: %s, response size: %s', this.requestId, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        (_b = (_a = response === null || response === void 0 ? void 0 : response.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'null', (_c = response === null || response === void 0 ? void 0 : response.messageLength()) !== null && _c !== void 0 ? _c : 0);
        return Promise.resolve(response);
    }
    onResponseStatus(status) {
        this.logger.debug('Logging middleware: request %s onResponseStatus: status code: %s', this.requestId, status.code());
        return Promise.resolve(status);
    }
}
/**
 * This middleware implements per-request logging which can be used for
 * debugging.  The log format is currently considered experimental; in a
 * future release, once the log format is considered stable, this class will
 * be renamed to remove the Experimental prefix.
 *
 * WARNING: enabling this middleware may have minor performance implications,
 * so enable with caution.
 *
 * In order for this middleware to produce output you will need to have
 * set up your {Configuration} with a {MomentoLoggerFactory} instance that
 * is configured to log at DEBUG level or lower.  See `advanced.ts` in the
 * examples directory for an example of how to set up your {Configuration} to
 * enable this middleware.
 */
class ExperimentalRequestLoggingMiddleware {
    constructor(loggerFactory) {
        this.logger = loggerFactory.getLogger(this);
        this.nextRequestId = 0;
    }
    onNewRequest() {
        this.nextRequestId++;
        return new ExperimentalLoggingMiddlewareRequestHandler(this.logger, this.nextRequestId.toString());
    }
}
exports.ExperimentalRequestLoggingMiddleware = ExperimentalRequestLoggingMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudGFsLXJlcXVlc3QtbG9nZ2luZy1taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbmZpZy9taWRkbGV3YXJlL2V4cGVyaW1lbnRhbC1yZXF1ZXN0LWxvZ2dpbmctbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFTQSxNQUFNLDJDQUEyQztJQUsvQyxZQUFZLE1BQXFCLEVBQUUsU0FBaUI7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQTRCO1FBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHNEQUFzRCxFQUN0RCxJQUFJLENBQUMsU0FBUyxFQUNkLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FDeEIsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsYUFBYSxDQUFDLE9BQTBCO1FBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLGtGQUFrRixFQUNsRixJQUFJLENBQUMsU0FBUztRQUNkLHNFQUFzRTtRQUN0RSxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksRUFDeEIsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUN4QixDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxrQkFBa0IsQ0FDaEIsUUFBNEI7UUFFNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsdURBQXVELEVBQ3ZELElBQUksQ0FBQyxTQUFTLEVBQ2QsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUN4QixDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxjQUFjLENBQ1osUUFBa0M7O1FBRWxDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHFGQUFxRixFQUNyRixJQUFJLENBQUMsU0FBUztRQUNkLHNFQUFzRTtRQUN0RSxNQUFBLE1BQUEsUUFBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLFdBQVcsMENBQUUsSUFBSSxtQ0FBSSxNQUFNLEVBQ3JDLE1BQUEsUUFBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLGFBQWEsRUFBRSxtQ0FBSSxDQUFDLENBQy9CLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQXdCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLGtFQUFrRSxFQUNsRSxJQUFJLENBQUMsU0FBUyxFQUNkLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FDZCxDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDRjtBQUVEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsTUFBYSxvQ0FBb0M7SUFHL0MsWUFBWSxhQUFtQztRQUM3QyxJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsT0FBTyxJQUFJLDJDQUEyQyxDQUNwRCxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQzlCLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFmRCxvRkFlQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE1pZGRsZXdhcmUsXG4gIE1pZGRsZXdhcmVNZXNzYWdlLFxuICBNaWRkbGV3YXJlTWV0YWRhdGEsXG4gIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlcixcbiAgTWlkZGxld2FyZVN0YXR1cyxcbn0gZnJvbSAnLi9taWRkbGV3YXJlJztcbmltcG9ydCB7TW9tZW50b0xvZ2dlciwgTW9tZW50b0xvZ2dlckZhY3Rvcnl9IGZyb20gJy4uLy4uLyc7XG5cbmNsYXNzIEV4cGVyaW1lbnRhbExvZ2dpbmdNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJcbiAgaW1wbGVtZW50cyBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJcbntcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVxdWVzdElkOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKGxvZ2dlcjogTW9tZW50b0xvZ2dlciwgcmVxdWVzdElkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLnJlcXVlc3RJZCA9IHJlcXVlc3RJZDtcbiAgfVxuXG4gIG9uUmVxdWVzdE1ldGFkYXRhKG1ldGFkYXRhOiBNaWRkbGV3YXJlTWV0YWRhdGEpOiBQcm9taXNlPE1pZGRsZXdhcmVNZXRhZGF0YT4ge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgJ0xvZ2dpbmcgbWlkZGxld2FyZTogcmVxdWVzdCAlcyBvblJlcXVlc3RNZXRhZGF0YTogJXMnLFxuICAgICAgdGhpcy5yZXF1ZXN0SWQsXG4gICAgICBtZXRhZGF0YS50b0pzb25TdHJpbmcoKVxuICAgICk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtZXRhZGF0YSk7XG4gIH1cbiAgb25SZXF1ZXN0Qm9keShyZXF1ZXN0OiBNaWRkbGV3YXJlTWVzc2FnZSk6IFByb21pc2U8TWlkZGxld2FyZU1lc3NhZ2U+IHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICdMb2dnaW5nIG1pZGRsZXdhcmU6IHJlcXVlc3QgJXMgb25SZXF1ZXN0Qm9keTogcmVxdWVzdCB0eXBlOiAlcywgcmVxdWVzdCBzaXplOiAlcycsXG4gICAgICB0aGlzLnJlcXVlc3RJZCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIHJlcXVlc3QuY29uc3RydWN0b3IubmFtZSxcbiAgICAgIHJlcXVlc3QubWVzc2FnZUxlbmd0aCgpXG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3QpO1xuICB9XG5cbiAgb25SZXNwb25zZU1ldGFkYXRhKFxuICAgIG1ldGFkYXRhOiBNaWRkbGV3YXJlTWV0YWRhdGFcbiAgKTogUHJvbWlzZTxNaWRkbGV3YXJlTWV0YWRhdGE+IHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICdMb2dnaW5nIG1pZGRsZXdhcmU6IHJlcXVlc3QgJXMgb25SZXNwb25zZU1ldGFkYXRhOiAlcycsXG4gICAgICB0aGlzLnJlcXVlc3RJZCxcbiAgICAgIG1ldGFkYXRhLnRvSnNvblN0cmluZygpXG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ldGFkYXRhKTtcbiAgfVxuXG4gIG9uUmVzcG9uc2VCb2R5KFxuICAgIHJlc3BvbnNlOiBNaWRkbGV3YXJlTWVzc2FnZSB8IG51bGxcbiAgKTogUHJvbWlzZTxNaWRkbGV3YXJlTWVzc2FnZSB8IG51bGw+IHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICdMb2dnaW5nIG1pZGRsZXdhcmU6IHJlcXVlc3QgJXMgb25SZXNwb25zZUJvZHk6IHJlc3BvbnNlIHR5cGU6ICVzLCByZXNwb25zZSBzaXplOiAlcycsXG4gICAgICB0aGlzLnJlcXVlc3RJZCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIHJlc3BvbnNlPy5jb25zdHJ1Y3Rvcj8ubmFtZSA/PyAnbnVsbCcsXG4gICAgICByZXNwb25zZT8ubWVzc2FnZUxlbmd0aCgpID8/IDBcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICB9XG5cbiAgb25SZXNwb25zZVN0YXR1cyhzdGF0dXM6IE1pZGRsZXdhcmVTdGF0dXMpOiBQcm9taXNlPE1pZGRsZXdhcmVTdGF0dXM+IHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICdMb2dnaW5nIG1pZGRsZXdhcmU6IHJlcXVlc3QgJXMgb25SZXNwb25zZVN0YXR1czogc3RhdHVzIGNvZGU6ICVzJyxcbiAgICAgIHRoaXMucmVxdWVzdElkLFxuICAgICAgc3RhdHVzLmNvZGUoKVxuICAgICk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdGF0dXMpO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIGltcGxlbWVudHMgcGVyLXJlcXVlc3QgbG9nZ2luZyB3aGljaCBjYW4gYmUgdXNlZCBmb3JcbiAqIGRlYnVnZ2luZy4gIFRoZSBsb2cgZm9ybWF0IGlzIGN1cnJlbnRseSBjb25zaWRlcmVkIGV4cGVyaW1lbnRhbDsgaW4gYVxuICogZnV0dXJlIHJlbGVhc2UsIG9uY2UgdGhlIGxvZyBmb3JtYXQgaXMgY29uc2lkZXJlZCBzdGFibGUsIHRoaXMgY2xhc3Mgd2lsbFxuICogYmUgcmVuYW1lZCB0byByZW1vdmUgdGhlIEV4cGVyaW1lbnRhbCBwcmVmaXguXG4gKlxuICogV0FSTklORzogZW5hYmxpbmcgdGhpcyBtaWRkbGV3YXJlIG1heSBoYXZlIG1pbm9yIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucyxcbiAqIHNvIGVuYWJsZSB3aXRoIGNhdXRpb24uXG4gKlxuICogSW4gb3JkZXIgZm9yIHRoaXMgbWlkZGxld2FyZSB0byBwcm9kdWNlIG91dHB1dCB5b3Ugd2lsbCBuZWVkIHRvIGhhdmVcbiAqIHNldCB1cCB5b3VyIHtDb25maWd1cmF0aW9ufSB3aXRoIGEge01vbWVudG9Mb2dnZXJGYWN0b3J5fSBpbnN0YW5jZSB0aGF0XG4gKiBpcyBjb25maWd1cmVkIHRvIGxvZyBhdCBERUJVRyBsZXZlbCBvciBsb3dlci4gIFNlZSBgYWR2YW5jZWQudHNgIGluIHRoZVxuICogZXhhbXBsZXMgZGlyZWN0b3J5IGZvciBhbiBleGFtcGxlIG9mIGhvdyB0byBzZXQgdXAgeW91ciB7Q29uZmlndXJhdGlvbn0gdG9cbiAqIGVuYWJsZSB0aGlzIG1pZGRsZXdhcmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBlcmltZW50YWxSZXF1ZXN0TG9nZ2luZ01pZGRsZXdhcmUgaW1wbGVtZW50cyBNaWRkbGV3YXJlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG4gIHByaXZhdGUgbmV4dFJlcXVlc3RJZDogbnVtYmVyO1xuICBjb25zdHJ1Y3Rvcihsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSkge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIodGhpcyk7XG4gICAgdGhpcy5uZXh0UmVxdWVzdElkID0gMDtcbiAgfVxuXG4gIG9uTmV3UmVxdWVzdCgpOiBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIge1xuICAgIHRoaXMubmV4dFJlcXVlc3RJZCsrO1xuICAgIHJldHVybiBuZXcgRXhwZXJpbWVudGFsTG9nZ2luZ01pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlcihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgdGhpcy5uZXh0UmVxdWVzdElkLnRvU3RyaW5nKClcbiAgICApO1xuICB9XG59XG4iXX0=