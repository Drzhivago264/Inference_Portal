import { CacheDataClient } from './internal/cache-data-client';
import { CreateSigningKey, ListSigningKeys, RevokeSigningKey, CacheFlush } from '.';
import { CacheClientProps, EagerCacheClientProps } from './cache-client-props';
import { ICacheClient } from '@gomomento/sdk-core/dist/src/clients/ICacheClient';
import { AbstractCacheClient } from '@gomomento/sdk-core/dist/src/internal/clients/cache/AbstractCacheClient';
/**
 * Momento Cache Client.
 *
 * Features include:
 * - Get, set, and delete data
 * - Create, delete, and list caches
 * - Create, revoke, and list signing keys
 */
export declare class CacheClient extends AbstractCacheClient implements ICacheClient {
    private readonly logger;
    private readonly notYetAbstractedControlClient;
    private readonly configuration;
    /**
     * Creates an instance of CacheClient.
     * @param {CacheClientProps} props configuration and credentials for creating a CacheClient.
     */
    constructor(props: CacheClientProps);
    close(): void;
    /**
     * Creates a new instance of CacheClient. If eagerConnectTimeout is present in the given props, the client will
     * eagerly create its connection to Momento. It will wait until the connection is established, or until the timout
     * runs out. It the timeout runs out, the client will be valid to use, but it may still be connecting in the background.
     * @param {EagerCacheClientProps} props configuration and credentials for creating a CacheClient.
     */
    static create(props: EagerCacheClientProps): Promise<CacheClient>;
    /**
     * Flushes / clears all the items of the given cache
     *
     * @param {string} cacheName - The cache to be flushed.
     * @returns {Promise<CacheFlush.Response>} -
     * {@link CacheFlush.Success} on success.
     * {@link CacheFlush.Error} on failure.
     */
    flushCache(cacheName: string): Promise<CacheFlush.Response>;
    /**
     * Creates a Momento signing key.
     *
     * @param {number} ttlMinutes - The time to live in minutes until the Momento
     * signing key expires.
     * @returns {Promise<CreateSigningKey.Response>} -
     * {@link CreateSigningKey.Success} containing the key, key ID, endpoint, and
     * expiration date on success.
     * {@link CreateSigningKey.Error} on failure.
     */
    createSigningKey(ttlMinutes: number): Promise<CreateSigningKey.Response>;
    /**
     * Revokes a Momento signing key.
     *
     * @remarks
     * All tokens signed by this key will be invalid.
     *
     * @param {string} keyId - The ID of the key to revoke.
     * @returns {Promise<RevokeSigningKey.Response>} -
     * {@link RevokeSigningKey.Success} on success.
     * {@link RevokeSigningKey.Error} on failure.
     */
    revokeSigningKey(keyId: string): Promise<RevokeSigningKey.Response>;
    /**
     * Lists all Momento signing keys for the provided auth token.
     *
     * @returns {Promise<ListSigningKeys.Response>} -
     * {@link ListSigningKeys.Success} containing the keys on success.
     * {@link ListSigningKeys.Error} on failure.
     */
    listSigningKeys(): Promise<ListSigningKeys.Response>;
    protected getNextDataClient(): CacheDataClient;
}
/**
 * @deprecated use {CacheClient} instead
 */
export declare class SimpleCacheClient extends CacheClient {
}
