"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Laptop = void 0;
const leaderboard_configuration_1 = require("./leaderboard-configuration");
const transport_1 = require("./transport");
const default_momento_logger_1 = require("./logging/default-momento-logger");
// 4 minutes.  We want to remain comfortably underneath the idle timeout for AWS NLB, which is 350s.
const defaultMaxIdleMillis = 4 * 60 * 1000;
const defaultMaxSessionMemoryMb = 256;
const defaultLoggerFactory = new default_momento_logger_1.DefaultMomentoLoggerFactory();
const defaultMiddlewares = [];
/**
 * Laptop config provides defaults suitable for a medium-to-high-latency dev environment.
 * @export
 * @class Laptop
 */
class Laptop extends leaderboard_configuration_1.LeaderboardClientConfiguration {
    /**
     * Provides the latest recommended configuration for a laptop development environment.  NOTE: this configuration may
     * change in future releases to take advantage of improvements we identify for default configurations.
     * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]
     * @returns {LeaderboardConfiguration}
     */
    static latest(loggerFactory = defaultLoggerFactory) {
        return Laptop.v1(loggerFactory);
    }
    /**
     * Provides v1 recommended configuration for a laptop development environment.  This configuration is guaranteed not
     * to change in future releases of the Momento web SDK.
     * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]
     * @returns {LeaderboardConfiguration}
     */
    static v1(loggerFactory = defaultLoggerFactory) {
        const deadlineMillis = 15000;
        const grpcConfig = new transport_1.StaticGrpcConfiguration({
            deadlineMillis: deadlineMillis,
            maxSessionMemoryMb: defaultMaxSessionMemoryMb,
            keepAlivePermitWithoutCalls: 1,
            keepAliveTimeMs: 5000,
            keepAliveTimeoutMs: 1000,
        });
        const transportStrategy = new transport_1.StaticTransportStrategy({
            grpcConfiguration: grpcConfig,
            maxIdleMillis: defaultMaxIdleMillis,
        });
        return new Laptop({
            loggerFactory: loggerFactory,
            transportStrategy: transportStrategy,
            throwOnErrors: false,
            middlewares: defaultMiddlewares,
        });
    }
}
exports.Laptop = Laptop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZGVyYm9hcmQtY29uZmlndXJhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29uZmlnL2xlYWRlcmJvYXJkLWNvbmZpZ3VyYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJFQUdxQztBQUdyQywyQ0FLcUI7QUFDckIsNkVBQTZFO0FBRzdFLG9HQUFvRztBQUNwRyxNQUFNLG9CQUFvQixHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSyxDQUFDO0FBQzVDLE1BQU0seUJBQXlCLEdBQUcsR0FBRyxDQUFDO0FBQ3RDLE1BQU0sb0JBQW9CLEdBQ3hCLElBQUksb0RBQTJCLEVBQUUsQ0FBQztBQUNwQyxNQUFNLGtCQUFrQixHQUFpQixFQUFFLENBQUM7QUFFNUM7Ozs7R0FJRztBQUNILE1BQWEsTUFBTyxTQUFRLDBEQUE4QjtJQUN4RDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQ1gsZ0JBQXNDLG9CQUFvQjtRQUUxRCxPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FDUCxnQkFBc0Msb0JBQW9CO1FBRTFELE1BQU0sY0FBYyxHQUFHLEtBQUssQ0FBQztRQUM3QixNQUFNLFVBQVUsR0FBc0IsSUFBSSxtQ0FBdUIsQ0FBQztZQUNoRSxjQUFjLEVBQUUsY0FBYztZQUM5QixrQkFBa0IsRUFBRSx5QkFBeUI7WUFDN0MsMkJBQTJCLEVBQUUsQ0FBQztZQUM5QixlQUFlLEVBQUUsSUFBSTtZQUNyQixrQkFBa0IsRUFBRSxJQUFJO1NBQ3pCLENBQUMsQ0FBQztRQUNILE1BQU0saUJBQWlCLEdBQXNCLElBQUksbUNBQXVCLENBQUM7WUFDdkUsaUJBQWlCLEVBQUUsVUFBVTtZQUM3QixhQUFhLEVBQUUsb0JBQW9CO1NBQ3BDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxNQUFNLENBQUM7WUFDaEIsYUFBYSxFQUFFLGFBQWE7WUFDNUIsaUJBQWlCLEVBQUUsaUJBQWlCO1lBQ3BDLGFBQWEsRUFBRSxLQUFLO1lBQ3BCLFdBQVcsRUFBRSxrQkFBa0I7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBekNELHdCQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIExlYWRlcmJvYXJkQ2xpZW50Q29uZmlndXJhdGlvbixcbiAgTGVhZGVyYm9hcmRDb25maWd1cmF0aW9uLFxufSBmcm9tICcuL2xlYWRlcmJvYXJkLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHtNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZSc7XG5cbmltcG9ydCB7XG4gIEdycGNDb25maWd1cmF0aW9uLFxuICBTdGF0aWNHcnBjQ29uZmlndXJhdGlvbixcbiAgU3RhdGljVHJhbnNwb3J0U3RyYXRlZ3ksXG4gIFRyYW5zcG9ydFN0cmF0ZWd5LFxufSBmcm9tICcuL3RyYW5zcG9ydCc7XG5pbXBvcnQge0RlZmF1bHRNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnLi9sb2dnaW5nL2RlZmF1bHQtbW9tZW50by1sb2dnZXInO1xuaW1wb3J0IHtNaWRkbGV3YXJlfSBmcm9tICcuL21pZGRsZXdhcmUvbWlkZGxld2FyZSc7XG5cbi8vIDQgbWludXRlcy4gIFdlIHdhbnQgdG8gcmVtYWluIGNvbWZvcnRhYmx5IHVuZGVybmVhdGggdGhlIGlkbGUgdGltZW91dCBmb3IgQVdTIE5MQiwgd2hpY2ggaXMgMzUwcy5cbmNvbnN0IGRlZmF1bHRNYXhJZGxlTWlsbGlzID0gNCAqIDYwICogMV8wMDA7XG5jb25zdCBkZWZhdWx0TWF4U2Vzc2lvbk1lbW9yeU1iID0gMjU2O1xuY29uc3QgZGVmYXVsdExvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5ID1cbiAgbmV3IERlZmF1bHRNb21lbnRvTG9nZ2VyRmFjdG9yeSgpO1xuY29uc3QgZGVmYXVsdE1pZGRsZXdhcmVzOiBNaWRkbGV3YXJlW10gPSBbXTtcblxuLyoqXG4gKiBMYXB0b3AgY29uZmlnIHByb3ZpZGVzIGRlZmF1bHRzIHN1aXRhYmxlIGZvciBhIG1lZGl1bS10by1oaWdoLWxhdGVuY3kgZGV2IGVudmlyb25tZW50LlxuICogQGV4cG9ydFxuICogQGNsYXNzIExhcHRvcFxuICovXG5leHBvcnQgY2xhc3MgTGFwdG9wIGV4dGVuZHMgTGVhZGVyYm9hcmRDbGllbnRDb25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIHRoZSBsYXRlc3QgcmVjb21tZW5kZWQgY29uZmlndXJhdGlvbiBmb3IgYSBsYXB0b3AgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQuICBOT1RFOiB0aGlzIGNvbmZpZ3VyYXRpb24gbWF5XG4gICAqIGNoYW5nZSBpbiBmdXR1cmUgcmVsZWFzZXMgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgaW1wcm92ZW1lbnRzIHdlIGlkZW50aWZ5IGZvciBkZWZhdWx0IGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge01vbWVudG9Mb2dnZXJGYWN0b3J5fSBbbG9nZ2VyRmFjdG9yeT1kZWZhdWx0TG9nZ2VyRmFjdG9yeV1cbiAgICogQHJldHVybnMge0xlYWRlcmJvYXJkQ29uZmlndXJhdGlvbn1cbiAgICovXG4gIHN0YXRpYyBsYXRlc3QoXG4gICAgbG9nZ2VyRmFjdG9yeTogTW9tZW50b0xvZ2dlckZhY3RvcnkgPSBkZWZhdWx0TG9nZ2VyRmFjdG9yeVxuICApOiBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBMYXB0b3AudjEobG9nZ2VyRmFjdG9yeSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgdjEgcmVjb21tZW5kZWQgY29uZmlndXJhdGlvbiBmb3IgYSBsYXB0b3AgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQuICBUaGlzIGNvbmZpZ3VyYXRpb24gaXMgZ3VhcmFudGVlZCBub3RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSByZWxlYXNlcyBvZiB0aGUgTW9tZW50byB3ZWIgU0RLLlxuICAgKiBAcGFyYW0ge01vbWVudG9Mb2dnZXJGYWN0b3J5fSBbbG9nZ2VyRmFjdG9yeT1kZWZhdWx0TG9nZ2VyRmFjdG9yeV1cbiAgICogQHJldHVybnMge0xlYWRlcmJvYXJkQ29uZmlndXJhdGlvbn1cbiAgICovXG4gIHN0YXRpYyB2MShcbiAgICBsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSA9IGRlZmF1bHRMb2dnZXJGYWN0b3J5XG4gICk6IExlYWRlcmJvYXJkQ29uZmlndXJhdGlvbiB7XG4gICAgY29uc3QgZGVhZGxpbmVNaWxsaXMgPSAxNTAwMDtcbiAgICBjb25zdCBncnBjQ29uZmlnOiBHcnBjQ29uZmlndXJhdGlvbiA9IG5ldyBTdGF0aWNHcnBjQ29uZmlndXJhdGlvbih7XG4gICAgICBkZWFkbGluZU1pbGxpczogZGVhZGxpbmVNaWxsaXMsXG4gICAgICBtYXhTZXNzaW9uTWVtb3J5TWI6IGRlZmF1bHRNYXhTZXNzaW9uTWVtb3J5TWIsXG4gICAgICBrZWVwQWxpdmVQZXJtaXRXaXRob3V0Q2FsbHM6IDEsXG4gICAgICBrZWVwQWxpdmVUaW1lTXM6IDUwMDAsXG4gICAgICBrZWVwQWxpdmVUaW1lb3V0TXM6IDEwMDAsXG4gICAgfSk7XG4gICAgY29uc3QgdHJhbnNwb3J0U3RyYXRlZ3k6IFRyYW5zcG9ydFN0cmF0ZWd5ID0gbmV3IFN0YXRpY1RyYW5zcG9ydFN0cmF0ZWd5KHtcbiAgICAgIGdycGNDb25maWd1cmF0aW9uOiBncnBjQ29uZmlnLFxuICAgICAgbWF4SWRsZU1pbGxpczogZGVmYXVsdE1heElkbGVNaWxsaXMsXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBMYXB0b3Aoe1xuICAgICAgbG9nZ2VyRmFjdG9yeTogbG9nZ2VyRmFjdG9yeSxcbiAgICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiB0cmFuc3BvcnRTdHJhdGVneSxcbiAgICAgIHRocm93T25FcnJvcnM6IGZhbHNlLFxuICAgICAgbWlkZGxld2FyZXM6IGRlZmF1bHRNaWRkbGV3YXJlcyxcbiAgICB9KTtcbiAgfVxufVxuIl19