"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorIndexControlClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const __1 = require("..");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const errors_1 = require("@gomomento/sdk-core/dist/src/errors");
const sdk_core_1 = require("@gomomento/sdk-core");
const clients_1 = require("@gomomento/sdk-core/dist/src/internal/clients");
var grpcControl = generated_types_1.control.control_client;
class VectorIndexControlClient {
    /**
     * @param {ControlClientProps} props
     */
    constructor(props) {
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        const headers = [
            new headers_interceptor_1.Header('Authorization', props.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        this.interceptors = [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(VectorIndexControlClient.REQUEST_TIMEOUT_MS),
        ];
        this.logger.debug(`Creating control client using endpoint: '${props.credentialProvider.getControlEndpoint()}`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcControl.ScsControlClient(props.credentialProvider.getControlEndpoint(), grpc_js_1.ChannelCredentials.createSsl()),
            loggerFactory: props.configuration.getLoggerFactory(),
            maxIdleMillis: props.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
        });
    }
    async createIndex(indexName, numDimensions, similarityMetric) {
        try {
            (0, utils_1.validateIndexName)(indexName);
            (0, utils_1.validateNumDimensions)(numDimensions);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.CreateVectorIndex.Error(err));
        }
        this.logger.debug("Issuing 'createIndex' request");
        const request = new grpcControl._CreateIndexRequest();
        request.index_name = indexName;
        request.num_dimensions = numDimensions;
        similarityMetric !== null && similarityMetric !== void 0 ? similarityMetric : (similarityMetric = clients_1.VectorSimilarityMetric.COSINE_SIMILARITY);
        const similarityMetricPb = new grpcControl._SimilarityMetric();
        switch (similarityMetric) {
            case clients_1.VectorSimilarityMetric.INNER_PRODUCT:
                similarityMetricPb.inner_product =
                    new grpcControl._SimilarityMetric._InnerProduct();
                break;
            case clients_1.VectorSimilarityMetric.EUCLIDEAN_SIMILARITY:
                similarityMetricPb.euclidean_similarity =
                    new grpcControl._SimilarityMetric._EuclideanSimilarity();
                break;
            case clients_1.VectorSimilarityMetric.COSINE_SIMILARITY:
                similarityMetricPb.cosine_similarity =
                    new grpcControl._SimilarityMetric._CosineSimilarity();
                break;
            default:
                this.cacheServiceErrorMapper.returnOrThrowError(new __1.InvalidArgumentError(`Invalid similarity metric: ${similarityMetric}`), err => new sdk_core_1.CreateVectorIndex.Error(err));
        }
        request.similarity_metric = similarityMetricPb;
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().CreateIndex(request, { interceptors: this.interceptors }, 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            (err, resp) => {
                if (err) {
                    if (err.code === constants_1.Status.ALREADY_EXISTS) {
                        resolve(new sdk_core_1.CreateVectorIndex.AlreadyExists());
                    }
                    else {
                        this.cacheServiceErrorMapper.resolveOrRejectError({
                            err: err,
                            errorResponseFactoryFn: e => new sdk_core_1.CreateVectorIndex.Error(e),
                            resolveFn: resolve,
                            rejectFn: reject,
                        });
                    }
                }
                else {
                    resolve(new sdk_core_1.CreateVectorIndex.Success());
                }
            });
        });
    }
    async listIndexes() {
        const request = new grpcControl._ListIndexesRequest();
        this.logger.debug("Issuing 'listIndexes' request");
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .ListIndexes(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    // TODO: `Argument of type 'unknown' is not assignable to parameter of type 'Error'.`
                    //  I don't see how this is different from the other methods here. So, yeah, what?
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.ListVectorIndexes.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    const indexes = resp.indexes.map(index => {
                        let similarityMetric = clients_1.VectorSimilarityMetric.COSINE_SIMILARITY;
                        switch (index.similarity_metric.similarity_metric) {
                            case 'inner_product':
                                similarityMetric = clients_1.VectorSimilarityMetric.INNER_PRODUCT;
                                break;
                            case 'euclidean_similarity':
                                similarityMetric =
                                    clients_1.VectorSimilarityMetric.EUCLIDEAN_SIMILARITY;
                                break;
                            case 'cosine_similarity':
                                similarityMetric = clients_1.VectorSimilarityMetric.COSINE_SIMILARITY;
                                break;
                            default:
                                resolve(new sdk_core_1.ListVectorIndexes.Error(new errors_1.UnknownError(`Unknown similarity metric: ${index.similarity_metric.similarity_metric}`)));
                                break;
                        }
                        return new __1.VectorIndexInfo(index.index_name, index.num_dimensions, similarityMetric);
                    });
                    resolve(new sdk_core_1.ListVectorIndexes.Success(indexes));
                }
            });
        });
    }
    async deleteIndex(name) {
        try {
            (0, utils_1.validateIndexName)(name);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.DeleteVectorIndex.Error(err));
        }
        const request = new grpcControl._DeleteIndexRequest({
            index_name: name,
        });
        this.logger.info(`Deleting index: ${name}`);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DeleteIndex(request, { interceptors: this.interceptors }, 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            (err, resp) => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.DeleteVectorIndex.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new sdk_core_1.DeleteVectorIndex.Success());
                }
            });
        });
    }
}
exports.VectorIndexControlClient = VectorIndexControlClient;
VectorIndexControlClient.REQUEST_TIMEOUT_MS = 60 * 1000;
//# sourceMappingURL=data:application/json;base64,