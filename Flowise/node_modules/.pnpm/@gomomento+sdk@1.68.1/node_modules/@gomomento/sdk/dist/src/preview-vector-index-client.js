"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewVectorIndexClient = void 0;
const clients_1 = require("@gomomento/sdk-core/dist/src/internal/clients");
const vector_index_data_client_1 = require("./internal/vector-index-data-client");
const vector_index_control_client_1 = require("./internal/vector-index-control-client");
const index_1 = require("./index");
/**
 * PREVIEW Vector Index Client
 * WARNING: the API for this client is not yet stable and may change without notice.
 *
 * Vector and control methods return a response object unique to each request.
 * The response object is resolved to a type-safe object of one of several
 * sub-types. See the documentation for each response type for details.
 */
class PreviewVectorIndexClient extends clients_1.AbstractVectorIndexClient {
    constructor(props) {
        var _a;
        const configuration = (_a = props.configuration) !== null && _a !== void 0 ? _a : getDefaultVectorIndexConfiguration();
        const propsWithConfiguration = {
            ...props,
            configuration,
        };
        const controlClient = createControlClient(propsWithConfiguration);
        const dataClient = createDataClient(propsWithConfiguration);
        super(controlClient, dataClient);
    }
}
exports.PreviewVectorIndexClient = PreviewVectorIndexClient;
function createControlClient(props) {
    return new vector_index_control_client_1.VectorIndexControlClient({
        configuration: props.configuration,
        credentialProvider: props.credentialProvider,
    });
}
function createDataClient(props) {
    return new vector_index_data_client_1.VectorIndexDataClient(props);
}
function getDefaultVectorIndexConfiguration() {
    return index_1.VectorIndexConfigurations.Laptop.latest();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy12ZWN0b3ItaW5kZXgtY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXZpZXctdmVjdG9yLWluZGV4LWNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyRUFJdUQ7QUFDdkQsa0ZBQTBFO0FBQzFFLHdGQUFnRjtBQUtoRixtQ0FBa0Q7QUFFbEQ7Ozs7Ozs7R0FPRztBQUNILE1BQWEsd0JBQ1gsU0FBUSxtQ0FBeUI7SUFHakMsWUFBWSxLQUE2Qjs7UUFDdkMsTUFBTSxhQUFhLEdBQ2pCLE1BQUEsS0FBSyxDQUFDLGFBQWEsbUNBQUksa0NBQWtDLEVBQUUsQ0FBQztRQUM5RCxNQUFNLHNCQUFzQixHQUFxQztZQUMvRCxHQUFHLEtBQUs7WUFDUixhQUFhO1NBQ2QsQ0FBQztRQUVGLE1BQU0sYUFBYSxHQUE4QixtQkFBbUIsQ0FDbEUsc0JBQXNCLENBQ3ZCLENBQUM7UUFDRixNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzVELEtBQUssQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbkMsQ0FBQztDQUNGO0FBbEJELDREQWtCQztBQUVELFNBQVMsbUJBQW1CLENBQzFCLEtBQXVDO0lBRXZDLE9BQU8sSUFBSSxzREFBd0IsQ0FBQztRQUNsQyxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7UUFDbEMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtLQUM3QyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FDdkIsS0FBdUM7SUFFdkMsT0FBTyxJQUFJLGdEQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxTQUFTLGtDQUFrQztJQUN6QyxPQUFPLGlDQUF5QixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWJzdHJhY3RWZWN0b3JJbmRleENsaWVudCxcbiAgSVZlY3RvckluZGV4Q2xpZW50LFxuICBJVmVjdG9ySW5kZXhDb250cm9sQ2xpZW50LFxufSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2ludGVybmFsL2NsaWVudHMnO1xuaW1wb3J0IHtWZWN0b3JJbmRleERhdGFDbGllbnR9IGZyb20gJy4vaW50ZXJuYWwvdmVjdG9yLWluZGV4LWRhdGEtY2xpZW50JztcbmltcG9ydCB7VmVjdG9ySW5kZXhDb250cm9sQ2xpZW50fSBmcm9tICcuL2ludGVybmFsL3ZlY3Rvci1pbmRleC1jb250cm9sLWNsaWVudCc7XG5pbXBvcnQge0lWZWN0b3JJbmRleERhdGFDbGllbnR9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvaW50ZXJuYWwvY2xpZW50cy92ZWN0b3IvSVZlY3RvckluZGV4RGF0YUNsaWVudCc7XG5pbXBvcnQge1ZlY3RvckluZGV4Q2xpZW50UHJvcHNXaXRoQ29uZmlnfSBmcm9tICcuL2ludGVybmFsL3ZlY3Rvci1pbmRleC1jbGllbnQtcHJvcHMtd2l0aC1jb25maWcnO1xuaW1wb3J0IHtWZWN0b3JJbmRleENsaWVudFByb3BzfSBmcm9tICcuL3ZlY3Rvci1pbmRleC1jbGllbnQtcHJvcHMnO1xuaW1wb3J0IHtWZWN0b3JJbmRleENvbmZpZ3VyYXRpb259IGZyb20gJy4vY29uZmlnL3ZlY3Rvci1pbmRleC1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7VmVjdG9ySW5kZXhDb25maWd1cmF0aW9uc30gZnJvbSAnLi9pbmRleCc7XG5cbi8qKlxuICogUFJFVklFVyBWZWN0b3IgSW5kZXggQ2xpZW50XG4gKiBXQVJOSU5HOiB0aGUgQVBJIGZvciB0aGlzIGNsaWVudCBpcyBub3QgeWV0IHN0YWJsZSBhbmQgbWF5IGNoYW5nZSB3aXRob3V0IG5vdGljZS5cbiAqXG4gKiBWZWN0b3IgYW5kIGNvbnRyb2wgbWV0aG9kcyByZXR1cm4gYSByZXNwb25zZSBvYmplY3QgdW5pcXVlIHRvIGVhY2ggcmVxdWVzdC5cbiAqIFRoZSByZXNwb25zZSBvYmplY3QgaXMgcmVzb2x2ZWQgdG8gYSB0eXBlLXNhZmUgb2JqZWN0IG9mIG9uZSBvZiBzZXZlcmFsXG4gKiBzdWItdHlwZXMuIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgZWFjaCByZXNwb25zZSB0eXBlIGZvciBkZXRhaWxzLlxuICovXG5leHBvcnQgY2xhc3MgUHJldmlld1ZlY3RvckluZGV4Q2xpZW50XG4gIGV4dGVuZHMgQWJzdHJhY3RWZWN0b3JJbmRleENsaWVudFxuICBpbXBsZW1lbnRzIElWZWN0b3JJbmRleENsaWVudFxue1xuICBjb25zdHJ1Y3Rvcihwcm9wczogVmVjdG9ySW5kZXhDbGllbnRQcm9wcykge1xuICAgIGNvbnN0IGNvbmZpZ3VyYXRpb246IFZlY3RvckluZGV4Q29uZmlndXJhdGlvbiA9XG4gICAgICBwcm9wcy5jb25maWd1cmF0aW9uID8/IGdldERlZmF1bHRWZWN0b3JJbmRleENvbmZpZ3VyYXRpb24oKTtcbiAgICBjb25zdCBwcm9wc1dpdGhDb25maWd1cmF0aW9uOiBWZWN0b3JJbmRleENsaWVudFByb3BzV2l0aENvbmZpZyA9IHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgY29uZmlndXJhdGlvbixcbiAgICB9O1xuXG4gICAgY29uc3QgY29udHJvbENsaWVudDogSVZlY3RvckluZGV4Q29udHJvbENsaWVudCA9IGNyZWF0ZUNvbnRyb2xDbGllbnQoXG4gICAgICBwcm9wc1dpdGhDb25maWd1cmF0aW9uXG4gICAgKTtcbiAgICBjb25zdCBkYXRhQ2xpZW50ID0gY3JlYXRlRGF0YUNsaWVudChwcm9wc1dpdGhDb25maWd1cmF0aW9uKTtcbiAgICBzdXBlcihjb250cm9sQ2xpZW50LCBkYXRhQ2xpZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250cm9sQ2xpZW50KFxuICBwcm9wczogVmVjdG9ySW5kZXhDbGllbnRQcm9wc1dpdGhDb25maWdcbik6IElWZWN0b3JJbmRleENvbnRyb2xDbGllbnQge1xuICByZXR1cm4gbmV3IFZlY3RvckluZGV4Q29udHJvbENsaWVudCh7XG4gICAgY29uZmlndXJhdGlvbjogcHJvcHMuY29uZmlndXJhdGlvbixcbiAgICBjcmVkZW50aWFsUHJvdmlkZXI6IHByb3BzLmNyZWRlbnRpYWxQcm92aWRlcixcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDbGllbnQoXG4gIHByb3BzOiBWZWN0b3JJbmRleENsaWVudFByb3BzV2l0aENvbmZpZ1xuKTogSVZlY3RvckluZGV4RGF0YUNsaWVudCB7XG4gIHJldHVybiBuZXcgVmVjdG9ySW5kZXhEYXRhQ2xpZW50KHByb3BzKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZlY3RvckluZGV4Q29uZmlndXJhdGlvbigpOiBWZWN0b3JJbmRleENvbmZpZ3VyYXRpb24ge1xuICByZXR1cm4gVmVjdG9ySW5kZXhDb25maWd1cmF0aW9ucy5MYXB0b3AubGF0ZXN0KCk7XG59XG4iXX0=