"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalMetricsLoggingMiddleware = void 0;
const experimental_metrics_middleware_1 = require("./impl/experimental-metrics-middleware");
const perf_hooks_1 = require("perf_hooks");
class ExperimentalMetricsLoggingMiddlewareRequestHandler extends experimental_metrics_middleware_1.ExperimentalMetricsMiddlewareRequestHandler {
    constructor(parent, logger, context) {
        super(parent, logger, context);
    }
    emitMetrics(metrics) {
        this.logger.info(JSON.stringify(metrics));
        return Promise.resolve();
    }
}
/**
 * This middleware enables per-request client-side metrics.  Metrics for each
 * request will be written to logs; the log data can be analyzed or shared
 * with Momento to diagnose performance issues.
 *
 * The metrics format is currently considered experimental; in a future release,
 * once the format is considered stable, this class will be renamed to remove
 * the Experimental prefix.
 *
 * It also enables regular logging of congestion in the node event loop. Once
 * per second it will output the event loop utilization ratio, as well as stats
 * about the event loop delay, measured in 20ms increments.
 *
 * WARNING: enabling this middleware may have minor performance implications,
 * so enable with caution.
 *
 * WARNING: depending on your request volume, this middleware will produce a high
 * volume of log output. If you are writing logs directly to local disk, be aware
 * of disk usage and make sure you have log rotation / compression enabled via a
 * tool such as `logrotate`.
 *
 * See `advanced.ts` in the examples directory for an example of how to set up
 * your {Configuration} to enable this middleware.
 */
class ExperimentalMetricsLoggingMiddleware extends experimental_metrics_middleware_1.ExperimentalMetricsMiddleware {
    constructor(loggerFactory) {
        super(loggerFactory, (p, l, c) => new ExperimentalMetricsLoggingMiddlewareRequestHandler(p, l, c));
        if (!ExperimentalMetricsLoggingMiddleware.isLoggingStarted) {
            ExperimentalMetricsLoggingMiddleware.isLoggingStarted = true;
            ExperimentalMetricsLoggingMiddleware.startLogging(this.logger);
        }
    }
    static startLogging(logger) {
        this.eldMonitor = (0, perf_hooks_1.monitorEventLoopDelay)({
            resolution: this.eventLoopDelayInterval,
        });
        this.eldMonitor.enable();
        this.elu = perf_hooks_1.performance.eventLoopUtilization();
        this.intervalId = setInterval(() => {
            this.elu = perf_hooks_1.performance.eventLoopUtilization(this.elu);
            const metrics = {
                eventLoopUtilization: this.elu.utilization,
                eventLoopDelayMean: this.eldMonitor.mean,
                eventLoopDelayMin: this.eldMonitor.min,
                eventLoopDelayP50: this.eldMonitor.percentile(50),
                eventLoopDelayP75: this.eldMonitor.percentile(75),
                eventLoopDelayP90: this.eldMonitor.percentile(90),
                eventLoopDelayP95: this.eldMonitor.percentile(95),
                eventLoopDelayP99: this.eldMonitor.percentile(99),
                eventLoopDelayMax: this.eldMonitor.max,
            };
            logger.info(JSON.stringify(metrics));
            this.eldMonitor.reset();
        }, this.metricsLogInterval);
    }
    close() {
        if (ExperimentalMetricsLoggingMiddleware.intervalId) {
            this.logger.debug('Stopping Metrics logging.');
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            clearInterval(ExperimentalMetricsLoggingMiddleware.intervalId);
            ExperimentalMetricsLoggingMiddleware.intervalId = null;
            ExperimentalMetricsLoggingMiddleware.isLoggingStarted = false;
            this.logger.debug('Metrics logging stopped.');
        }
    }
}
exports.ExperimentalMetricsLoggingMiddleware = ExperimentalMetricsLoggingMiddleware;
ExperimentalMetricsLoggingMiddleware.metricsLogInterval = 1000;
ExperimentalMetricsLoggingMiddleware.eventLoopDelayInterval = 20;
ExperimentalMetricsLoggingMiddleware.isLoggingStarted = false;
ExperimentalMetricsLoggingMiddleware.numActiveRequests = 0;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
ExperimentalMetricsLoggingMiddleware.intervalId = null; // Store the interval ID
//# sourceMappingURL=data:application/json;base64,