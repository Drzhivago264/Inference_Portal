"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcWebhook = generated_types_1.webhook.webhook;
const sdk_core_1 = require("@gomomento/sdk-core");
const grpc_js_1 = require("@grpc/grpc-js");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const package_json_1 = require("../../package.json");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
class WebhookClient {
    /**
     * @param {TopicClientProps} props
     */
    constructor(props) {
        this.credentialProvider = props.credentialProvider;
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        const headers = [
            new headers_interceptor_1.Header('Authorization', props.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        this.unaryInterceptors = [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(WebhookClient.DEFAULT_REQUEST_TIMEOUT_MS),
        ];
        this.webhookClient = new generated_types_1.webhook.webhook.WebhookClient(props.credentialProvider.getControlEndpoint(), grpc_js_1.ChannelCredentials.createSsl());
    }
    async deleteWebhook(id) {
        try {
            (0, utils_1.validateCacheName)(id.cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.DeleteWebhook.Error(err));
        }
        const request = new grpcWebhook._DeleteWebhookRequest({
            webhook_id: new grpcWebhook._WebhookId({
                cache_name: id.cacheName,
                webhook_name: id.webhookName,
            }),
        });
        this.logger.debug('issuing "DeleteWebhook" request');
        return await new Promise((resolve, reject) => {
            this.webhookClient.DeleteWebhook(request, { interceptors: this.unaryInterceptors }, (err, _resp) => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.DeleteWebhook.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new sdk_core_1.DeleteWebhook.Success());
                }
            });
        });
    }
    async listWebhooks(cache) {
        try {
            (0, utils_1.validateCacheName)(cache);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.ListWebhooks.Error(err));
        }
        const request = new grpcWebhook._ListWebhookRequest({ cache_name: cache });
        this.logger.debug('issuing "ListWebhooks" request');
        return await new Promise((resolve, reject) => {
            this.webhookClient.ListWebhooks(request, { interceptors: this.unaryInterceptors }, (err, resp) => {
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.ListWebhooks.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    const webhooks = resp.webhook.map(wh => {
                        const webhook = {
                            id: {
                                cacheName: wh.webhook_id.cache_name,
                                webhookName: wh.webhook_id.webhook_name,
                            },
                            topicName: wh.topic_name,
                            destination: new sdk_core_1.PostUrlWebhookDestination(wh.destination.post_url),
                        };
                        return webhook;
                    });
                    resolve(new sdk_core_1.ListWebhooks.Success(webhooks));
                }
            });
        });
    }
    async putWebhook(webhook) {
        try {
            (0, utils_1.validateCacheName)(webhook.id.cacheName);
            (0, utils_1.validateTopicName)(webhook.topicName);
            (0, utils_1.validateWebhookName)(webhook.id.webhookName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.PutWebhook.Error(err));
        }
        const request = new grpcWebhook._PutWebhookRequest({
            webhook: new grpcWebhook._Webhook({
                webhook_id: new grpcWebhook._WebhookId({
                    cache_name: webhook.id.cacheName,
                    webhook_name: webhook.id.webhookName,
                }),
                destination: new grpcWebhook._WebhookDestination({
                    post_url: webhook.destination.url(),
                }),
                topic_name: webhook.topicName,
            }),
        });
        this.logger.debug('issuing "PutWebhook" request');
        return await new Promise((resolve, reject) => {
            this.webhookClient.PutWebhook(request, { interceptors: this.unaryInterceptors }, (err, resp) => {
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.PutWebhook.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new sdk_core_1.PutWebhook.Success(resp.secret_string));
                }
            });
        });
    }
    async getWebhookSecret(id) {
        try {
            (0, utils_1.validateCacheName)(id.cacheName);
            (0, utils_1.validateWebhookName)(id.webhookName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.GetWebhookSecret.Error(err));
        }
        const request = new grpcWebhook._GetWebhookSecretRequest({
            webhook_name: id.webhookName,
            cache_name: id.cacheName,
        });
        this.logger.debug('issuing "GetWebhookSecret" request');
        return await new Promise((resolve, reject) => {
            this.webhookClient.GetWebhookSecret(request, { interceptors: this.unaryInterceptors }, (err, resp) => {
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.GetWebhookSecret.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new sdk_core_1.GetWebhookSecret.Success({
                        secret: resp.secret_string,
                        webhookName: resp.webhook_name,
                        cacheName: resp.cache_name,
                    }));
                }
            });
        });
    }
    async rotateWebhookSecret(id) {
        try {
            (0, utils_1.validateCacheName)(id.cacheName);
            (0, utils_1.validateWebhookName)(id.webhookName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.RotateWebhookSecret.Error(err));
        }
        const webhookId = grpcWebhook._WebhookId.fromObject({
            webhook_name: id.webhookName,
            cache_name: id.cacheName,
        });
        const request = new grpcWebhook._RotateWebhookSecretRequest({
            webhook_id: webhookId,
        });
        this.logger.debug('issuing "RotateWebhookSecret" request');
        return await new Promise((resolve, reject) => {
            this.webhookClient.RotateWebhookSecret(request, { interceptors: this.unaryInterceptors }, (err, resp) => {
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.RotateWebhookSecret.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new sdk_core_1.RotateWebhookSecret.Success({
                        secret: resp.secret_string,
                        webhookName: id.webhookName,
                        cacheName: id.cacheName,
                    }));
                }
            });
        });
    }
}
exports.WebhookClient = WebhookClient;
WebhookClient.DEFAULT_REQUEST_TIMEOUT_MS = 5 * 1000;
//# sourceMappingURL=data:application/json;base64,