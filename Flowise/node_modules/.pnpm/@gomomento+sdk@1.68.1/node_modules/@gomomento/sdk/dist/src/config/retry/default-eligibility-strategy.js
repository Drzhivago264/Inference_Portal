"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultEligibilityStrategy = void 0;
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const retryableGrpcStatusCodes = [
    // including all the status codes for reference, but
    // commenting out the ones we don't want to retry on for now.
    // Status.OK,
    // Status.CANCELLED,
    // Status.UNKNOWN,
    // Status.INVALID_ARGUMENT,
    // Status.DEADLINE_EXCEEDED,
    // Status.NOT_FOUND,
    // Status.ALREADY_EXISTS,
    // Status.PERMISSION_DENIED,
    // Status.RESOURCE_EXHAUSTED,
    // Status.FAILED_PRECONDITION,
    // Status.ABORTED,
    // Status.OUT_OF_RANGE,
    // Status.UNIMPLEMENTED,
    constants_1.Status.INTERNAL,
    constants_1.Status.UNAVAILABLE,
    // Status.DATA_LOSS,
    // Status.UNAUTHENTICATED
];
const retryableRequestTypes = [
    '/cache_client.Scs/Set',
    '/cache_client.Scs/Get',
    '/cache_client.Scs/Delete',
    '/cache_client.Scs/DictionarySet',
    // not idempotent: '/cache_client.Scs/DictionaryIncrement',
    '/cache_client.Scs/DictionaryGet',
    '/cache_client.Scs/DictionaryFetch',
    '/cache_client.Scs/DictionaryDelete',
    '/cache_client.Scs/SetUnion',
    '/cache_client.Scs/SetDifference',
    '/cache_client.Scs/SetFetch',
    // not idempotent: '/cache_client.Scs/ListPushFront',
    // not idempotent: '/cache_client.Scs/ListPushBack',
    // not idempotent: '/cache_client.Scs/ListPopFront',
    // not idempotent: '/cache_client.Scs/ListPopBack',
    '/cache_client.Scs/ListFetch',
    /*
     *  Warning: in the future, this may not be idempotent
     *  Currently it supports removing all occurrences of a value.
     *  In the future, we may also add "the first/last N occurrences of a value".
     *  In the latter case it is not idempotent.
     */
    '/cache_client.Scs/ListRemove',
    '/cache_client.Scs/ListLength',
    // not idempotent: '/cache_client.Scs/ListConcatenateFront',
    // not idempotent: '/cache_client.Scs/ListConcatenateBack'
];
class DefaultEligibilityStrategy {
    constructor(loggerFactory) {
        this.logger = loggerFactory.getLogger(this);
    }
    isEligibleForRetry(props) {
        if (!retryableGrpcStatusCodes.includes(props.grpcStatus.code)) {
            this.logger.debug(`Response with status code ${props.grpcStatus.code} is not retryable.`);
            return false;
        }
        if (!retryableRequestTypes.includes(props.grpcRequest.path)) {
            this.logger.debug(`Request with type ${props.grpcRequest.path} is not retryable.`);
            return false;
        }
        return true;
    }
}
exports.DefaultEligibilityStrategy = DefaultEligibilityStrategy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1lbGlnaWJpbGl0eS1zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb25maWcvcmV0cnkvZGVmYXVsdC1lbGlnaWJpbGl0eS1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxpRUFBeUQ7QUFNekQsTUFBTSx3QkFBd0IsR0FBa0I7SUFDOUMsb0RBQW9EO0lBQ3BELDZEQUE2RDtJQUU3RCxhQUFhO0lBQ2Isb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQiwyQkFBMkI7SUFDM0IsNEJBQTRCO0lBQzVCLG9CQUFvQjtJQUNwQix5QkFBeUI7SUFDekIsNEJBQTRCO0lBQzVCLDZCQUE2QjtJQUM3Qiw4QkFBOEI7SUFDOUIsa0JBQWtCO0lBQ2xCLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsa0JBQU0sQ0FBQyxRQUFRO0lBQ2Ysa0JBQU0sQ0FBQyxXQUFXO0lBQ2xCLG9CQUFvQjtJQUNwQix5QkFBeUI7Q0FDMUIsQ0FBQztBQUVGLE1BQU0scUJBQXFCLEdBQWtCO0lBQzNDLHVCQUF1QjtJQUN2Qix1QkFBdUI7SUFDdkIsMEJBQTBCO0lBQzFCLGlDQUFpQztJQUNqQywyREFBMkQ7SUFDM0QsaUNBQWlDO0lBQ2pDLG1DQUFtQztJQUNuQyxvQ0FBb0M7SUFDcEMsNEJBQTRCO0lBQzVCLGlDQUFpQztJQUNqQyw0QkFBNEI7SUFDNUIscURBQXFEO0lBQ3JELG9EQUFvRDtJQUNwRCxvREFBb0Q7SUFDcEQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3Qjs7Ozs7T0FLRztJQUNILDhCQUE4QjtJQUM5Qiw4QkFBOEI7SUFDOUIsNERBQTREO0lBQzVELDBEQUEwRDtDQUMzRCxDQUFDO0FBRUYsTUFBYSwwQkFBMEI7SUFHckMsWUFBWSxhQUFtQztRQUM3QyxJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQTRCO1FBQzdDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3RCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZiw2QkFBNkIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLG9CQUFvQixDQUN2RSxDQUFDO1lBQ0YsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixxQkFBcUIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLG9CQUFvQixDQUNoRSxDQUFDO1lBQ0YsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBeEJELGdFQXdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9tZW50b0xvZ2dlciwgTW9tZW50b0xvZ2dlckZhY3Rvcnl9IGZyb20gJy4uLy4uLyc7XG5pbXBvcnQge1N0YXR1c30gZnJvbSAnQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIEVsaWdpYmlsaXR5U3RyYXRlZ3ksXG4gIEVsaWdpYmxlRm9yUmV0cnlQcm9wcyxcbn0gZnJvbSAnLi9lbGlnaWJpbGl0eS1zdHJhdGVneSc7XG5cbmNvbnN0IHJldHJ5YWJsZUdycGNTdGF0dXNDb2RlczogQXJyYXk8U3RhdHVzPiA9IFtcbiAgLy8gaW5jbHVkaW5nIGFsbCB0aGUgc3RhdHVzIGNvZGVzIGZvciByZWZlcmVuY2UsIGJ1dFxuICAvLyBjb21tZW50aW5nIG91dCB0aGUgb25lcyB3ZSBkb24ndCB3YW50IHRvIHJldHJ5IG9uIGZvciBub3cuXG5cbiAgLy8gU3RhdHVzLk9LLFxuICAvLyBTdGF0dXMuQ0FOQ0VMTEVELFxuICAvLyBTdGF0dXMuVU5LTk9XTixcbiAgLy8gU3RhdHVzLklOVkFMSURfQVJHVU1FTlQsXG4gIC8vIFN0YXR1cy5ERUFETElORV9FWENFRURFRCxcbiAgLy8gU3RhdHVzLk5PVF9GT1VORCxcbiAgLy8gU3RhdHVzLkFMUkVBRFlfRVhJU1RTLFxuICAvLyBTdGF0dXMuUEVSTUlTU0lPTl9ERU5JRUQsXG4gIC8vIFN0YXR1cy5SRVNPVVJDRV9FWEhBVVNURUQsXG4gIC8vIFN0YXR1cy5GQUlMRURfUFJFQ09ORElUSU9OLFxuICAvLyBTdGF0dXMuQUJPUlRFRCxcbiAgLy8gU3RhdHVzLk9VVF9PRl9SQU5HRSxcbiAgLy8gU3RhdHVzLlVOSU1QTEVNRU5URUQsXG4gIFN0YXR1cy5JTlRFUk5BTCxcbiAgU3RhdHVzLlVOQVZBSUxBQkxFLFxuICAvLyBTdGF0dXMuREFUQV9MT1NTLFxuICAvLyBTdGF0dXMuVU5BVVRIRU5USUNBVEVEXG5dO1xuXG5jb25zdCByZXRyeWFibGVSZXF1ZXN0VHlwZXM6IEFycmF5PHN0cmluZz4gPSBbXG4gICcvY2FjaGVfY2xpZW50LlNjcy9TZXQnLFxuICAnL2NhY2hlX2NsaWVudC5TY3MvR2V0JyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0RlbGV0ZScsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9EaWN0aW9uYXJ5U2V0JyxcbiAgLy8gbm90IGlkZW1wb3RlbnQ6ICcvY2FjaGVfY2xpZW50LlNjcy9EaWN0aW9uYXJ5SW5jcmVtZW50JyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0RpY3Rpb25hcnlHZXQnLFxuICAnL2NhY2hlX2NsaWVudC5TY3MvRGljdGlvbmFyeUZldGNoJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0RpY3Rpb25hcnlEZWxldGUnLFxuICAnL2NhY2hlX2NsaWVudC5TY3MvU2V0VW5pb24nLFxuICAnL2NhY2hlX2NsaWVudC5TY3MvU2V0RGlmZmVyZW5jZScsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9TZXRGZXRjaCcsXG4gIC8vIG5vdCBpZGVtcG90ZW50OiAnL2NhY2hlX2NsaWVudC5TY3MvTGlzdFB1c2hGcm9udCcsXG4gIC8vIG5vdCBpZGVtcG90ZW50OiAnL2NhY2hlX2NsaWVudC5TY3MvTGlzdFB1c2hCYWNrJyxcbiAgLy8gbm90IGlkZW1wb3RlbnQ6ICcvY2FjaGVfY2xpZW50LlNjcy9MaXN0UG9wRnJvbnQnLFxuICAvLyBub3QgaWRlbXBvdGVudDogJy9jYWNoZV9jbGllbnQuU2NzL0xpc3RQb3BCYWNrJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0xpc3RGZXRjaCcsXG4gIC8qXG4gICAqICBXYXJuaW5nOiBpbiB0aGUgZnV0dXJlLCB0aGlzIG1heSBub3QgYmUgaWRlbXBvdGVudFxuICAgKiAgQ3VycmVudGx5IGl0IHN1cHBvcnRzIHJlbW92aW5nIGFsbCBvY2N1cnJlbmNlcyBvZiBhIHZhbHVlLlxuICAgKiAgSW4gdGhlIGZ1dHVyZSwgd2UgbWF5IGFsc28gYWRkIFwidGhlIGZpcnN0L2xhc3QgTiBvY2N1cnJlbmNlcyBvZiBhIHZhbHVlXCIuXG4gICAqICBJbiB0aGUgbGF0dGVyIGNhc2UgaXQgaXMgbm90IGlkZW1wb3RlbnQuXG4gICAqL1xuICAnL2NhY2hlX2NsaWVudC5TY3MvTGlzdFJlbW92ZScsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9MaXN0TGVuZ3RoJyxcbiAgLy8gbm90IGlkZW1wb3RlbnQ6ICcvY2FjaGVfY2xpZW50LlNjcy9MaXN0Q29uY2F0ZW5hdGVGcm9udCcsXG4gIC8vIG5vdCBpZGVtcG90ZW50OiAnL2NhY2hlX2NsaWVudC5TY3MvTGlzdENvbmNhdGVuYXRlQmFjaydcbl07XG5cbmV4cG9ydCBjbGFzcyBEZWZhdWx0RWxpZ2liaWxpdHlTdHJhdGVneSBpbXBsZW1lbnRzIEVsaWdpYmlsaXR5U3RyYXRlZ3kge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcblxuICBjb25zdHJ1Y3Rvcihsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSkge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIodGhpcyk7XG4gIH1cblxuICBpc0VsaWdpYmxlRm9yUmV0cnkocHJvcHM6IEVsaWdpYmxlRm9yUmV0cnlQcm9wcyk6IGJvb2xlYW4ge1xuICAgIGlmICghcmV0cnlhYmxlR3JwY1N0YXR1c0NvZGVzLmluY2x1ZGVzKHByb3BzLmdycGNTdGF0dXMuY29kZSkpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICBgUmVzcG9uc2Ugd2l0aCBzdGF0dXMgY29kZSAke3Byb3BzLmdycGNTdGF0dXMuY29kZX0gaXMgbm90IHJldHJ5YWJsZS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghcmV0cnlhYmxlUmVxdWVzdFR5cGVzLmluY2x1ZGVzKHByb3BzLmdycGNSZXF1ZXN0LnBhdGgpKSB7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgYFJlcXVlc3Qgd2l0aCB0eXBlICR7cHJvcHMuZ3JwY1JlcXVlc3QucGF0aH0gaXMgbm90IHJldHJ5YWJsZS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXX0=