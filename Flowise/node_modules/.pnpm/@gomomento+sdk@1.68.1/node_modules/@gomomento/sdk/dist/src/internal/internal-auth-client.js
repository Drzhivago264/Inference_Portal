"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.permissionsFromDisposableTokenScope = exports.permissionsFromTokenScope = exports.InternalAuthClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcAuth = generated_types_1.auth.auth;
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
var Never = grpcAuth._GenerateApiTokenRequest.Never;
var Expires = grpcAuth._GenerateApiTokenRequest.Expires;
const sdk_core_1 = require("@gomomento/sdk-core");
const permission_scope_1 = require("@gomomento/sdk-core/dist/src/auth/tokens/permission-scope");
const permissionmessages_1 = require("@gomomento/generated-types/dist/permissionmessages");
const utils_2 = require("./utils");
const disposable_token_scope_1 = require("@gomomento/sdk-core/dist/src/auth/tokens/disposable-token-scope");
class InternalAuthClient {
    constructor(props) {
        var _a;
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper((_a = props.throwOnErrors) !== null && _a !== void 0 ? _a : false);
        this.creds = props.credentialProvider;
        const headers = [new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`)];
        this.interceptors = [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(InternalAuthClient.REQUEST_TIMEOUT_MS),
        ];
        this.tokenClient = new generated_types_1.token.token.TokenClient(this.creds.getTokenEndpoint(), grpc_js_1.ChannelCredentials.createSsl());
        this.authClient = new grpcAuth.AuthClient(this.creds.getControlEndpoint(), grpc_js_1.ChannelCredentials.createSsl());
    }
    async generateApiKey(scope, expiresIn) {
        let permissions;
        try {
            permissions = permissionsFromTokenScope(scope);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.GenerateApiKey.Error(err));
        }
        const request = new grpcAuth._GenerateApiTokenRequest({
            auth_token: this.creds.getAuthToken(),
            permissions: permissions,
        });
        if (expiresIn.doesExpire()) {
            try {
                (0, utils_1.validateValidForSeconds)(expiresIn.seconds());
            }
            catch (err) {
                return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.GenerateApiKey.Error(err));
            }
            request.expires = new Expires({
                valid_for_seconds: expiresIn.seconds(),
            });
        }
        else {
            request.never = new Never();
        }
        return await new Promise((resolve, reject) => {
            this.authClient.GenerateApiToken(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.GenerateApiKey.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new sdk_core_1.GenerateApiKey.Success(resp.api_key, resp.refresh_token, resp.endpoint, sdk_core_1.ExpiresAt.fromEpoch(resp.valid_until)));
                }
            });
        });
    }
    /**
     * @deprecated please use `generateApiKey` instead
     */
    generateAuthToken(scope, expiresIn) {
        return this.generateApiKey(scope, expiresIn);
    }
    async refreshApiKey(refreshToken) {
        const request = new grpcAuth._RefreshApiTokenRequest({
            api_key: this.creds.getAuthToken(),
            refresh_token: refreshToken,
        });
        return await new Promise((resolve, reject) => {
            this.authClient.RefreshApiToken(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.RefreshApiKey.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new sdk_core_1.RefreshApiKey.Success(resp.api_key, resp.refresh_token, resp.endpoint, sdk_core_1.ExpiresAt.fromEpoch(resp.valid_until)));
                }
            });
        });
    }
    /**
     * @deprecated please use `refreshApiKey` instead
     */
    refreshAuthToken(refreshToken) {
        return this.refreshApiKey(refreshToken);
    }
    async generateDisposableToken(scope, expiresIn, disposableTokenProps) {
        try {
            (0, utils_1.validateDisposableTokenExpiry)(expiresIn);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.GenerateDisposableToken.Error(err));
        }
        const expires = new generated_types_1.token.token._GenerateDisposableTokenRequest.Expires({
            valid_for_seconds: expiresIn.seconds(),
        });
        let permissions;
        try {
            permissions = permissionsFromDisposableTokenScope(scope);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.GenerateDisposableToken.Error(err));
        }
        const tokenId = disposableTokenProps === null || disposableTokenProps === void 0 ? void 0 : disposableTokenProps.tokenId;
        if (tokenId !== undefined) {
            try {
                (0, utils_1.validateDisposableTokenTokenID)(tokenId);
            }
            catch (err) {
                return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.GenerateDisposableToken.Error(err));
            }
        }
        const request = new generated_types_1.token.token._GenerateDisposableTokenRequest({
            expires: expires,
            auth_token: this.creds.getAuthToken(),
            permissions: permissions,
            token_id: tokenId,
        });
        return await new Promise((resolve, reject) => {
            this.tokenClient.GenerateDisposableToken(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.GenerateDisposableToken.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new sdk_core_1.GenerateDisposableToken.Success(resp.api_key, resp.endpoint, sdk_core_1.ExpiresAt.fromEpoch(resp.valid_until)));
                }
            });
        });
    }
}
exports.InternalAuthClient = InternalAuthClient;
InternalAuthClient.REQUEST_TIMEOUT_MS = 60 * 1000;
function permissionsFromTokenScope(scope) {
    const result = new permissionmessages_1.permission_messages.Permissions();
    if (scope instanceof utils_1.InternalSuperUserPermissions) {
        result.super_user = permissionmessages_1.permission_messages.SuperUserPermissions.SuperUser;
        return result;
    }
    else if ((0, permission_scope_1.isPermissionsObject)(scope)) {
        const scopePermissions = (0, permission_scope_1.asPermissionsObject)(scope);
        const explicitPermissions = new permissionmessages_1.permission_messages.ExplicitPermissions();
        explicitPermissions.permissions = scopePermissions.permissions.map(p => tokenPermissionToGrpcPermission(p));
        result.explicit = explicitPermissions;
        return result;
    }
    throw new Error(`Unrecognized token scope: ${JSON.stringify(scope)}`);
}
exports.permissionsFromTokenScope = permissionsFromTokenScope;
function permissionsFromDisposableTokenScope(scope) {
    const result = new permissionmessages_1.permission_messages.Permissions();
    if (!(scope instanceof permission_scope_1.PredefinedScope) &&
        (0, disposable_token_scope_1.isDisposableTokenPermissionsObject)(scope)) {
        const scopePermissions = (0, disposable_token_scope_1.asDisposableTokenPermissionsObject)(scope);
        const explicitPermissions = new permissionmessages_1.permission_messages.ExplicitPermissions();
        explicitPermissions.permissions = scopePermissions.permissions.map(p => disposableTokenPermissionToGrpcPermission(p));
        result.explicit = explicitPermissions;
        return result;
    }
    else if ((0, permission_scope_1.isPermissionsObject)(scope)) {
        const scopePermissions = (0, permission_scope_1.asPermissionsObject)(scope);
        const explicitPermissions = new permissionmessages_1.permission_messages.ExplicitPermissions();
        explicitPermissions.permissions = scopePermissions.permissions.map(p => tokenPermissionToGrpcPermission(p));
        result.explicit = explicitPermissions;
        return result;
    }
    throw new Error(`Unrecognized token scope: ${JSON.stringify(scope)}`);
}
exports.permissionsFromDisposableTokenScope = permissionsFromDisposableTokenScope;
function tokenPermissionToGrpcPermission(permission) {
    const result = new permissionmessages_1.permission_messages.PermissionsType();
    if ((0, permission_scope_1.isTopicPermission)(permission)) {
        result.topic_permissions = topicPermissionToGrpcPermission((0, permission_scope_1.asTopicPermission)(permission));
        return result;
    }
    else if ((0, permission_scope_1.isCachePermission)(permission)) {
        result.cache_permissions = cachePermissionToGrpcPermission((0, permission_scope_1.asCachePermission)(permission));
        return result;
    }
    throw new Error(`Unrecognized token permission: ${JSON.stringify(permission)}`);
}
function topicPermissionToGrpcPermission(permission) {
    const grpcPermission = new permissionmessages_1.permission_messages.PermissionsType.TopicPermissions();
    switch (permission.role) {
        case sdk_core_1.TopicRole.PublishSubscribe: {
            grpcPermission.role = permissionmessages_1.permission_messages.TopicRole.TopicReadWrite;
            break;
        }
        case sdk_core_1.TopicRole.SubscribeOnly: {
            grpcPermission.role = permissionmessages_1.permission_messages.TopicRole.TopicReadOnly;
            break;
        }
        case sdk_core_1.TopicRole.PublishOnly: {
            grpcPermission.role = permissionmessages_1.permission_messages.TopicRole.TopicWriteOnly;
            break;
        }
        default: {
            throw new Error(`Unrecognized topic role: ${JSON.stringify(permission)}`);
        }
    }
    if (permission.cache === sdk_core_1.AllCaches) {
        grpcPermission.all_caches = new permissionmessages_1.permission_messages.PermissionsType.All();
    }
    else if (typeof permission.cache === 'string') {
        grpcPermission.cache_selector =
            new permissionmessages_1.permission_messages.PermissionsType.CacheSelector({
                cache_name: permission.cache,
            });
    }
    else if ((0, sdk_core_1.isCacheName)(permission.cache)) {
        grpcPermission.cache_selector =
            new permissionmessages_1.permission_messages.PermissionsType.CacheSelector({
                cache_name: permission.cache.name,
            });
    }
    else {
        throw new Error(`Unrecognized cache specification in topic permission: ${JSON.stringify(permission)}`);
    }
    if (permission.topic === sdk_core_1.AllTopics) {
        grpcPermission.all_topics = new permissionmessages_1.permission_messages.PermissionsType.All();
    }
    else if (typeof permission.topic === 'string') {
        grpcPermission.topic_selector =
            new permissionmessages_1.permission_messages.PermissionsType.TopicSelector({
                topic_name: permission.topic,
            });
    }
    else if ((0, sdk_core_1.isTopicName)(permission.topic)) {
        grpcPermission.topic_selector =
            new permissionmessages_1.permission_messages.PermissionsType.TopicSelector({
                topic_name: permission.topic.name,
            });
    }
    else {
        throw new Error(`Unrecognized topic specification in topic permission: ${JSON.stringify(permission)}`);
    }
    return grpcPermission;
}
function assignCacheRole(permission, grpcPermission) {
    switch (permission.role) {
        case sdk_core_1.CacheRole.ReadWrite: {
            grpcPermission.role = permissionmessages_1.permission_messages.CacheRole.CacheReadWrite;
            break;
        }
        case sdk_core_1.CacheRole.ReadOnly: {
            grpcPermission.role = permissionmessages_1.permission_messages.CacheRole.CacheReadOnly;
            break;
        }
        case sdk_core_1.CacheRole.WriteOnly: {
            grpcPermission.role = permissionmessages_1.permission_messages.CacheRole.CacheWriteOnly;
            break;
        }
        default: {
            throw new Error(`Unrecognized cache role: ${JSON.stringify(permission)}`);
        }
    }
    return grpcPermission;
}
function assignCacheSelector(permission, grpcPermission) {
    if (permission.cache === sdk_core_1.AllCaches) {
        grpcPermission.all_caches = new permissionmessages_1.permission_messages.PermissionsType.All();
    }
    else if (typeof permission.cache === 'string') {
        grpcPermission.cache_selector =
            new permissionmessages_1.permission_messages.PermissionsType.CacheSelector({
                cache_name: permission.cache,
            });
    }
    else if ((0, sdk_core_1.isCacheName)(permission.cache)) {
        grpcPermission.cache_selector =
            new permissionmessages_1.permission_messages.PermissionsType.CacheSelector({
                cache_name: permission.cache.name,
            });
    }
    else {
        throw new Error(`Unrecognized cache specification in cache permission: ${JSON.stringify(permission)}`);
    }
    return grpcPermission;
}
function assignCacheItemSelector(permission, grpcPermission) {
    if (permission.item === sdk_core_1.AllCacheItems) {
        grpcPermission.all_items = new permissionmessages_1.permission_messages.PermissionsType.All();
    }
    else if (typeof permission.item === 'string') {
        grpcPermission.item_selector =
            new permissionmessages_1.permission_messages.PermissionsType.CacheItemSelector({
                key: (0, utils_2.convert)(permission.item),
            });
    }
    else if ((0, sdk_core_1.isCacheItemKey)(permission.item)) {
        (0, utils_1.validateCacheKeyOrPrefix)(permission.item.key);
        grpcPermission.item_selector =
            new permissionmessages_1.permission_messages.PermissionsType.CacheItemSelector({
                key: (0, utils_2.convert)(permission.item.key),
            });
    }
    else if ((0, sdk_core_1.isCacheItemKeyPrefix)(permission.item)) {
        (0, utils_1.validateCacheKeyOrPrefix)(permission.item.keyPrefix);
        grpcPermission.item_selector =
            new permissionmessages_1.permission_messages.PermissionsType.CacheItemSelector({
                key_prefix: (0, utils_2.convert)(permission.item.keyPrefix),
            });
    }
    else {
        throw new Error(`Unrecognized cache item specification in cache permission: ${JSON.stringify(permission)}`);
    }
    return grpcPermission;
}
function cachePermissionToGrpcPermission(permission) {
    let grpcPermission = new permissionmessages_1.permission_messages.PermissionsType.CachePermissions();
    grpcPermission = assignCacheRole(permission, grpcPermission);
    grpcPermission = assignCacheSelector(permission, grpcPermission);
    return grpcPermission;
}
function disposableTokenPermissionToGrpcPermission(permission) {
    const result = new permissionmessages_1.permission_messages.PermissionsType();
    if ((0, disposable_token_scope_1.isDisposableTokenCachePermission)(permission)) {
        result.cache_permissions = disposableCachePermissionToGrpcPermission((0, disposable_token_scope_1.asDisposableTokenCachePermission)(permission));
        return result;
    }
    throw new Error(`Unrecognized token permission: ${JSON.stringify(permission)}`);
}
function disposableCachePermissionToGrpcPermission(permission) {
    let grpcPermission = new permissionmessages_1.permission_messages.PermissionsType.CachePermissions();
    grpcPermission = assignCacheRole(permission, grpcPermission);
    grpcPermission = assignCacheSelector(permission, grpcPermission);
    grpcPermission = assignCacheItemSelector(permission, grpcPermission);
    return grpcPermission;
}
//# sourceMappingURL=data:application/json;base64,