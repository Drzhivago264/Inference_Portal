"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeaderInterceptorProvider = exports.Header = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
class Header {
    /**
     * @param {string} name
     * @param {string} value
     */
    constructor(name, value) {
        this.onceOnlyHeaders = ['Agent'];
        this.name = name;
        this.value = value;
    }
}
exports.Header = Header;
class HeaderInterceptorProvider {
    /**
     * @param {Header[]} headers
     */
    constructor(headers) {
        this.headersToAddOnce = headers.filter(header => header.onceOnlyHeaders.includes(header.name));
        this.headersToAddEveryTime = headers.filter(header => !header.onceOnlyHeaders.includes(header.name));
    }
    createHeadersInterceptor() {
        return (options, nextCall) => {
            return new grpc_js_1.InterceptingCall(nextCall(options), {
                start: (metadata, listener, next) => {
                    this.headersToAddEveryTime.forEach(h => metadata.add(h.name, h.value));
                    if (!HeaderInterceptorProvider.areOnlyOnceHeadersSent) {
                        HeaderInterceptorProvider.areOnlyOnceHeadersSent = true;
                        this.headersToAddOnce.forEach(h => metadata.add(h.name, h.value));
                    }
                    next(metadata, {});
                },
            });
        };
    }
}
exports.HeaderInterceptorProvider = HeaderInterceptorProvider;
HeaderInterceptorProvider.areOnlyOnceHeadersSent = false;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVycy1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbnRlcm5hbC9ncnBjL2hlYWRlcnMtaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQTREO0FBRTVELE1BQWEsTUFBTTtJQUtqQjs7O09BR0c7SUFDSCxZQUFZLElBQVksRUFBRSxLQUFhO1FBUnZCLG9CQUFlLEdBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQVNwRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0NBQ0Y7QUFiRCx3QkFhQztBQUVELE1BQWEseUJBQXlCO0lBS3BDOztPQUVHO0lBQ0gsWUFBWSxPQUFpQjtRQUMzQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUM5QyxNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQzdDLENBQUM7UUFDRixJQUFJLENBQUMscUJBQXFCLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDekMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDeEQsQ0FBQztJQUNKLENBQUM7SUFFTSx3QkFBd0I7UUFDN0IsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUMzQixPQUFPLElBQUksMEJBQWdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUM3QyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFO29CQUNsQyxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ3JDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQzlCLENBQUM7b0JBQ0YsSUFBSSxDQUFDLHlCQUF5QixDQUFDLHNCQUFzQixFQUFFO3dCQUNyRCx5QkFBeUIsQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7d0JBQ3hELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7cUJBQ25FO29CQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3JCLENBQUM7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7SUFDSixDQUFDOztBQWhDSCw4REFpQ0M7QUE5QmdCLGdEQUFzQixHQUFHLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW50ZXJjZXB0aW5nQ2FsbCwgSW50ZXJjZXB0b3J9IGZyb20gJ0BncnBjL2dycGMtanMnO1xuXG5leHBvcnQgY2xhc3MgSGVhZGVyIHtcbiAgcHVibGljIHJlYWRvbmx5IG9uY2VPbmx5SGVhZGVyczogc3RyaW5nW10gPSBbJ0FnZW50J107XG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIZWFkZXJJbnRlcmNlcHRvclByb3ZpZGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBoZWFkZXJzVG9BZGRFdmVyeVRpbWU6IEhlYWRlcltdO1xuICBwcml2YXRlIHJlYWRvbmx5IGhlYWRlcnNUb0FkZE9uY2U6IEhlYWRlcltdO1xuICBwcml2YXRlIHN0YXRpYyBhcmVPbmx5T25jZUhlYWRlcnNTZW50ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SGVhZGVyW119IGhlYWRlcnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGhlYWRlcnM6IEhlYWRlcltdKSB7XG4gICAgdGhpcy5oZWFkZXJzVG9BZGRPbmNlID0gaGVhZGVycy5maWx0ZXIoaGVhZGVyID0+XG4gICAgICBoZWFkZXIub25jZU9ubHlIZWFkZXJzLmluY2x1ZGVzKGhlYWRlci5uYW1lKVxuICAgICk7XG4gICAgdGhpcy5oZWFkZXJzVG9BZGRFdmVyeVRpbWUgPSBoZWFkZXJzLmZpbHRlcihcbiAgICAgIGhlYWRlciA9PiAhaGVhZGVyLm9uY2VPbmx5SGVhZGVycy5pbmNsdWRlcyhoZWFkZXIubmFtZSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZUhlYWRlcnNJbnRlcmNlcHRvcigpOiBJbnRlcmNlcHRvciB7XG4gICAgcmV0dXJuIChvcHRpb25zLCBuZXh0Q2FsbCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBJbnRlcmNlcHRpbmdDYWxsKG5leHRDYWxsKG9wdGlvbnMpLCB7XG4gICAgICAgIHN0YXJ0OiAobWV0YWRhdGEsIGxpc3RlbmVyLCBuZXh0KSA9PiB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzVG9BZGRFdmVyeVRpbWUuZm9yRWFjaChoID0+XG4gICAgICAgICAgICBtZXRhZGF0YS5hZGQoaC5uYW1lLCBoLnZhbHVlKVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCFIZWFkZXJJbnRlcmNlcHRvclByb3ZpZGVyLmFyZU9ubHlPbmNlSGVhZGVyc1NlbnQpIHtcbiAgICAgICAgICAgIEhlYWRlckludGVyY2VwdG9yUHJvdmlkZXIuYXJlT25seU9uY2VIZWFkZXJzU2VudCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcnNUb0FkZE9uY2UuZm9yRWFjaChoID0+IG1ldGFkYXRhLmFkZChoLm5hbWUsIGgudmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dChtZXRhZGF0YSwge30pO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufVxuIl19