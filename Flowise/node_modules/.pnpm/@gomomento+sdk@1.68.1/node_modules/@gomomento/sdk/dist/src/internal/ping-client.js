"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalNodeGrpcPingClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcPing = generated_types_1.ping.cache_client;
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
class InternalNodeGrpcPingClient {
    /**
     * @param {PingClientProps} props
     */
    constructor(props) {
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        const headers = [new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`)];
        this.interceptors = [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS),
        ];
        this.logger.debug(`Creating ping client using endpoint: '${props.endpoint}`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcPing.PingClient(props.endpoint, grpc_js_1.ChannelCredentials.createSsl()),
            loggerFactory: props.configuration.getLoggerFactory(),
            maxIdleMillis: props.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
        });
    }
    async ping() {
        this.logger.info('pinging...');
        const request = new grpcPing._PingRequest();
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                .Ping(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err) {
                    this.logger.error('failed to ping');
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
}
exports.InternalNodeGrpcPingClient = InternalNodeGrpcPingClient;
InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS = 60 * 1000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluZy1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvcGluZy1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0VBQWdEO0FBQ2hELElBQU8sUUFBUSxHQUFHLHNCQUFJLENBQUMsWUFBWSxDQUFDO0FBQ3BDLG9FQUE2RTtBQUM3RSxrRkFBMkU7QUFDM0UsMkNBQThEO0FBQzlELHFEQUEyQztBQUMzQyw4RUFBc0U7QUFVdEUsTUFBYSwwQkFBMEI7SUFNckM7O09BRUc7SUFDSCxZQUFZLEtBQXNCO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRSxNQUFNLE9BQU8sR0FBRyxDQUFDLElBQUksNEJBQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxzQkFBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxZQUFZLEdBQUc7WUFDbEIsSUFBSSwrQ0FBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyx3QkFBd0IsRUFBRTtZQUNqRSxJQUFBLHFEQUF3QixFQUFDLDBCQUEwQixDQUFDLGtCQUFrQixDQUFDO1NBQ3hFLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZix5Q0FBeUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUMxRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGdEQUFxQixDQUFDO1lBQzdDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FDcEIsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsNEJBQWtCLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDekUsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUU7WUFDckQsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO2lCQUMvQixvQkFBb0IsRUFBRTtpQkFDdEIsZ0JBQWdCLEVBQUU7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJO1FBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUMsT0FBTyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxhQUFhO2lCQUNmLFNBQVMsRUFBRTtnQkFDWiw2REFBNkQ7aUJBQzVELElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUM5RCxJQUFJLEdBQUcsRUFBRTtvQkFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO29CQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2I7cUJBQU07b0JBQ0wsT0FBTyxFQUFFLENBQUM7aUJBQ1g7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUE3Q0gsZ0VBOENDO0FBM0N5Qiw2Q0FBa0IsR0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtwaW5nfSBmcm9tICdAZ29tb21lbnRvL2dlbmVyYXRlZC10eXBlcyc7XG5pbXBvcnQgZ3JwY1BpbmcgPSBwaW5nLmNhY2hlX2NsaWVudDtcbmltcG9ydCB7SGVhZGVyLCBIZWFkZXJJbnRlcmNlcHRvclByb3ZpZGVyfSBmcm9tICcuL2dycGMvaGVhZGVycy1pbnRlcmNlcHRvcic7XG5pbXBvcnQge0NsaWVudFRpbWVvdXRJbnRlcmNlcHRvcn0gZnJvbSAnLi9ncnBjL2NsaWVudC10aW1lb3V0LWludGVyY2VwdG9yJztcbmltcG9ydCB7Q2hhbm5lbENyZWRlbnRpYWxzLCBJbnRlcmNlcHRvcn0gZnJvbSAnQGdycGMvZ3JwYy1qcyc7XG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5pbXBvcnQge0lkbGVHcnBjQ2xpZW50V3JhcHBlcn0gZnJvbSAnLi9ncnBjL2lkbGUtZ3JwYy1jbGllbnQtd3JhcHBlcic7XG5pbXBvcnQge0dycGNDbGllbnRXcmFwcGVyfSBmcm9tICcuL2dycGMvZ3JwYy1jbGllbnQtd3JhcHBlcic7XG5pbXBvcnQge0NvbmZpZ3VyYXRpb259IGZyb20gJy4uL2NvbmZpZy9jb25maWd1cmF0aW9uJztcbmltcG9ydCB7TW9tZW50b0xvZ2dlcn0gZnJvbSAnLi4vJztcblxuZXhwb3J0IGludGVyZmFjZSBQaW5nQ2xpZW50UHJvcHMge1xuICBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uO1xuICBlbmRwb2ludDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSW50ZXJuYWxOb2RlR3JwY1BpbmdDbGllbnQge1xuICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudFdyYXBwZXI6IEdycGNDbGllbnRXcmFwcGVyPGdycGNQaW5nLlBpbmdDbGllbnQ+O1xuICBwcml2YXRlIHJlYWRvbmx5IGludGVyY2VwdG9yczogSW50ZXJjZXB0b3JbXTtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUkVRVUVTVF9USU1FT1VUX01TOiBudW1iZXIgPSA2MCAqIDEwMDA7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BpbmdDbGllbnRQcm9wc30gcHJvcHNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQaW5nQ2xpZW50UHJvcHMpIHtcbiAgICB0aGlzLmxvZ2dlciA9IHByb3BzLmNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLmdldExvZ2dlcih0aGlzKTtcbiAgICBjb25zdCBoZWFkZXJzID0gW25ldyBIZWFkZXIoJ0FnZW50JywgYG5vZGVqczoke3ZlcnNpb259YCldO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0gW1xuICAgICAgbmV3IEhlYWRlckludGVyY2VwdG9yUHJvdmlkZXIoaGVhZGVycykuY3JlYXRlSGVhZGVyc0ludGVyY2VwdG9yKCksXG4gICAgICBDbGllbnRUaW1lb3V0SW50ZXJjZXB0b3IoSW50ZXJuYWxOb2RlR3JwY1BpbmdDbGllbnQuUkVRVUVTVF9USU1FT1VUX01TKSxcbiAgICBdO1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgYENyZWF0aW5nIHBpbmcgY2xpZW50IHVzaW5nIGVuZHBvaW50OiAnJHtwcm9wcy5lbmRwb2ludH1gXG4gICAgKTtcbiAgICB0aGlzLmNsaWVudFdyYXBwZXIgPSBuZXcgSWRsZUdycGNDbGllbnRXcmFwcGVyKHtcbiAgICAgIGNsaWVudEZhY3RvcnlGbjogKCkgPT5cbiAgICAgICAgbmV3IGdycGNQaW5nLlBpbmdDbGllbnQocHJvcHMuZW5kcG9pbnQsIENoYW5uZWxDcmVkZW50aWFscy5jcmVhdGVTc2woKSksXG4gICAgICBsb2dnZXJGYWN0b3J5OiBwcm9wcy5jb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKSxcbiAgICAgIG1heElkbGVNaWxsaXM6IHByb3BzLmNvbmZpZ3VyYXRpb25cbiAgICAgICAgLmdldFRyYW5zcG9ydFN0cmF0ZWd5KClcbiAgICAgICAgLmdldE1heElkbGVNaWxsaXMoKSxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwaW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ3BpbmdpbmcuLi4nKTtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNQaW5nLl9QaW5nUmVxdWVzdCgpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgLlBpbmcocmVxdWVzdCwge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LCAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ2ZhaWxlZCB0byBwaW5nJyk7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==