"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultMomentoLogger = exports.DefaultMomentoLoggerFactory = exports.DefaultMomentoLoggerLevel = void 0;
const printf = require("../../internal/vendor/printf/printf");
var DefaultMomentoLoggerLevel;
(function (DefaultMomentoLoggerLevel) {
    DefaultMomentoLoggerLevel[DefaultMomentoLoggerLevel["TRACE"] = 5] = "TRACE";
    DefaultMomentoLoggerLevel[DefaultMomentoLoggerLevel["DEBUG"] = 10] = "DEBUG";
    DefaultMomentoLoggerLevel[DefaultMomentoLoggerLevel["INFO"] = 20] = "INFO";
    DefaultMomentoLoggerLevel[DefaultMomentoLoggerLevel["WARN"] = 30] = "WARN";
    DefaultMomentoLoggerLevel[DefaultMomentoLoggerLevel["ERROR"] = 40] = "ERROR";
})(DefaultMomentoLoggerLevel = exports.DefaultMomentoLoggerLevel || (exports.DefaultMomentoLoggerLevel = {}));
class DefaultMomentoLoggerFactory {
    constructor(level = DefaultMomentoLoggerLevel.INFO) {
        this.level = level;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getLogger(loggerName) {
        return new DefaultMomentoLogger(loggerName, this.level);
    }
}
exports.DefaultMomentoLoggerFactory = DefaultMomentoLoggerFactory;
class DefaultMomentoLogger {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(loggerName, level) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        this.loggerName =
            typeof loggerName === 'string' || loggerName instanceof String
                ? loggerName
                : // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                    loggerName.constructor.name;
        this.level = level;
    }
    trace(msg, ...args) {
        if (this.level > DefaultMomentoLoggerLevel.TRACE) {
            return;
        }
        this.outputMessage(console.log, DefaultMomentoLoggerLevel.TRACE, msg, args);
    }
    debug(msg, ...args) {
        if (this.level > DefaultMomentoLoggerLevel.DEBUG) {
            return;
        }
        this.outputMessage(console.log, DefaultMomentoLoggerLevel.DEBUG, msg, args);
    }
    info(msg, ...args) {
        if (this.level > DefaultMomentoLoggerLevel.INFO) {
            return;
        }
        this.outputMessage(console.log, DefaultMomentoLoggerLevel.INFO, msg, args);
    }
    warn(msg, ...args) {
        if (this.level > DefaultMomentoLoggerLevel.WARN) {
            return;
        }
        this.outputMessage(console.warn, DefaultMomentoLoggerLevel.WARN, msg, args);
    }
    error(msg, ...args) {
        if (this.level > DefaultMomentoLoggerLevel.ERROR) {
            return;
        }
        this.outputMessage(console.error, DefaultMomentoLoggerLevel.ERROR, msg, args);
    }
    outputMessage(outputFn, level, msg, args) {
        outputFn(printf('[%s] %s (Momento: %s): %s', new Date().toISOString(), DefaultMomentoLoggerLevel[level], this.loggerName, printf(msg, ...args)));
    }
}
exports.DefaultMomentoLogger = DefaultMomentoLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1tb21lbnRvLWxvZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb25maWcvbG9nZ2luZy9kZWZhdWx0LW1vbWVudG8tbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLDhEQUErRDtBQUUvRCxJQUFZLHlCQU1YO0FBTkQsV0FBWSx5QkFBeUI7SUFDbkMsMkVBQVMsQ0FBQTtJQUNULDRFQUFVLENBQUE7SUFDViwwRUFBUyxDQUFBO0lBQ1QsMEVBQVMsQ0FBQTtJQUNULDRFQUFVLENBQUE7QUFDWixDQUFDLEVBTlcseUJBQXlCLEdBQXpCLGlDQUF5QixLQUF6QixpQ0FBeUIsUUFNcEM7QUFFRCxNQUFhLDJCQUEyQjtJQUV0QyxZQUNFLFFBQW1DLHlCQUF5QixDQUFDLElBQUk7UUFFakUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELDhEQUE4RDtJQUM5RCxTQUFTLENBQUMsVUFBd0I7UUFDaEMsT0FBTyxJQUFJLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUQsQ0FBQztDQUNGO0FBWkQsa0VBWUM7QUFFRCxNQUFhLG9CQUFvQjtJQUcvQiw4REFBOEQ7SUFDOUQsWUFBWSxVQUF3QixFQUFFLEtBQWdDO1FBQ3BFLG1FQUFtRTtRQUNuRSxJQUFJLENBQUMsVUFBVTtZQUNiLE9BQU8sVUFBVSxLQUFLLFFBQVEsSUFBSSxVQUFVLFlBQVksTUFBTTtnQkFDNUQsQ0FBQyxDQUFDLFVBQVU7Z0JBQ1osQ0FBQyxDQUFDLHNFQUFzRTtvQkFDdEUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFlO1FBQ25DLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUU7WUFDaEQsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFlO1FBQ25DLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUU7WUFDaEQsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFlO1FBQ2xDLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQyxJQUFJLEVBQUU7WUFDL0MsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFlO1FBQ2xDLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQyxJQUFJLEVBQUU7WUFDL0MsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLHlCQUF5QixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFlO1FBQ25DLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUU7WUFDaEQsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FDaEIsT0FBTyxDQUFDLEtBQUssRUFDYix5QkFBeUIsQ0FBQyxLQUFLLEVBQy9CLEdBQUcsRUFDSCxJQUFJLENBQ0wsQ0FBQztJQUNKLENBQUM7SUFFTyxhQUFhLENBQ25CLFFBQWtDLEVBQ2xDLEtBQWdDLEVBQ2hDLEdBQVcsRUFDWCxJQUFlO1FBRWYsUUFBUSxDQUNOLE1BQU0sQ0FDSiwyQkFBMkIsRUFDM0IsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFDeEIseUJBQXlCLENBQUMsS0FBSyxDQUFDLEVBQ2hDLElBQUksQ0FBQyxVQUFVLEVBQ2YsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUNyQixDQUNGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUF0RUQsb0RBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTW9tZW50b0xvZ2dlcixcbiAgTW9tZW50b0xvZ2dlckZhY3RvcnksXG59IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvY29uZmlnL2xvZ2dpbmcvbW9tZW50by1sb2dnZXInO1xuaW1wb3J0IHByaW50ZiA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFsL3ZlbmRvci9wcmludGYvcHJpbnRmJyk7XG5cbmV4cG9ydCBlbnVtIERlZmF1bHRNb21lbnRvTG9nZ2VyTGV2ZWwge1xuICBUUkFDRSA9IDUsXG4gIERFQlVHID0gMTAsXG4gIElORk8gPSAyMCxcbiAgV0FSTiA9IDMwLFxuICBFUlJPUiA9IDQwLFxufVxuXG5leHBvcnQgY2xhc3MgRGVmYXVsdE1vbWVudG9Mb2dnZXJGYWN0b3J5IGltcGxlbWVudHMgTW9tZW50b0xvZ2dlckZhY3Rvcnkge1xuICBwcml2YXRlIHJlYWRvbmx5IGxldmVsOiBEZWZhdWx0TW9tZW50b0xvZ2dlckxldmVsO1xuICBjb25zdHJ1Y3RvcihcbiAgICBsZXZlbDogRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbCA9IERlZmF1bHRNb21lbnRvTG9nZ2VyTGV2ZWwuSU5GT1xuICApIHtcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBnZXRMb2dnZXIobG9nZ2VyTmFtZTogc3RyaW5nIHwgYW55KTogTW9tZW50b0xvZ2dlciB7XG4gICAgcmV0dXJuIG5ldyBEZWZhdWx0TW9tZW50b0xvZ2dlcihsb2dnZXJOYW1lLCB0aGlzLmxldmVsKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVmYXVsdE1vbWVudG9Mb2dnZXIgaW1wbGVtZW50cyBNb21lbnRvTG9nZ2VyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXJOYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgbGV2ZWw6IERlZmF1bHRNb21lbnRvTG9nZ2VyTGV2ZWw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGNvbnN0cnVjdG9yKGxvZ2dlck5hbWU6IHN0cmluZyB8IGFueSwgbGV2ZWw6IERlZmF1bHRNb21lbnRvTG9nZ2VyTGV2ZWwpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgdGhpcy5sb2dnZXJOYW1lID1cbiAgICAgIHR5cGVvZiBsb2dnZXJOYW1lID09PSAnc3RyaW5nJyB8fCBsb2dnZXJOYW1lIGluc3RhbmNlb2YgU3RyaW5nXG4gICAgICAgID8gbG9nZ2VyTmFtZVxuICAgICAgICA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICBsb2dnZXJOYW1lLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICB9XG5cbiAgdHJhY2UobXNnOiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxldmVsID4gRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbC5UUkFDRSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm91dHB1dE1lc3NhZ2UoY29uc29sZS5sb2csIERlZmF1bHRNb21lbnRvTG9nZ2VyTGV2ZWwuVFJBQ0UsIG1zZywgYXJncyk7XG4gIH1cblxuICBkZWJ1Zyhtc2c6IHN0cmluZywgLi4uYXJnczogdW5rbm93bltdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGV2ZWwgPiBEZWZhdWx0TW9tZW50b0xvZ2dlckxldmVsLkRFQlVHKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub3V0cHV0TWVzc2FnZShjb25zb2xlLmxvZywgRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbC5ERUJVRywgbXNnLCBhcmdzKTtcbiAgfVxuXG4gIGluZm8obXNnOiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxldmVsID4gRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbC5JTkZPKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub3V0cHV0TWVzc2FnZShjb25zb2xlLmxvZywgRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbC5JTkZPLCBtc2csIGFyZ3MpO1xuICB9XG5cbiAgd2Fybihtc2c6IHN0cmluZywgLi4uYXJnczogdW5rbm93bltdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGV2ZWwgPiBEZWZhdWx0TW9tZW50b0xvZ2dlckxldmVsLldBUk4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vdXRwdXRNZXNzYWdlKGNvbnNvbGUud2FybiwgRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbC5XQVJOLCBtc2csIGFyZ3MpO1xuICB9XG5cbiAgZXJyb3IobXNnOiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxldmVsID4gRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbC5FUlJPUikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm91dHB1dE1lc3NhZ2UoXG4gICAgICBjb25zb2xlLmVycm9yLFxuICAgICAgRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbC5FUlJPUixcbiAgICAgIG1zZyxcbiAgICAgIGFyZ3NcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBvdXRwdXRNZXNzYWdlKFxuICAgIG91dHB1dEZuOiAob3V0cHV0OiBzdHJpbmcpID0+IHZvaWQsXG4gICAgbGV2ZWw6IERlZmF1bHRNb21lbnRvTG9nZ2VyTGV2ZWwsXG4gICAgbXNnOiBzdHJpbmcsXG4gICAgYXJnczogdW5rbm93bltdXG4gICkge1xuICAgIG91dHB1dEZuKFxuICAgICAgcHJpbnRmKFxuICAgICAgICAnWyVzXSAlcyAoTW9tZW50bzogJXMpOiAlcycsXG4gICAgICAgIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgRGVmYXVsdE1vbWVudG9Mb2dnZXJMZXZlbFtsZXZlbF0sXG4gICAgICAgIHRoaXMubG9nZ2VyTmFtZSxcbiAgICAgICAgcHJpbnRmKG1zZywgLi4uYXJncylcbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXX0=