"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheServiceErrorMapper = void 0;
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const src_1 = require("../../src");
class CacheServiceErrorMapper {
    constructor(throwOnError) {
        this.throwOnErrors = throwOnError;
    }
    returnOrThrowError(err, errorResponseFactoryFn) {
        const sdkError = normalizeSdkError(err);
        if (this.throwOnErrors) {
            throw sdkError;
        }
        else {
            return errorResponseFactoryFn(sdkError);
        }
    }
    resolveOrRejectError(opts) {
        const error = this.convertError(opts.err);
        if (this.throwOnErrors) {
            opts.rejectFn(error);
        }
        else {
            opts.resolveFn(opts.errorResponseFactoryFn(error));
        }
    }
    convertError(err) {
        const errParams = [
            (err === null || err === void 0 ? void 0 : err.message) || 'Unable to process request',
            err === null || err === void 0 ? void 0 : err.code,
            err === null || err === void 0 ? void 0 : err.metadata,
            err === null || err === void 0 ? void 0 : err.stack,
        ];
        switch (err === null || err === void 0 ? void 0 : err.code) {
            case constants_1.Status.PERMISSION_DENIED:
                return new src_1.PermissionError(...errParams);
            case constants_1.Status.DATA_LOSS:
            case constants_1.Status.INTERNAL:
            case constants_1.Status.ABORTED:
                return new src_1.InternalServerError(...errParams);
            case constants_1.Status.UNKNOWN:
                return new src_1.UnknownServiceError(...errParams);
            case constants_1.Status.UNAVAILABLE:
                return new src_1.ServerUnavailableError(...errParams);
            case constants_1.Status.NOT_FOUND:
                return new src_1.NotFoundError(...errParams);
            case constants_1.Status.OUT_OF_RANGE:
            case constants_1.Status.UNIMPLEMENTED:
                return new src_1.BadRequestError(...errParams);
            case constants_1.Status.FAILED_PRECONDITION:
                return new src_1.FailedPreconditionError(...errParams);
            case constants_1.Status.INVALID_ARGUMENT:
                return new src_1.InvalidArgumentError(...errParams);
            case constants_1.Status.CANCELLED:
                return new src_1.CancelledError(...errParams);
            case constants_1.Status.DEADLINE_EXCEEDED:
                return new src_1.TimeoutError(...errParams);
            case constants_1.Status.UNAUTHENTICATED:
                return new src_1.AuthenticationError(...errParams);
            case constants_1.Status.RESOURCE_EXHAUSTED:
                return new src_1.LimitExceededError(...errParams);
            case constants_1.Status.ALREADY_EXISTS:
                return new src_1.AlreadyExistsError(...errParams);
            default:
                return new src_1.UnknownError(...errParams);
        }
    }
}
exports.CacheServiceErrorMapper = CacheServiceErrorMapper;
function normalizeSdkError(error) {
    if (error instanceof src_1.SdkError) {
        return error;
    }
    return new src_1.UnknownError(error.message);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2VydmljZS1lcnJvci1tYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXJyb3JzL2NhY2hlLXNlcnZpY2UtZXJyb3ItbWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlFQUF5RDtBQUV6RCxtQ0FnQm1CO0FBTW5CLE1BQWEsdUJBQXVCO0lBS2xDLFlBQVksWUFBcUI7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7SUFDcEMsQ0FBQztJQUVELGtCQUFrQixDQUNoQixHQUFVLEVBQ1Ysc0JBQXlEO1FBRXpELE1BQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixNQUFNLFFBQVEsQ0FBQztTQUNoQjthQUFNO1lBQ0wsT0FBTyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxJQUErQztRQUNsRSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QjthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFFRCxZQUFZLENBQUMsR0FBd0I7UUFDbkMsTUFBTSxTQUFTLEdBS1g7WUFDRixDQUFBLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxPQUFPLEtBQUksMkJBQTJCO1lBQzNDLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxJQUFJO1lBQ1QsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLFFBQVE7WUFDYixHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsS0FBSztTQUNYLENBQUM7UUFDRixRQUFRLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxJQUFJLEVBQUU7WUFDakIsS0FBSyxrQkFBTSxDQUFDLGlCQUFpQjtnQkFDM0IsT0FBTyxJQUFJLHFCQUFlLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUMzQyxLQUFLLGtCQUFNLENBQUMsU0FBUyxDQUFDO1lBQ3RCLEtBQUssa0JBQU0sQ0FBQyxRQUFRLENBQUM7WUFDckIsS0FBSyxrQkFBTSxDQUFDLE9BQU87Z0JBQ2pCLE9BQU8sSUFBSSx5QkFBbUIsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1lBQy9DLEtBQUssa0JBQU0sQ0FBQyxPQUFPO2dCQUNqQixPQUFPLElBQUkseUJBQW1CLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUMvQyxLQUFLLGtCQUFNLENBQUMsV0FBVztnQkFDckIsT0FBTyxJQUFJLDRCQUFzQixDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7WUFDbEQsS0FBSyxrQkFBTSxDQUFDLFNBQVM7Z0JBQ25CLE9BQU8sSUFBSSxtQkFBYSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7WUFDekMsS0FBSyxrQkFBTSxDQUFDLFlBQVksQ0FBQztZQUN6QixLQUFLLGtCQUFNLENBQUMsYUFBYTtnQkFDdkIsT0FBTyxJQUFJLHFCQUFlLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUMzQyxLQUFLLGtCQUFNLENBQUMsbUJBQW1CO2dCQUM3QixPQUFPLElBQUksNkJBQXVCLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUNuRCxLQUFLLGtCQUFNLENBQUMsZ0JBQWdCO2dCQUMxQixPQUFPLElBQUksMEJBQW9CLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUNoRCxLQUFLLGtCQUFNLENBQUMsU0FBUztnQkFDbkIsT0FBTyxJQUFJLG9CQUFjLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUMxQyxLQUFLLGtCQUFNLENBQUMsaUJBQWlCO2dCQUMzQixPQUFPLElBQUksa0JBQVksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1lBQ3hDLEtBQUssa0JBQU0sQ0FBQyxlQUFlO2dCQUN6QixPQUFPLElBQUkseUJBQW1CLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUMvQyxLQUFLLGtCQUFNLENBQUMsa0JBQWtCO2dCQUM1QixPQUFPLElBQUksd0JBQWtCLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUM5QyxLQUFLLGtCQUFNLENBQUMsY0FBYztnQkFDeEIsT0FBTyxJQUFJLHdCQUFrQixDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7WUFDOUM7Z0JBQ0UsT0FBTyxJQUFJLGtCQUFZLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7Q0FDRjtBQTdFRCwwREE2RUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLEtBQVk7SUFDckMsSUFBSSxLQUFLLFlBQVksY0FBUSxFQUFFO1FBQzdCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxPQUFPLElBQUksa0JBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RhdHVzfSBmcm9tICdAZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jb25zdGFudHMnO1xuaW1wb3J0IHtTZXJ2aWNlRXJyb3J9IGZyb20gJ0BncnBjL2dycGMtanMnO1xuaW1wb3J0IHtcbiAgTm90Rm91bmRFcnJvcixcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcixcbiAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gIFBlcm1pc3Npb25FcnJvcixcbiAgQmFkUmVxdWVzdEVycm9yLFxuICBDYW5jZWxsZWRFcnJvcixcbiAgVGltZW91dEVycm9yLFxuICBBdXRoZW50aWNhdGlvbkVycm9yLFxuICBMaW1pdEV4Y2VlZGVkRXJyb3IsXG4gIEFscmVhZHlFeGlzdHNFcnJvcixcbiAgU2RrRXJyb3IsXG4gIFVua25vd25TZXJ2aWNlRXJyb3IsXG4gIFNlcnZlclVuYXZhaWxhYmxlRXJyb3IsXG4gIFVua25vd25FcnJvcixcbiAgRmFpbGVkUHJlY29uZGl0aW9uRXJyb3IsXG59IGZyb20gJy4uLy4uL3NyYyc7XG5pbXBvcnQge1xuICBJQ2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIsXG4gIFJlc29sdmVPclJlamVjdEVycm9yT3B0aW9ucyxcbn0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZS9kaXN0L3NyYy9lcnJvcnMvSUNhY2hlU2VydmljZUVycm9yTWFwcGVyJztcblxuZXhwb3J0IGNsYXNzIENhY2hlU2VydmljZUVycm9yTWFwcGVyXG4gIGltcGxlbWVudHMgSUNhY2hlU2VydmljZUVycm9yTWFwcGVyPFNlcnZpY2VFcnJvcj5cbntcbiAgcHJpdmF0ZSByZWFkb25seSB0aHJvd09uRXJyb3JzOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHRocm93T25FcnJvcjogYm9vbGVhbikge1xuICAgIHRoaXMudGhyb3dPbkVycm9ycyA9IHRocm93T25FcnJvcjtcbiAgfVxuXG4gIHJldHVybk9yVGhyb3dFcnJvcjxURXJyb3JSZXNwb25zZT4oXG4gICAgZXJyOiBFcnJvcixcbiAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiAoZXJyOiBTZGtFcnJvcikgPT4gVEVycm9yUmVzcG9uc2VcbiAgKTogVEVycm9yUmVzcG9uc2Uge1xuICAgIGNvbnN0IHNka0Vycm9yID0gbm9ybWFsaXplU2RrRXJyb3IoZXJyKTtcbiAgICBpZiAodGhpcy50aHJvd09uRXJyb3JzKSB7XG4gICAgICB0aHJvdyBzZGtFcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm4oc2RrRXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHJlc29sdmVPclJlamVjdEVycm9yKG9wdHM6IFJlc29sdmVPclJlamVjdEVycm9yT3B0aW9uczxTZXJ2aWNlRXJyb3I+KTogdm9pZCB7XG4gICAgY29uc3QgZXJyb3IgPSB0aGlzLmNvbnZlcnRFcnJvcihvcHRzLmVycik7XG5cbiAgICBpZiAodGhpcy50aHJvd09uRXJyb3JzKSB7XG4gICAgICBvcHRzLnJlamVjdEZuKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0cy5yZXNvbHZlRm4ob3B0cy5lcnJvclJlc3BvbnNlRmFjdG9yeUZuKGVycm9yKSk7XG4gICAgfVxuICB9XG5cbiAgY29udmVydEVycm9yKGVycjogU2VydmljZUVycm9yIHwgbnVsbCk6IFNka0Vycm9yIHtcbiAgICBjb25zdCBlcnJQYXJhbXM6IFtcbiAgICAgIHN0cmluZyxcbiAgICAgIG51bWJlciB8IHVuZGVmaW5lZCxcbiAgICAgIG9iamVjdCB8IHVuZGVmaW5lZCxcbiAgICAgIHN0cmluZyB8IHVuZGVmaW5lZFxuICAgIF0gPSBbXG4gICAgICBlcnI/Lm1lc3NhZ2UgfHwgJ1VuYWJsZSB0byBwcm9jZXNzIHJlcXVlc3QnLFxuICAgICAgZXJyPy5jb2RlLFxuICAgICAgZXJyPy5tZXRhZGF0YSxcbiAgICAgIGVycj8uc3RhY2ssXG4gICAgXTtcbiAgICBzd2l0Y2ggKGVycj8uY29kZSkge1xuICAgICAgY2FzZSBTdGF0dXMuUEVSTUlTU0lPTl9ERU5JRUQ6XG4gICAgICAgIHJldHVybiBuZXcgUGVybWlzc2lvbkVycm9yKC4uLmVyclBhcmFtcyk7XG4gICAgICBjYXNlIFN0YXR1cy5EQVRBX0xPU1M6XG4gICAgICBjYXNlIFN0YXR1cy5JTlRFUk5BTDpcbiAgICAgIGNhc2UgU3RhdHVzLkFCT1JURUQ6XG4gICAgICAgIHJldHVybiBuZXcgSW50ZXJuYWxTZXJ2ZXJFcnJvciguLi5lcnJQYXJhbXMpO1xuICAgICAgY2FzZSBTdGF0dXMuVU5LTk9XTjpcbiAgICAgICAgcmV0dXJuIG5ldyBVbmtub3duU2VydmljZUVycm9yKC4uLmVyclBhcmFtcyk7XG4gICAgICBjYXNlIFN0YXR1cy5VTkFWQUlMQUJMRTpcbiAgICAgICAgcmV0dXJuIG5ldyBTZXJ2ZXJVbmF2YWlsYWJsZUVycm9yKC4uLmVyclBhcmFtcyk7XG4gICAgICBjYXNlIFN0YXR1cy5OT1RfRk9VTkQ6XG4gICAgICAgIHJldHVybiBuZXcgTm90Rm91bmRFcnJvciguLi5lcnJQYXJhbXMpO1xuICAgICAgY2FzZSBTdGF0dXMuT1VUX09GX1JBTkdFOlxuICAgICAgY2FzZSBTdGF0dXMuVU5JTVBMRU1FTlRFRDpcbiAgICAgICAgcmV0dXJuIG5ldyBCYWRSZXF1ZXN0RXJyb3IoLi4uZXJyUGFyYW1zKTtcbiAgICAgIGNhc2UgU3RhdHVzLkZBSUxFRF9QUkVDT05ESVRJT046XG4gICAgICAgIHJldHVybiBuZXcgRmFpbGVkUHJlY29uZGl0aW9uRXJyb3IoLi4uZXJyUGFyYW1zKTtcbiAgICAgIGNhc2UgU3RhdHVzLklOVkFMSURfQVJHVU1FTlQ6XG4gICAgICAgIHJldHVybiBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoLi4uZXJyUGFyYW1zKTtcbiAgICAgIGNhc2UgU3RhdHVzLkNBTkNFTExFRDpcbiAgICAgICAgcmV0dXJuIG5ldyBDYW5jZWxsZWRFcnJvciguLi5lcnJQYXJhbXMpO1xuICAgICAgY2FzZSBTdGF0dXMuREVBRExJTkVfRVhDRUVERUQ6XG4gICAgICAgIHJldHVybiBuZXcgVGltZW91dEVycm9yKC4uLmVyclBhcmFtcyk7XG4gICAgICBjYXNlIFN0YXR1cy5VTkFVVEhFTlRJQ0FURUQ6XG4gICAgICAgIHJldHVybiBuZXcgQXV0aGVudGljYXRpb25FcnJvciguLi5lcnJQYXJhbXMpO1xuICAgICAgY2FzZSBTdGF0dXMuUkVTT1VSQ0VfRVhIQVVTVEVEOlxuICAgICAgICByZXR1cm4gbmV3IExpbWl0RXhjZWVkZWRFcnJvciguLi5lcnJQYXJhbXMpO1xuICAgICAgY2FzZSBTdGF0dXMuQUxSRUFEWV9FWElTVFM6XG4gICAgICAgIHJldHVybiBuZXcgQWxyZWFkeUV4aXN0c0Vycm9yKC4uLmVyclBhcmFtcyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbmV3IFVua25vd25FcnJvciguLi5lcnJQYXJhbXMpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTZGtFcnJvcihlcnJvcjogRXJyb3IpOiBTZGtFcnJvciB7XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIFNka0Vycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG4gIHJldHVybiBuZXcgVW5rbm93bkVycm9yKGVycm9yLm1lc3NhZ2UpO1xufVxuIl19