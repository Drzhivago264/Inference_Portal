"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorIndexDataClient = void 0;
const package_json_1 = require("../../package.json");
const sdk_core_1 = require("@gomomento/sdk-core");
const grpc_js_1 = require("@grpc/grpc-js");
const vectorindex_1 = require("@gomomento/generated-types/dist/vectorindex");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const errors_1 = require("@gomomento/sdk-core/dist/src/errors");
const grpc_channel_options_1 = require("./grpc/grpc-channel-options");
class VectorIndexDataClient {
    constructor(props) {
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(this.configuration.getThrowOnErrors());
        const grpcConfig = this.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        this.requestTimeoutMs = grpcConfig.getDeadlineMillis();
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating vector index client using endpoint: '${this.credentialProvider.getVectorEndpoint()}'`);
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.client = new vectorindex_1.vectorindex.VectorIndexClient(this.credentialProvider.getVectorEndpoint(), grpc_js_1.ChannelCredentials.createSsl(), channelOptions);
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory());
    }
    async countItems(indexName) {
        try {
            (0, utils_1.validateIndexName)(indexName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorCountItems.Error(err));
        }
        return await this.sendCountItems(indexName);
    }
    async sendCountItems(indexName) {
        const request = new vectorindex_1.vectorindex._CountItemsRequest({
            index_name: indexName,
            all: new vectorindex_1.vectorindex._CountItemsRequest.All(),
        });
        return await new Promise((resolve, reject) => {
            this.client.CountItems(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorCountItems.Success(resp.item_count));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorCountItems.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async upsertItemBatch(indexName, items) {
        let request;
        try {
            (0, utils_1.validateIndexName)(indexName);
            // Create the request here to catch any metadata validation errors.
            request = VectorIndexDataClient.buildUpsertItemBatchRequest(indexName, items);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorUpsertItemBatch.Error(err));
        }
        return await this.sendUpsertItemBatch(indexName, request);
    }
    static buildUpsertItemBatchRequest(indexName, items) {
        return new vectorindex_1.vectorindex._UpsertItemBatchRequest({
            index_name: indexName,
            items: items.map(item => {
                return new vectorindex_1.vectorindex._Item({
                    id: item.id,
                    vector: new vectorindex_1.vectorindex._Vector({ elements: item.vector }),
                    metadata: VectorIndexDataClient.convertItemMetadataToProtobufMetadata(item),
                });
            }),
        });
    }
    static convertItemMetadataToProtobufMetadata(item) {
        if (item.metadata === undefined) {
            return [];
        }
        return Object.entries(item.metadata).map(([key, value]) => {
            if (typeof value === 'string') {
                return new vectorindex_1.vectorindex._Metadata({
                    field: key,
                    string_value: value,
                });
            }
            else if (typeof value === 'number') {
                if (Number.isInteger(value)) {
                    return new vectorindex_1.vectorindex._Metadata({
                        field: key,
                        integer_value: value,
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._Metadata({
                        field: key,
                        double_value: value,
                    });
                }
            }
            else if (typeof value === 'boolean') {
                return new vectorindex_1.vectorindex._Metadata({
                    field: key,
                    boolean_value: value,
                });
            }
            else if (Array.isArray(value) &&
                value.every(item => typeof item === 'string')) {
                return new vectorindex_1.vectorindex._Metadata({
                    field: key,
                    list_of_strings_value: new vectorindex_1.vectorindex._Metadata._ListOfStrings({
                        values: value,
                    }),
                });
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Metadata value for field '${key}' is not a valid type. Value is of type '${typeof value} and is not a string, number, boolean, or array of strings.'`);
            }
        });
    }
    async sendUpsertItemBatch(indexName, request) {
        return await new Promise((resolve, reject) => {
            this.client.UpsertItemBatch(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorUpsertItemBatch.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorUpsertItemBatch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async deleteItemBatch(indexName, filter) {
        try {
            (0, utils_1.validateIndexName)(indexName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorDeleteItemBatch.Error(err));
        }
        return await this.sendDeleteItemBatch(indexName, filter);
    }
    async sendDeleteItemBatch(indexName, filter) {
        const filterProtobuf = filter instanceof sdk_core_1.VectorFilterExpression
            ? VectorIndexDataClient.buildFilterExpression(filter)
            : VectorIndexDataClient.idsToFilterExpression(filter);
        const request = new vectorindex_1.vectorindex._DeleteItemBatchRequest({
            index_name: indexName,
            filter: filterProtobuf,
        });
        return await new Promise((resolve, reject) => {
            this.client.DeleteItemBatch(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorDeleteItemBatch.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorDeleteItemBatch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async search(indexName, queryVector, options) {
        try {
            (0, utils_1.validateIndexName)(indexName);
            if ((options === null || options === void 0 ? void 0 : options.topK) !== undefined) {
                (0, utils_1.validateTopK)(options.topK);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorSearch.Error(err));
        }
        return await this.sendSearch(indexName, queryVector, options);
    }
    static buildMetadataRequest(options) {
        const metadataRequest = new vectorindex_1.vectorindex._MetadataRequest();
        if ((options === null || options === void 0 ? void 0 : options.metadataFields) === sdk_core_1.ALL_VECTOR_METADATA) {
            metadataRequest.all = new vectorindex_1.vectorindex._MetadataRequest.All();
        }
        else {
            metadataRequest.some = new vectorindex_1.vectorindex._MetadataRequest.Some({
                fields: (options === null || options === void 0 ? void 0 : options.metadataFields) === undefined ? [] : options.metadataFields,
            });
        }
        return metadataRequest;
    }
    static applyScoreThreshold(request, options) {
        if ((options === null || options === void 0 ? void 0 : options.scoreThreshold) !== undefined) {
            request.score_threshold = options.scoreThreshold;
        }
        else {
            request.no_score_threshold = new vectorindex_1.vectorindex._NoScoreThreshold();
        }
    }
    static buildFilterExpression(filterExpression) {
        if (filterExpression === undefined) {
            return undefined;
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterAndExpression) {
            return new vectorindex_1.vectorindex._FilterExpression({
                and_expression: new vectorindex_1.vectorindex._AndExpression({
                    first_expression: VectorIndexDataClient.buildFilterExpression(filterExpression.FirstExpression),
                    second_expression: VectorIndexDataClient.buildFilterExpression(filterExpression.SecondExpression),
                }),
            });
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterOrExpression) {
            return new vectorindex_1.vectorindex._FilterExpression({
                or_expression: new vectorindex_1.vectorindex._OrExpression({
                    first_expression: VectorIndexDataClient.buildFilterExpression(filterExpression.FirstExpression),
                    second_expression: VectorIndexDataClient.buildFilterExpression(filterExpression.SecondExpression),
                }),
            });
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterNotExpression) {
            return new vectorindex_1.vectorindex._FilterExpression({
                not_expression: new vectorindex_1.vectorindex._NotExpression({
                    expression_to_negate: VectorIndexDataClient.buildFilterExpression(filterExpression.Expression),
                }),
            });
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterEqualsExpression) {
            if (typeof filterExpression.Value === 'string') {
                return new vectorindex_1.vectorindex._FilterExpression({
                    equals_expression: new vectorindex_1.vectorindex._EqualsExpression({
                        field: filterExpression.Field,
                        string_value: filterExpression.Value,
                    }),
                });
            }
            else if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        equals_expression: new vectorindex_1.vectorindex._EqualsExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        equals_expression: new vectorindex_1.vectorindex._EqualsExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else if (typeof filterExpression.Value === 'boolean') {
                return new vectorindex_1.vectorindex._FilterExpression({
                    equals_expression: new vectorindex_1.vectorindex._EqualsExpression({
                        field: filterExpression.Field,
                        boolean_value: filterExpression.Value,
                    }),
                });
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a string, number, or boolean.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterGreaterThanExpression) {
            if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        greater_than_expression: new vectorindex_1.vectorindex._GreaterThanExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        greater_than_expression: new vectorindex_1.vectorindex._GreaterThanExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a number.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterGreaterThanOrEqualExpression) {
            if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        greater_than_or_equal_expression: new vectorindex_1.vectorindex._GreaterThanOrEqualExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        greater_than_or_equal_expression: new vectorindex_1.vectorindex._GreaterThanOrEqualExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a number.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterLessThanExpression) {
            if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        less_than_expression: new vectorindex_1.vectorindex._LessThanExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        less_than_expression: new vectorindex_1.vectorindex._LessThanExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a number.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterLessThanOrEqualExpression) {
            if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        less_than_or_equal_expression: new vectorindex_1.vectorindex._LessThanOrEqualExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        less_than_or_equal_expression: new vectorindex_1.vectorindex._LessThanOrEqualExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a number.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterListContainsExpression) {
            if (typeof filterExpression.Value === 'string') {
                return new vectorindex_1.vectorindex._FilterExpression({
                    list_contains_expression: new vectorindex_1.vectorindex._ListContainsExpression({
                        field: filterExpression.Field,
                        string_value: filterExpression.Value,
                    }),
                });
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a string.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterIdInSetExpression) {
            return new vectorindex_1.vectorindex._FilterExpression({
                id_in_set_expression: new vectorindex_1.vectorindex._IdInSetExpression({
                    ids: filterExpression.Ids,
                }),
            });
        }
        throw new sdk_core_1.InvalidArgumentError('Filter expression is not a valid type.');
    }
    /**
     * Convert a list of ids to a filter expression that matches the ids.
     * @param ids
     * @private
     */
    static idsToFilterExpression(ids) {
        return new vectorindex_1.vectorindex._FilterExpression({
            id_in_set_expression: new vectorindex_1.vectorindex._IdInSetExpression({
                ids: ids,
            }),
        });
    }
    static deserializeMetadata(metadata, errorCallback) {
        return metadata.reduce((acc, metadata) => {
            const field = metadata.field;
            switch (metadata.value) {
                case 'string_value':
                    acc[field] = metadata.string_value;
                    break;
                case 'integer_value':
                    acc[field] = metadata.integer_value;
                    break;
                case 'double_value':
                    acc[field] = metadata.double_value;
                    break;
                case 'boolean_value':
                    acc[field] = metadata.boolean_value;
                    break;
                case 'list_of_strings_value':
                    acc[field] = metadata.list_of_strings_value.values;
                    break;
                default:
                    errorCallback();
                    break;
            }
            return acc;
        }, {});
    }
    async sendSearch(indexName, queryVector, options) {
        var _a;
        const request = new vectorindex_1.vectorindex._SearchRequest({
            index_name: indexName,
            query_vector: new vectorindex_1.vectorindex._Vector({ elements: queryVector }),
            top_k: (_a = options === null || options === void 0 ? void 0 : options.topK) !== null && _a !== void 0 ? _a : sdk_core_1.VECTOR_DEFAULT_TOPK,
            metadata_fields: VectorIndexDataClient.buildMetadataRequest(options),
            filter: VectorIndexDataClient.buildFilterExpression(options === null || options === void 0 ? void 0 : options.filter),
        });
        VectorIndexDataClient.applyScoreThreshold(request, options);
        return await new Promise((resolve, reject) => {
            this.client.Search(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorSearch.Success(resp.hits.map(hit => ({
                        id: hit.id,
                        score: hit.score,
                        metadata: VectorIndexDataClient.deserializeMetadata(hit.metadata, () => resolve(new sdk_core_1.VectorSearch.Error(new errors_1.UnknownError('Search responded with an unknown result')))),
                    }))));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorSearch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async searchAndFetchVectors(indexName, queryVector, options) {
        try {
            (0, utils_1.validateIndexName)(indexName);
            if ((options === null || options === void 0 ? void 0 : options.topK) !== undefined) {
                (0, utils_1.validateTopK)(options.topK);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorSearchAndFetchVectors.Error(err));
        }
        return await this.sendSearchAndFetchVectors(indexName, queryVector, options);
    }
    async sendSearchAndFetchVectors(indexName, queryVector, options) {
        var _a;
        const request = new vectorindex_1.vectorindex._SearchAndFetchVectorsRequest({
            index_name: indexName,
            query_vector: new vectorindex_1.vectorindex._Vector({ elements: queryVector }),
            top_k: (_a = options === null || options === void 0 ? void 0 : options.topK) !== null && _a !== void 0 ? _a : sdk_core_1.VECTOR_DEFAULT_TOPK,
            metadata_fields: VectorIndexDataClient.buildMetadataRequest(options),
            filter: VectorIndexDataClient.buildFilterExpression(options === null || options === void 0 ? void 0 : options.filter),
        });
        VectorIndexDataClient.applyScoreThreshold(request, options);
        return await new Promise((resolve, reject) => {
            this.client.SearchAndFetchVectors(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorSearchAndFetchVectors.Success(resp.hits.map(hit => ({
                        id: hit.id,
                        score: hit.score,
                        vector: hit.vector.elements,
                        metadata: VectorIndexDataClient.deserializeMetadata(hit.metadata, () => resolve(new sdk_core_1.VectorSearchAndFetchVectors.Error(new errors_1.UnknownError('SearchAndFetchVectors responded with an unknown result')))),
                    }))));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorSearchAndFetchVectors.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async getItemBatch(indexName, filter) {
        try {
            (0, utils_1.validateIndexName)(indexName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorGetItemBatch.Error(err));
        }
        return await this.sendGetItemBatch(indexName, filter);
    }
    async sendGetItemBatch(indexName, filter) {
        const request = new vectorindex_1.vectorindex._GetItemBatchRequest({
            index_name: indexName,
            filter: VectorIndexDataClient.idsToFilterExpression(filter),
            metadata_fields: VectorIndexDataClient.buildMetadataRequest({
                metadataFields: sdk_core_1.ALL_VECTOR_METADATA,
            }),
        });
        return await new Promise((resolve, reject) => {
            this.client.GetItemBatch(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorGetItemBatch.Success(resp.item_response.reduce((acc, itemResponse) => {
                        acc[itemResponse.id] = {
                            id: itemResponse.id,
                            vector: itemResponse.vector.elements,
                            metadata: VectorIndexDataClient.deserializeMetadata(itemResponse.metadata, () => resolve(new sdk_core_1.VectorGetItemBatch.Error(new errors_1.UnknownError('GetItemBatch responded with an unknown result')))),
                        };
                        return acc;
                    }, {})));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorGetItemBatch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async getItemMetadataBatch(indexName, filter) {
        try {
            (0, utils_1.validateIndexName)(indexName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorGetItemMetadataBatch.Error(err));
        }
        return await this.sendGetItemMetadataBatch(indexName, filter);
    }
    async sendGetItemMetadataBatch(indexName, filter) {
        const request = new vectorindex_1.vectorindex._GetItemMetadataBatchRequest({
            index_name: indexName,
            filter: VectorIndexDataClient.idsToFilterExpression(filter),
            metadata_fields: VectorIndexDataClient.buildMetadataRequest({
                metadataFields: sdk_core_1.ALL_VECTOR_METADATA,
            }),
        });
        return await new Promise((resolve, reject) => {
            this.client.GetItemMetadataBatch(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorGetItemMetadataBatch.Success(resp.item_metadata_response.reduce((acc, itemResponse) => {
                        acc[itemResponse.id] =
                            VectorIndexDataClient.deserializeMetadata(itemResponse.metadata, () => resolve(new sdk_core_1.VectorGetItemMetadataBatch.Error(new errors_1.UnknownError('GetItemMetadataBatch responded with an unknown result'))));
                        return acc;
                    }, {})));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorGetItemMetadataBatch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new sdk_core_1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    initializeInterceptors(_loggerFactory) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        return [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(this.requestTimeoutMs),
        ];
    }
}
exports.VectorIndexDataClient = VectorIndexDataClient;
//# sourceMappingURL=data:application/json;base64,