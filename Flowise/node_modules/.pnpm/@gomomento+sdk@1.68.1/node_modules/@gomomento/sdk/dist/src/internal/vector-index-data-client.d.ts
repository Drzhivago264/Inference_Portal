import { IVectorIndexDataClient } from '@gomomento/sdk-core/dist/src/internal/clients/vector/IVectorIndexDataClient';
import { SearchOptions, VectorCountItems, VectorDeleteItemBatch, VectorFilterExpression, VectorGetItemBatch, VectorGetItemMetadataBatch, VectorIndexItem, VectorSearch, VectorSearchAndFetchVectors, VectorUpsertItemBatch } from '@gomomento/sdk-core';
import { VectorIndexClientPropsWithConfig } from './vector-index-client-props-with-config';
export declare class VectorIndexDataClient implements IVectorIndexDataClient {
    private readonly configuration;
    private readonly credentialProvider;
    private readonly logger;
    private readonly cacheServiceErrorMapper;
    private readonly requestTimeoutMs;
    private readonly client;
    private readonly interceptors;
    constructor(props: VectorIndexClientPropsWithConfig);
    countItems(indexName: string): Promise<VectorCountItems.Response>;
    private sendCountItems;
    upsertItemBatch(indexName: string, items: Array<VectorIndexItem>): Promise<VectorUpsertItemBatch.Response>;
    private static buildUpsertItemBatchRequest;
    private static convertItemMetadataToProtobufMetadata;
    private sendUpsertItemBatch;
    deleteItemBatch(indexName: string, filter: VectorFilterExpression | Array<string>): Promise<VectorDeleteItemBatch.Response>;
    private sendDeleteItemBatch;
    search(indexName: string, queryVector: Array<number>, options?: SearchOptions): Promise<VectorSearch.Response>;
    private static buildMetadataRequest;
    private static applyScoreThreshold;
    private static buildFilterExpression;
    /**
     * Convert a list of ids to a filter expression that matches the ids.
     * @param ids
     * @private
     */
    private static idsToFilterExpression;
    private static deserializeMetadata;
    private sendSearch;
    searchAndFetchVectors(indexName: string, queryVector: Array<number>, options?: SearchOptions): Promise<VectorSearchAndFetchVectors.Response>;
    private sendSearchAndFetchVectors;
    getItemBatch(indexName: string, filter: string[]): Promise<VectorGetItemBatch.Response>;
    private sendGetItemBatch;
    getItemMetadataBatch(indexName: string, filter: string[]): Promise<VectorGetItemMetadataBatch.Response>;
    private sendGetItemMetadataBatch;
    private validateRequestTimeout;
    private initializeInterceptors;
}
