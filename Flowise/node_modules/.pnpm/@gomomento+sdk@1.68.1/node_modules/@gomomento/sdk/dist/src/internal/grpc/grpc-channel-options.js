"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.grpcChannelOptionsFromGrpcConfig = void 0;
// The default value for max_send_message_length is 4mb.  We need to increase this to 5mb in order to
// support cases where users have requested a limit increase up to our maximum item size of 5mb.
const DEFAULT_MAX_REQUEST_SIZE = 5243000;
function grpcChannelOptionsFromGrpcConfig(grpcConfig) {
    var _a, _b;
    return {
        // default value for max session memory is 10mb.  Under high load, it is easy to exceed this,
        // after which point all requests will fail with a client-side RESOURCE_EXHAUSTED exception.
        'grpc-node.max_session_memory': grpcConfig.getMaxSessionMemoryMb(),
        // This flag controls whether channels use a shared global pool of subchannels, or whether
        // each channel gets its own subchannel pool.  The default value is 0, meaning a single global
        // pool.  Setting it to 1 provides significant performance improvements when we instantiate more
        // than one grpc client.
        'grpc.use_local_subchannel_pool': 1,
        // The default value for max_send_message_length is 4mb.  We need to increase this to 5mb in order to
        // support cases where users have requested a limit increase up to our maximum item size of 5mb.
        'grpc.max_send_message_length': (_a = grpcConfig.getMaxSendMessageLength()) !== null && _a !== void 0 ? _a : DEFAULT_MAX_REQUEST_SIZE,
        'grpc.max_receive_message_length': (_b = grpcConfig.getMaxReceiveMessageLength()) !== null && _b !== void 0 ? _b : DEFAULT_MAX_REQUEST_SIZE,
        // NOTE: keep-alives are very important for long-lived server environments where there may be periods of time
        // when the connection is idle. However, they are very problematic for lambda environments where the lambda
        // runtime is continuously frozen and unfrozen, because the lambda may be frozen before the "ACK" is received
        // from the server. This can cause the keep-alive to timeout even though the connection is completely healthy.
        // Therefore, keep-alives should be disabled in lambda and similar environments.
        'grpc.keepalive_permit_without_calls': grpcConfig.getKeepAlivePermitWithoutCalls(),
        'grpc.keepalive_time_ms': grpcConfig.getKeepAliveTimeMS(),
        'grpc.keepalive_timeout_ms': grpcConfig.getKeepAliveTimeoutMS(),
    };
}
exports.grpcChannelOptionsFromGrpcConfig = grpcChannelOptionsFromGrpcConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JwYy1jaGFubmVsLW9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJuYWwvZ3JwYy9ncnBjLWNoYW5uZWwtb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxxR0FBcUc7QUFDckcsZ0dBQWdHO0FBQ2hHLE1BQU0sd0JBQXdCLEdBQUcsT0FBUyxDQUFDO0FBRTNDLFNBQWdCLGdDQUFnQyxDQUM5QyxVQUE2Qjs7SUFFN0IsT0FBTztRQUNMLDZGQUE2RjtRQUM3Riw0RkFBNEY7UUFDNUYsOEJBQThCLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixFQUFFO1FBRWxFLDBGQUEwRjtRQUMxRiw4RkFBOEY7UUFDOUYsZ0dBQWdHO1FBQ2hHLHdCQUF3QjtRQUN4QixnQ0FBZ0MsRUFBRSxDQUFDO1FBRW5DLHFHQUFxRztRQUNyRyxnR0FBZ0c7UUFDaEcsOEJBQThCLEVBQzVCLE1BQUEsVUFBVSxDQUFDLHVCQUF1QixFQUFFLG1DQUFJLHdCQUF3QjtRQUNsRSxpQ0FBaUMsRUFDL0IsTUFBQSxVQUFVLENBQUMsMEJBQTBCLEVBQUUsbUNBQUksd0JBQXdCO1FBRXJFLDZHQUE2RztRQUM3RywyR0FBMkc7UUFDM0csNkdBQTZHO1FBQzdHLDhHQUE4RztRQUM5RyxnRkFBZ0Y7UUFDaEYscUNBQXFDLEVBQ25DLFVBQVUsQ0FBQyw4QkFBOEIsRUFBRTtRQUM3Qyx3QkFBd0IsRUFBRSxVQUFVLENBQUMsa0JBQWtCLEVBQUU7UUFDekQsMkJBQTJCLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixFQUFFO0tBQ2hFLENBQUM7QUFDSixDQUFDO0FBL0JELDRFQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R3JwY0NvbmZpZ3VyYXRpb259IGZyb20gJy4uLy4uL2NvbmZpZy90cmFuc3BvcnQnO1xuaW1wb3J0IHtDaGFubmVsT3B0aW9uc30gZnJvbSAnQGdycGMvZ3JwYy1qcyc7XG5cbi8vIFRoZSBkZWZhdWx0IHZhbHVlIGZvciBtYXhfc2VuZF9tZXNzYWdlX2xlbmd0aCBpcyA0bWIuICBXZSBuZWVkIHRvIGluY3JlYXNlIHRoaXMgdG8gNW1iIGluIG9yZGVyIHRvXG4vLyBzdXBwb3J0IGNhc2VzIHdoZXJlIHVzZXJzIGhhdmUgcmVxdWVzdGVkIGEgbGltaXQgaW5jcmVhc2UgdXAgdG8gb3VyIG1heGltdW0gaXRlbSBzaXplIG9mIDVtYi5cbmNvbnN0IERFRkFVTFRfTUFYX1JFUVVFU1RfU0laRSA9IDVfMjQzXzAwMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdycGNDaGFubmVsT3B0aW9uc0Zyb21HcnBjQ29uZmlnKFxuICBncnBjQ29uZmlnOiBHcnBjQ29uZmlndXJhdGlvblxuKTogQ2hhbm5lbE9wdGlvbnMge1xuICByZXR1cm4ge1xuICAgIC8vIGRlZmF1bHQgdmFsdWUgZm9yIG1heCBzZXNzaW9uIG1lbW9yeSBpcyAxMG1iLiAgVW5kZXIgaGlnaCBsb2FkLCBpdCBpcyBlYXN5IHRvIGV4Y2VlZCB0aGlzLFxuICAgIC8vIGFmdGVyIHdoaWNoIHBvaW50IGFsbCByZXF1ZXN0cyB3aWxsIGZhaWwgd2l0aCBhIGNsaWVudC1zaWRlIFJFU09VUkNFX0VYSEFVU1RFRCBleGNlcHRpb24uXG4gICAgJ2dycGMtbm9kZS5tYXhfc2Vzc2lvbl9tZW1vcnknOiBncnBjQ29uZmlnLmdldE1heFNlc3Npb25NZW1vcnlNYigpLFxuXG4gICAgLy8gVGhpcyBmbGFnIGNvbnRyb2xzIHdoZXRoZXIgY2hhbm5lbHMgdXNlIGEgc2hhcmVkIGdsb2JhbCBwb29sIG9mIHN1YmNoYW5uZWxzLCBvciB3aGV0aGVyXG4gICAgLy8gZWFjaCBjaGFubmVsIGdldHMgaXRzIG93biBzdWJjaGFubmVsIHBvb2wuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAwLCBtZWFuaW5nIGEgc2luZ2xlIGdsb2JhbFxuICAgIC8vIHBvb2wuICBTZXR0aW5nIGl0IHRvIDEgcHJvdmlkZXMgc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIHdoZW4gd2UgaW5zdGFudGlhdGUgbW9yZVxuICAgIC8vIHRoYW4gb25lIGdycGMgY2xpZW50LlxuICAgICdncnBjLnVzZV9sb2NhbF9zdWJjaGFubmVsX3Bvb2wnOiAxLFxuXG4gICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgZm9yIG1heF9zZW5kX21lc3NhZ2VfbGVuZ3RoIGlzIDRtYi4gIFdlIG5lZWQgdG8gaW5jcmVhc2UgdGhpcyB0byA1bWIgaW4gb3JkZXIgdG9cbiAgICAvLyBzdXBwb3J0IGNhc2VzIHdoZXJlIHVzZXJzIGhhdmUgcmVxdWVzdGVkIGEgbGltaXQgaW5jcmVhc2UgdXAgdG8gb3VyIG1heGltdW0gaXRlbSBzaXplIG9mIDVtYi5cbiAgICAnZ3JwYy5tYXhfc2VuZF9tZXNzYWdlX2xlbmd0aCc6XG4gICAgICBncnBjQ29uZmlnLmdldE1heFNlbmRNZXNzYWdlTGVuZ3RoKCkgPz8gREVGQVVMVF9NQVhfUkVRVUVTVF9TSVpFLFxuICAgICdncnBjLm1heF9yZWNlaXZlX21lc3NhZ2VfbGVuZ3RoJzpcbiAgICAgIGdycGNDb25maWcuZ2V0TWF4UmVjZWl2ZU1lc3NhZ2VMZW5ndGgoKSA/PyBERUZBVUxUX01BWF9SRVFVRVNUX1NJWkUsXG5cbiAgICAvLyBOT1RFOiBrZWVwLWFsaXZlcyBhcmUgdmVyeSBpbXBvcnRhbnQgZm9yIGxvbmctbGl2ZWQgc2VydmVyIGVudmlyb25tZW50cyB3aGVyZSB0aGVyZSBtYXkgYmUgcGVyaW9kcyBvZiB0aW1lXG4gICAgLy8gd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBpZGxlLiBIb3dldmVyLCB0aGV5IGFyZSB2ZXJ5IHByb2JsZW1hdGljIGZvciBsYW1iZGEgZW52aXJvbm1lbnRzIHdoZXJlIHRoZSBsYW1iZGFcbiAgICAvLyBydW50aW1lIGlzIGNvbnRpbnVvdXNseSBmcm96ZW4gYW5kIHVuZnJvemVuLCBiZWNhdXNlIHRoZSBsYW1iZGEgbWF5IGJlIGZyb3plbiBiZWZvcmUgdGhlIFwiQUNLXCIgaXMgcmVjZWl2ZWRcbiAgICAvLyBmcm9tIHRoZSBzZXJ2ZXIuIFRoaXMgY2FuIGNhdXNlIHRoZSBrZWVwLWFsaXZlIHRvIHRpbWVvdXQgZXZlbiB0aG91Z2ggdGhlIGNvbm5lY3Rpb24gaXMgY29tcGxldGVseSBoZWFsdGh5LlxuICAgIC8vIFRoZXJlZm9yZSwga2VlcC1hbGl2ZXMgc2hvdWxkIGJlIGRpc2FibGVkIGluIGxhbWJkYSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMuXG4gICAgJ2dycGMua2VlcGFsaXZlX3Blcm1pdF93aXRob3V0X2NhbGxzJzpcbiAgICAgIGdycGNDb25maWcuZ2V0S2VlcEFsaXZlUGVybWl0V2l0aG91dENhbGxzKCksXG4gICAgJ2dycGMua2VlcGFsaXZlX3RpbWVfbXMnOiBncnBjQ29uZmlnLmdldEtlZXBBbGl2ZVRpbWVNUygpLFxuICAgICdncnBjLmtlZXBhbGl2ZV90aW1lb3V0X21zJzogZ3JwY0NvbmZpZy5nZXRLZWVwQWxpdmVUaW1lb3V0TVMoKSxcbiAgfTtcbn1cbiJdfQ==