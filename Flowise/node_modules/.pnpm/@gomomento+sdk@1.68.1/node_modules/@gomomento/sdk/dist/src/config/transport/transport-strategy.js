"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticTransportStrategy = exports.StaticGrpcConfiguration = void 0;
class StaticGrpcConfiguration {
    constructor(props) {
        this.deadlineMillis = props.deadlineMillis;
        this.maxSessionMemoryMb = props.maxSessionMemoryMb;
        if (props.numClients !== undefined && props.numClients !== null) {
            this.numClients = props.numClients;
        }
        else {
            // This is the previously hardcoded value and a safe default for most environments.
            this.numClients = 6;
        }
        this.keepAliveTimeMs = props.keepAliveTimeMs;
        this.keepAliveTimeoutMs = props.keepAliveTimeoutMs;
        this.keepAlivePermitWithoutCalls = props.keepAlivePermitWithoutCalls;
        this.maxSendMessageLength = props.maxSendMessageLength;
        this.maxReceiveMessageLength = props.maxReceiveMessageLength;
    }
    getDeadlineMillis() {
        return this.deadlineMillis;
    }
    getMaxSessionMemoryMb() {
        return this.maxSessionMemoryMb;
    }
    getKeepAliveTimeoutMS() {
        return this.keepAliveTimeoutMs;
    }
    getKeepAliveTimeMS() {
        return this.keepAliveTimeMs;
    }
    getKeepAlivePermitWithoutCalls() {
        return this.keepAlivePermitWithoutCalls;
    }
    withDeadlineMillis(deadlineMillis) {
        return new StaticGrpcConfiguration({
            deadlineMillis: deadlineMillis,
            maxSessionMemoryMb: this.maxSessionMemoryMb,
            numClients: this.numClients,
        });
    }
    withMaxSessionMemoryMb(maxSessionMemoryMb) {
        return new StaticGrpcConfiguration({
            deadlineMillis: this.deadlineMillis,
            maxSessionMemoryMb: maxSessionMemoryMb,
            numClients: this.numClients,
        });
    }
    getMaxSendMessageLength() {
        return this.maxSendMessageLength;
    }
    getMaxReceiveMessageLength() {
        return this.maxReceiveMessageLength;
    }
    getNumClients() {
        return this.numClients;
    }
    withNumClients(numClients) {
        return new StaticGrpcConfiguration({
            deadlineMillis: this.deadlineMillis,
            maxSessionMemoryMb: this.maxSessionMemoryMb,
            numClients: numClients,
        });
    }
}
exports.StaticGrpcConfiguration = StaticGrpcConfiguration;
class StaticTransportStrategy {
    constructor(props) {
        this.grpcConfig = props.grpcConfiguration;
        this.maxIdleMillis = props.maxIdleMillis;
        this.maxClientAgeMillis = props.maxClientAgeMillis;
    }
    getGrpcConfig() {
        return this.grpcConfig;
    }
    getMaxClientAgeMillis() {
        return this.maxClientAgeMillis;
    }
    withGrpcConfig(grpcConfig) {
        return new StaticTransportStrategy({
            grpcConfiguration: grpcConfig,
            maxIdleMillis: this.maxIdleMillis,
            maxClientAgeMillis: this.maxClientAgeMillis,
        });
    }
    getMaxIdleMillis() {
        return this.maxIdleMillis;
    }
    withMaxIdleMillis(maxIdleMillis) {
        return new StaticTransportStrategy({
            grpcConfiguration: this.grpcConfig,
            maxIdleMillis: maxIdleMillis,
            maxClientAgeMillis: this.maxClientAgeMillis,
        });
    }
    withMaxClientAgeMillis(maxClientAgeMillis) {
        return new StaticTransportStrategy({
            grpcConfiguration: this.grpcConfig,
            maxIdleMillis: this.maxIdleMillis,
            maxClientAgeMillis: maxClientAgeMillis,
        });
    }
    withClientTimeoutMillis(clientTimeout) {
        return new StaticTransportStrategy({
            grpcConfiguration: this.grpcConfig.withDeadlineMillis(clientTimeout),
            maxIdleMillis: this.maxIdleMillis,
        });
    }
}
exports.StaticTransportStrategy = StaticTransportStrategy;
//# sourceMappingURL=data:application/json;base64,