"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeaderboardDataClient = exports.CONNECTION_ID_KEY = void 0;
const sdk_core_1 = require("@gomomento/sdk-core");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const leaderboard_1 = require("@gomomento/generated-types/dist/leaderboard");
var _Element = leaderboard_1.leaderboard._Element;
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const middlewares_interceptor_1 = require("./grpc/middlewares-interceptor");
const grpc_channel_options_1 = require("./grpc/grpc-channel-options");
exports.CONNECTION_ID_KEY = Symbol('connectionID');
class LeaderboardDataClient {
    /**
     * @param {LeaderboardClientPropsWithConfig} props
     * @param dataClientID
     */
    constructor(props, dataClientID) {
        this.configuration = props.configuration;
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        const grpcConfig = this.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        this.requestTimeoutMs = grpcConfig.getDeadlineMillis();
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating leaderboard client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        const numDataClients = grpcConfig.getNumClients();
        // We round-robin the requests through all of our clients.  Since javascript
        // is single-threaded, we don't have to worry about thread safety on this
        // index variable.
        this.nextDataClientIndex = 0;
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.clientWrappers = (0, utils_1.range)(numDataClients).map(() => new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new leaderboard_1.leaderboard.LeaderboardClient(this.credentialProvider.getCacheEndpoint(), grpc_js_1.ChannelCredentials.createSsl(), channelOptions),
            loggerFactory: this.configuration.getLoggerFactory(),
            maxIdleMillis: this.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
        }));
        const context = {};
        context[exports.CONNECTION_ID_KEY] = dataClientID;
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory(), this.configuration.getMiddlewares(), context);
    }
    close() {
        this.logger.debug('Closing leaderboard data clients');
        this.clientWrappers.map(wrapper => wrapper.getClient().close());
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new sdk_core_1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    initializeInterceptors(_loggerFactory, middlewares, middlewareRequestContext) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        return [
            (0, middlewares_interceptor_1.middlewaresInterceptor)(_loggerFactory, middlewares, middlewareRequestContext),
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(this.requestTimeoutMs),
        ];
    }
    createMetadata(cacheName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('cache', cacheName);
        return metadata;
    }
    convertMapOrRecordToElementsList(elements) {
        const convertedElements = [];
        if (elements instanceof Map) {
            elements.forEach((score, id) => convertedElements.push(new _Element({ id: id, score: score })));
        }
        else {
            Object.entries(elements).forEach(element => convertedElements.push(new _Element({ id: Number(element[0]), score: element[1] })));
        }
        return convertedElements;
    }
    async upsert(cacheName, leaderboardName, elements) {
        const size = elements instanceof Map ? elements.size : Object.keys(elements).length;
        try {
            (0, utils_1.validateLeaderboardNumberOfElements)(size);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.LeaderboardUpsert.Error(err));
        }
        this.logger.trace(`Issuing 'upsert' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, number of elements: ${size}`);
        return await this.sendUpsert(cacheName, leaderboardName, elements);
    }
    async sendUpsert(cacheName, leaderboardName, elements) {
        const request = new leaderboard_1.leaderboard._UpsertElementsRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            elements: this.convertMapOrRecordToElementsList(elements),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.getNextDataClient().UpsertElements(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.LeaderboardUpsert.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.LeaderboardUpsert.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async fetchByScore(cacheName, leaderboardName, minScore, maxScore, order, offset, count) {
        var _a;
        const offsetValue = offset === undefined ? 0 : offset;
        const countValue = count === undefined ? 8192 : count;
        const orderValue = order !== null && order !== void 0 ? order : sdk_core_1.LeaderboardOrder.Ascending;
        try {
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
            (0, utils_1.validateLeaderboardOffset)(offsetValue);
            (0, utils_1.validateLeaderboardCount)(countValue);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.LeaderboardFetch.Error(err));
        }
        this.logger.trace(`Issuing 'fetchByScore' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, order: ${orderValue.toString()}, minScore: ${minScore !== null && minScore !== void 0 ? minScore : 'null'}, maxScore: ${(_a = maxScore === null || maxScore === void 0 ? void 0 : maxScore.toString()) !== null && _a !== void 0 ? _a : 'null'}, offset: ${offsetValue.toString()}, count: ${countValue.toString()}`);
        return await this.sendFetchByScore(cacheName, leaderboardName, orderValue, offsetValue, countValue, minScore, maxScore);
    }
    async sendFetchByScore(cacheName, leaderboardName, order, offset, count, minScore, maxScore) {
        const protoBufOrder = order === sdk_core_1.LeaderboardOrder.Descending
            ? leaderboard_1.leaderboard._Order.DESCENDING
            : leaderboard_1.leaderboard._Order.ASCENDING;
        const protoBufScoreRange = new leaderboard_1.leaderboard._ScoreRange();
        if (minScore !== undefined) {
            protoBufScoreRange.min_inclusive = minScore;
        }
        else {
            protoBufScoreRange.unbounded_min = new leaderboard_1.leaderboard._Unbounded();
        }
        if (maxScore !== undefined) {
            protoBufScoreRange.max_exclusive = maxScore;
        }
        else {
            protoBufScoreRange.unbounded_max = new leaderboard_1.leaderboard._Unbounded();
        }
        const request = new leaderboard_1.leaderboard._GetByScoreRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            score_range: protoBufScoreRange,
            order: protoBufOrder,
            offset: offset,
            limit_elements: count,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.getNextDataClient().GetByScore(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    const foundElements = resp
                        .elements;
                    resolve(new sdk_core_1.LeaderboardFetch.Success(foundElements));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.LeaderboardFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async fetchByRank(cacheName, leaderboardName, startRank, endRank, order) {
        const rankOrder = order !== null && order !== void 0 ? order : sdk_core_1.LeaderboardOrder.Ascending;
        try {
            (0, utils_1.validateLeaderboardRanks)(startRank, endRank);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.LeaderboardFetch.Error(err));
        }
        this.logger.trace(`Issuing 'fetchByRank' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, order: ${rankOrder.toString()}, startRank: ${startRank}, endRank: ${endRank}`);
        return await this.sendFetchByRank(cacheName, leaderboardName, startRank, endRank, rankOrder);
    }
    async sendFetchByRank(cacheName, leaderboardName, startRank, endRank, order) {
        const protoBufOrder = order === sdk_core_1.LeaderboardOrder.Descending
            ? leaderboard_1.leaderboard._Order.DESCENDING
            : leaderboard_1.leaderboard._Order.ASCENDING;
        const protoBufRankRange = new leaderboard_1.leaderboard._RankRange({
            start_inclusive: startRank,
            end_exclusive: endRank,
        });
        const request = new leaderboard_1.leaderboard._GetByRankRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            rank_range: protoBufRankRange,
            order: protoBufOrder,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.getNextDataClient().GetByRank(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    const foundElements = resp
                        .elements;
                    resolve(new sdk_core_1.LeaderboardFetch.Success(foundElements));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.LeaderboardFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async getRank(cacheName, leaderboardName, ids, order) {
        const orderValue = order !== null && order !== void 0 ? order : sdk_core_1.LeaderboardOrder.Ascending;
        this.logger.trace(`Issuing 'getRank' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, order: ${orderValue.toString()}, number of ids: ${ids.length}`);
        return await this.sendGetRank(cacheName, leaderboardName, ids, orderValue);
    }
    async sendGetRank(cacheName, leaderboardName, ids, order) {
        const protoBufOrder = order === sdk_core_1.LeaderboardOrder.Descending
            ? leaderboard_1.leaderboard._Order.DESCENDING
            : leaderboard_1.leaderboard._Order.ASCENDING;
        const request = new leaderboard_1.leaderboard._GetRankRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            ids: ids,
            order: protoBufOrder,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.getNextDataClient().GetRank(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    const foundElements = resp
                        .elements;
                    resolve(new sdk_core_1.LeaderboardFetch.Success(foundElements));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.LeaderboardFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async length(cacheName, leaderboardName) {
        this.logger.trace(`Issuing 'length' request; cache: ${cacheName}, leaderboard: ${leaderboardName}`);
        return await this.sendLength(cacheName, leaderboardName);
    }
    async sendLength(cacheName, leaderboardName) {
        const request = new leaderboard_1.leaderboard._GetLeaderboardLengthRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.getNextDataClient().GetLeaderboardLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    const length = resp
                        .count;
                    resolve(new sdk_core_1.LeaderboardLength.Success(length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.LeaderboardLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async removeElements(cacheName, leaderboardName, ids) {
        try {
            (0, utils_1.validateLeaderboardNumberOfElements)(ids.length);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.LeaderboardRemoveElements.Error(err));
        }
        this.logger.trace(`Issuing 'removeElements' request; cache: ${cacheName}, leaderboard: ${leaderboardName}, number of elements: ${ids.length.toString()}`);
        return await this.sendRemoveElements(cacheName, leaderboardName, ids);
    }
    async sendRemoveElements(cacheName, leaderboardName, ids) {
        const request = new leaderboard_1.leaderboard._RemoveElementsRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
            ids: ids,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.getNextDataClient().RemoveElements(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.LeaderboardRemoveElements.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.LeaderboardRemoveElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async delete(cacheName, leaderboardName) {
        this.logger.trace(`Issuing 'delete' request; cache: ${cacheName}, leaderboard: ${leaderboardName}`);
        return await this.sendDelete(cacheName, leaderboardName);
    }
    async sendDelete(cacheName, leaderboardName) {
        const request = new leaderboard_1.leaderboard._DeleteLeaderboardRequest({
            cache_name: cacheName,
            leaderboard: leaderboardName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.getNextDataClient().DeleteLeaderboard(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.LeaderboardDelete.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.LeaderboardDelete.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    getNextDataClient() {
        const clientWrapper = this.clientWrappers[this.nextDataClientIndex];
        this.nextDataClientIndex =
            (this.nextDataClientIndex + 1) % this.clientWrappers.length;
        return clientWrapper.getClient();
    }
}
exports.LeaderboardDataClient = LeaderboardDataClient;
//# sourceMappingURL=data:application/json;base64,