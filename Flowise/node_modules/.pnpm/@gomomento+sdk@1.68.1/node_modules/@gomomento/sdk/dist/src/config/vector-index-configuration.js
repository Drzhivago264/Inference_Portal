"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorIndexClientConfiguration = void 0;
class VectorIndexClientConfiguration {
    constructor(props) {
        this.loggerFactory = props.loggerFactory;
        this.transportStrategy = props.transportStrategy;
        this.throwOnErrors = props.throwOnErrors;
    }
    getLoggerFactory() {
        return this.loggerFactory;
    }
    getTransportStrategy() {
        return this.transportStrategy;
    }
    withClientTimeoutMillis(clientTimeoutMillis) {
        return new VectorIndexClientConfiguration({
            loggerFactory: this.loggerFactory,
            transportStrategy: this.transportStrategy.withClientTimeoutMillis(clientTimeoutMillis),
            throwOnErrors: this.throwOnErrors,
        });
    }
    withTransportStrategy(transportStrategy) {
        return new VectorIndexClientConfiguration({
            loggerFactory: this.loggerFactory,
            transportStrategy: transportStrategy,
            throwOnErrors: this.throwOnErrors,
        });
    }
    getThrowOnErrors() {
        return this.throwOnErrors;
    }
    withThrowOnErrors(throwOnErrors) {
        return new VectorIndexClientConfiguration({
            loggerFactory: this.loggerFactory,
            transportStrategy: this.transportStrategy,
            throwOnErrors: throwOnErrors,
        });
    }
}
exports.VectorIndexClientConfiguration = VectorIndexClientConfiguration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yLWluZGV4LWNvbmZpZ3VyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29uZmlnL3ZlY3Rvci1pbmRleC1jb25maWd1cmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQTZEQSxNQUFhLDhCQUE4QjtJQU96QyxZQUFZLEtBQW9DO1FBQzlDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN6QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDO1FBQ2pELElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztJQUMzQyxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFRCxvQkFBb0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQztJQUVELHVCQUF1QixDQUNyQixtQkFBMkI7UUFFM0IsT0FBTyxJQUFJLDhCQUE4QixDQUFDO1lBQ3hDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtZQUNqQyxpQkFBaUIsRUFDZixJQUFJLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsbUJBQW1CLENBQUM7WUFDckUsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1NBQ2xDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxxQkFBcUIsQ0FDbkIsaUJBQW9DO1FBRXBDLE9BQU8sSUFBSSw4QkFBOEIsQ0FBQztZQUN4QyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsaUJBQWlCLEVBQUUsaUJBQWlCO1lBQ3BDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUNsQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxhQUFzQjtRQUN0QyxPQUFPLElBQUksOEJBQThCLENBQUM7WUFDeEMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7WUFDekMsYUFBYSxFQUFFLGFBQWE7U0FDN0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBckRELHdFQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9tZW50b0xvZ2dlckZhY3Rvcnl9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUnO1xuaW1wb3J0IHtUcmFuc3BvcnRTdHJhdGVneX0gZnJvbSAnLi90cmFuc3BvcnQnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgTW9tZW50byBWZWN0b3JJbmRleENsaWVudFxuICpcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVmVjdG9ySW5kZXhDb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9ySW5kZXhDb25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIEByZXR1cm5zIHtNb21lbnRvTG9nZ2VyRmFjdG9yeX0gdGhlIGN1cnJlbnQgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBsb2dnaW5nIHZlcmJvc2l0eSBhbmQgZm9ybWF0XG4gICAqL1xuICBnZXRMb2dnZXJGYWN0b3J5KCk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0U3RyYXRlZ3l9IHRoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3Igd2lyZSBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgTW9tZW50byBzZXJ2aWNlXG4gICAqL1xuICBnZXRUcmFuc3BvcnRTdHJhdGVneSgpOiBUcmFuc3BvcnRTdHJhdGVneTtcblxuICAvKipcbiAgICogQ29weSBjb25zdHJ1Y3RvciBmb3Igb3ZlcnJpZGluZyBUcmFuc3BvcnRTdHJhdGVneVxuICAgKiBAcGFyYW0ge1RyYW5zcG9ydFN0cmF0ZWd5fSB0cmFuc3BvcnRTdHJhdGVneVxuICAgKiBAcmV0dXJucyB7Q29uZmlndXJhdGlvbn0gYSBuZXcgQ29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIFRyYW5zcG9ydFN0cmF0ZWd5XG4gICAqL1xuICB3aXRoVHJhbnNwb3J0U3RyYXRlZ3koXG4gICAgdHJhbnNwb3J0U3RyYXRlZ3k6IFRyYW5zcG9ydFN0cmF0ZWd5XG4gICk6IFZlY3RvckluZGV4Q29uZmlndXJhdGlvbjtcblxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59IENvbmZpZ3VyZXMgd2hldGhlciB0aGUgY2xpZW50IHNob3VsZCByZXR1cm4gYSBNb21lbnRvIEVycm9yIG9iamVjdCBvciB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhblxuICAgKiBlcnJvciBvY2N1cnMuIEJ5IGRlZmF1bHQsIHRoaXMgaXMgc2V0IHRvIGZhbHNlLCBhbmQgdGhlIGNsaWVudCB3aWxsIHJldHVybiBhIE1vbWVudG8gRXJyb3Igb2JqZWN0IG9uIGVycm9ycy4gU2V0IGl0XG4gICAqIHRvIHRydWUgaWYgeW91IHByZWZlciBmb3IgZXhjZXB0aW9ucyB0byBiZSB0aHJvd24uXG4gICAqL1xuICBnZXRUaHJvd09uRXJyb3JzKCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIENvcHkgY29uc3RydWN0b3IgZm9yIGNvbmZpZ3VyaW5nIHdoZXRoZXIgdGhlIGNsaWVudCBzaG91bGQgcmV0dXJuIGEgTW9tZW50byBFcnJvciBvYmplY3Qgb3IgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gYW5cbiAgICogZXJyb3Igb2NjdXJzLiBCeSBkZWZhdWx0LCB0aGlzIGlzIHNldCB0byBmYWxzZSwgYW5kIHRoZSBjbGllbnQgd2lsbCByZXR1cm4gYSBNb21lbnRvIEVycm9yIG9iamVjdCBvbiBlcnJvcnMuIFNldCBpdFxuICAgKiB0byB0cnVlIGlmIHlvdSBwcmVmZXIgZm9yIGV4Y2VwdGlvbnMgdG8gYmUgdGhyb3duLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRocm93T25FcnJvcnNcbiAgICogQHJldHVybnMge0NvbmZpZ3VyYXRpb259IGEgbmV3IENvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCB0aHJvd09uRXJyb3JzIHNldHRpbmdcbiAgICovXG4gIHdpdGhUaHJvd09uRXJyb3JzKHRocm93T25FcnJvcnM6IGJvb2xlYW4pOiBWZWN0b3JJbmRleENvbmZpZ3VyYXRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9ySW5kZXhDb25maWd1cmF0aW9uUHJvcHMge1xuICAvKipcbiAgICogQ29uZmlndXJlcyBsb2dnaW5nIHZlcmJvc2l0eSBhbmQgZm9ybWF0XG4gICAqL1xuICBsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeTtcbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgbG93LWxldmVsIG9wdGlvbnMgZm9yIG5ldHdvcmsgaW50ZXJhY3Rpb25zIHdpdGggdGhlIE1vbWVudG8gc2VydmljZVxuICAgKi9cbiAgdHJhbnNwb3J0U3RyYXRlZ3k6IFRyYW5zcG9ydFN0cmF0ZWd5O1xuICAvKipcbiAgICogQ29uZmlndXJlcyB3aGV0aGVyIHRoZSBjbGllbnQgc2hvdWxkIHJldHVybiBhIE1vbWVudG8gRXJyb3Igb2JqZWN0IG9yIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIGFuIGVycm9yIG9jY3Vycy5cbiAgICovXG4gIHRocm93T25FcnJvcnM6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBWZWN0b3JJbmRleENsaWVudENvbmZpZ3VyYXRpb25cbiAgaW1wbGVtZW50cyBWZWN0b3JJbmRleENvbmZpZ3VyYXRpb25cbntcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeTtcbiAgcHJpdmF0ZSByZWFkb25seSB0cmFuc3BvcnRTdHJhdGVneTogVHJhbnNwb3J0U3RyYXRlZ3k7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGhyb3dPbkVycm9yczogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogVmVjdG9ySW5kZXhDb25maWd1cmF0aW9uUHJvcHMpIHtcbiAgICB0aGlzLmxvZ2dlckZhY3RvcnkgPSBwcm9wcy5sb2dnZXJGYWN0b3J5O1xuICAgIHRoaXMudHJhbnNwb3J0U3RyYXRlZ3kgPSBwcm9wcy50cmFuc3BvcnRTdHJhdGVneTtcbiAgICB0aGlzLnRocm93T25FcnJvcnMgPSBwcm9wcy50aHJvd09uRXJyb3JzO1xuICB9XG5cbiAgZ2V0TG9nZ2VyRmFjdG9yeSgpOiBNb21lbnRvTG9nZ2VyRmFjdG9yeSB7XG4gICAgcmV0dXJuIHRoaXMubG9nZ2VyRmFjdG9yeTtcbiAgfVxuXG4gIGdldFRyYW5zcG9ydFN0cmF0ZWd5KCk6IFRyYW5zcG9ydFN0cmF0ZWd5IHtcbiAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRTdHJhdGVneTtcbiAgfVxuXG4gIHdpdGhDbGllbnRUaW1lb3V0TWlsbGlzKFxuICAgIGNsaWVudFRpbWVvdXRNaWxsaXM6IG51bWJlclxuICApOiBWZWN0b3JJbmRleENvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBuZXcgVmVjdG9ySW5kZXhDbGllbnRDb25maWd1cmF0aW9uKHtcbiAgICAgIGxvZ2dlckZhY3Rvcnk6IHRoaXMubG9nZ2VyRmFjdG9yeSxcbiAgICAgIHRyYW5zcG9ydFN0cmF0ZWd5OlxuICAgICAgICB0aGlzLnRyYW5zcG9ydFN0cmF0ZWd5LndpdGhDbGllbnRUaW1lb3V0TWlsbGlzKGNsaWVudFRpbWVvdXRNaWxsaXMpLFxuICAgICAgdGhyb3dPbkVycm9yczogdGhpcy50aHJvd09uRXJyb3JzLFxuICAgIH0pO1xuICB9XG5cbiAgd2l0aFRyYW5zcG9ydFN0cmF0ZWd5KFxuICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiBUcmFuc3BvcnRTdHJhdGVneVxuICApOiBWZWN0b3JJbmRleENvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBuZXcgVmVjdG9ySW5kZXhDbGllbnRDb25maWd1cmF0aW9uKHtcbiAgICAgIGxvZ2dlckZhY3Rvcnk6IHRoaXMubG9nZ2VyRmFjdG9yeSxcbiAgICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiB0cmFuc3BvcnRTdHJhdGVneSxcbiAgICAgIHRocm93T25FcnJvcnM6IHRoaXMudGhyb3dPbkVycm9ycyxcbiAgICB9KTtcbiAgfVxuXG4gIGdldFRocm93T25FcnJvcnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGhyb3dPbkVycm9ycztcbiAgfVxuXG4gIHdpdGhUaHJvd09uRXJyb3JzKHRocm93T25FcnJvcnM6IGJvb2xlYW4pOiBWZWN0b3JJbmRleENvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBuZXcgVmVjdG9ySW5kZXhDbGllbnRDb25maWd1cmF0aW9uKHtcbiAgICAgIGxvZ2dlckZhY3Rvcnk6IHRoaXMubG9nZ2VyRmFjdG9yeSxcbiAgICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiB0aGlzLnRyYW5zcG9ydFN0cmF0ZWd5LFxuICAgICAgdGhyb3dPbkVycm9yczogdGhyb3dPbkVycm9ycyxcbiAgICB9KTtcbiAgfVxufVxuIl19