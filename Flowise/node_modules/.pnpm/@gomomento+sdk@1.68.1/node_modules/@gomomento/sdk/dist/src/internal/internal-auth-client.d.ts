import { ExpiresIn, RefreshApiKey, GenerateApiKey, PermissionScope, GenerateDisposableToken, DisposableTokenScope } from '@gomomento/sdk-core';
import { IAuthClient } from '@gomomento/sdk-core/dist/src/internal/clients';
import { AuthClientProps } from '../auth-client-props';
import { permission_messages } from '@gomomento/generated-types/dist/permissionmessages';
import { DisposableTokenProps } from '@gomomento/sdk-core/dist/src/auth/tokens/disposable-token-scope';
export declare class InternalAuthClient implements IAuthClient {
    private static readonly REQUEST_TIMEOUT_MS;
    private readonly cacheServiceErrorMapper;
    private readonly creds;
    private readonly interceptors;
    private readonly tokenClient;
    private readonly authClient;
    constructor(props: AuthClientProps);
    generateApiKey(scope: PermissionScope, expiresIn: ExpiresIn): Promise<GenerateApiKey.Response>;
    /**
     * @deprecated please use `generateApiKey` instead
     */
    generateAuthToken(scope: PermissionScope, expiresIn: ExpiresIn): Promise<GenerateApiKey.Response>;
    refreshApiKey(refreshToken: string): Promise<RefreshApiKey.Response>;
    /**
     * @deprecated please use `refreshApiKey` instead
     */
    refreshAuthToken(refreshToken: string): Promise<RefreshApiKey.Response>;
    generateDisposableToken(scope: DisposableTokenScope, expiresIn: ExpiresIn, disposableTokenProps?: DisposableTokenProps): Promise<GenerateDisposableToken.Response>;
}
export declare function permissionsFromTokenScope(scope: PermissionScope): permission_messages.Permissions;
export declare function permissionsFromDisposableTokenScope(scope: DisposableTokenScope): permission_messages.Permissions;
