"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheConfiguration = void 0;
class CacheConfiguration {
    constructor(props) {
        this.loggerFactory = props.loggerFactory;
        this.retryStrategy = props.retryStrategy;
        this.transportStrategy = props.transportStrategy;
        this.middlewares = props.middlewares;
        this.throwOnErrors = props.throwOnErrors;
    }
    getLoggerFactory() {
        return this.loggerFactory;
    }
    getRetryStrategy() {
        return this.retryStrategy;
    }
    withRetryStrategy(retryStrategy) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: retryStrategy,
            transportStrategy: this.transportStrategy,
            middlewares: this.middlewares,
            throwOnErrors: this.throwOnErrors,
        });
    }
    getTransportStrategy() {
        return this.transportStrategy;
    }
    withTransportStrategy(transportStrategy) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: transportStrategy,
            middlewares: this.middlewares,
            throwOnErrors: this.throwOnErrors,
        });
    }
    getMiddlewares() {
        return this.middlewares;
    }
    withMiddlewares(middlewares) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: this.transportStrategy,
            middlewares: middlewares,
            throwOnErrors: this.throwOnErrors,
        });
    }
    addMiddleware(middleware) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: this.transportStrategy,
            middlewares: [middleware, ...this.middlewares],
            throwOnErrors: this.throwOnErrors,
        });
    }
    withClientTimeoutMillis(clientTimeout) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: this.transportStrategy.withClientTimeoutMillis(clientTimeout),
            middlewares: this.middlewares,
            throwOnErrors: this.throwOnErrors,
        });
    }
    getThrowOnErrors() {
        return this.throwOnErrors;
    }
    withThrowOnErrors(throwOnErrors) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: this.transportStrategy,
            middlewares: this.middlewares,
            throwOnErrors: throwOnErrors,
        });
    }
}
exports.CacheConfiguration = CacheConfiguration;
//# sourceMappingURL=data:application/json;base64,