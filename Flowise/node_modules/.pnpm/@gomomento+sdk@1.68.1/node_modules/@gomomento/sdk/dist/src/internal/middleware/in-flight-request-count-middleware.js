"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InFlightRequestCountMiddleware = void 0;
class InFlightRequestCountMiddlewareRequestHandler {
    constructor(logger) {
        this.logger = logger;
        this.inFlightRequestsAtStart =
            ++InFlightRequestCountMiddleware.numActiveRequests;
    }
    onRequestBody(request) {
        return Promise.resolve(request);
    }
    onRequestMetadata(metadata) {
        return Promise.resolve(metadata);
    }
    onResponseBody(response) {
        this.receivedResponseBody = true;
        if (this.done())
            this.logStatusInformation();
        return Promise.resolve(response);
    }
    onResponseMetadata(metadata) {
        return Promise.resolve(metadata);
    }
    onResponseStatus(status) {
        this.receivedResponseStatus = true;
        if (this.done())
            this.logStatusInformation();
        return Promise.resolve(status);
    }
    done() {
        return this.receivedResponseBody && this.receivedResponseStatus;
    }
    logStatusInformation() {
        const inFlightRequestsAtEnd = --InFlightRequestCountMiddleware.numActiveRequests;
        this.logger.debug(`Request completed; in-flight requests at start: ${this.inFlightRequestsAtStart}, in-flight requests at completion: ${inFlightRequestsAtEnd}`);
    }
}
class InFlightRequestCountMiddleware {
    constructor(loggerFactory) {
        this.logger = loggerFactory.getLogger(this);
    }
    onNewRequest() {
        return new InFlightRequestCountMiddlewareRequestHandler(this.logger);
    }
}
exports.InFlightRequestCountMiddleware = InFlightRequestCountMiddleware;
InFlightRequestCountMiddleware.numActiveRequests = 0;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tZmxpZ2h0LXJlcXVlc3QtY291bnQtbWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbnRlcm5hbC9taWRkbGV3YXJlL2luLWZsaWdodC1yZXF1ZXN0LWNvdW50LW1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBU0EsTUFBTSw0Q0FBNEM7SUFTaEQsWUFBWSxNQUFxQjtRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsdUJBQXVCO1lBQzFCLEVBQUUsOEJBQThCLENBQUMsaUJBQWlCLENBQUM7SUFDdkQsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUEwQjtRQUN0QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQTRCO1FBQzVDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsY0FBYyxDQUNaLFFBQWtDO1FBRWxDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUM7UUFDakMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDN0MsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxrQkFBa0IsQ0FDaEIsUUFBNEI7UUFFNUIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxNQUF3QjtRQUN2QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO1FBQ25DLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzdDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU8sSUFBSTtRQUNWLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUNsRSxDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLE1BQU0scUJBQXFCLEdBQ3pCLEVBQUUsOEJBQThCLENBQUMsaUJBQWlCLENBQUM7UUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsbURBQW1ELElBQUksQ0FBQyx1QkFBdUIsdUNBQXVDLHFCQUFxQixFQUFFLENBQzlJLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFhLDhCQUE4QjtJQUl6QyxZQUFZLGFBQW1DO1FBQzdDLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsWUFBWTtRQUNWLE9BQU8sSUFBSSw0Q0FBNEMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkUsQ0FBQzs7QUFWSCx3RUFXQztBQVZRLGdEQUFpQixHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE1pZGRsZXdhcmUsXG4gIE1pZGRsZXdhcmVNZXNzYWdlLFxuICBNaWRkbGV3YXJlTWV0YWRhdGEsXG4gIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlcixcbiAgTWlkZGxld2FyZVN0YXR1cyxcbn0gZnJvbSAnLi4vLi4vY29uZmlnL21pZGRsZXdhcmUvbWlkZGxld2FyZSc7XG5pbXBvcnQge01vbWVudG9Mb2dnZXIsIE1vbWVudG9Mb2dnZXJGYWN0b3J5fSBmcm9tICcuLi8uLi8nO1xuXG5jbGFzcyBJbkZsaWdodFJlcXVlc3RDb3VudE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlclxuICBpbXBsZW1lbnRzIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlclxue1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBpbkZsaWdodFJlcXVlc3RzQXRTdGFydDogbnVtYmVyO1xuXG4gIHByaXZhdGUgcmVjZWl2ZWRSZXNwb25zZUJvZHk6IGJvb2xlYW47XG4gIHByaXZhdGUgcmVjZWl2ZWRSZXNwb25zZVN0YXR1czogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihsb2dnZXI6IE1vbWVudG9Mb2dnZXIpIHtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLmluRmxpZ2h0UmVxdWVzdHNBdFN0YXJ0ID1cbiAgICAgICsrSW5GbGlnaHRSZXF1ZXN0Q291bnRNaWRkbGV3YXJlLm51bUFjdGl2ZVJlcXVlc3RzO1xuICB9XG5cbiAgb25SZXF1ZXN0Qm9keShyZXF1ZXN0OiBNaWRkbGV3YXJlTWVzc2FnZSk6IFByb21pc2U8TWlkZGxld2FyZU1lc3NhZ2U+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3QpO1xuICB9XG5cbiAgb25SZXF1ZXN0TWV0YWRhdGEobWV0YWRhdGE6IE1pZGRsZXdhcmVNZXRhZGF0YSk6IFByb21pc2U8TWlkZGxld2FyZU1ldGFkYXRhPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtZXRhZGF0YSk7XG4gIH1cblxuICBvblJlc3BvbnNlQm9keShcbiAgICByZXNwb25zZTogTWlkZGxld2FyZU1lc3NhZ2UgfCBudWxsXG4gICk6IFByb21pc2U8TWlkZGxld2FyZU1lc3NhZ2UgfCBudWxsPiB7XG4gICAgdGhpcy5yZWNlaXZlZFJlc3BvbnNlQm9keSA9IHRydWU7XG4gICAgaWYgKHRoaXMuZG9uZSgpKSB0aGlzLmxvZ1N0YXR1c0luZm9ybWF0aW9uKCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG4gIH1cblxuICBvblJlc3BvbnNlTWV0YWRhdGEoXG4gICAgbWV0YWRhdGE6IE1pZGRsZXdhcmVNZXRhZGF0YVxuICApOiBQcm9taXNlPE1pZGRsZXdhcmVNZXRhZGF0YT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWV0YWRhdGEpO1xuICB9XG5cbiAgb25SZXNwb25zZVN0YXR1cyhzdGF0dXM6IE1pZGRsZXdhcmVTdGF0dXMpOiBQcm9taXNlPE1pZGRsZXdhcmVTdGF0dXM+IHtcbiAgICB0aGlzLnJlY2VpdmVkUmVzcG9uc2VTdGF0dXMgPSB0cnVlO1xuICAgIGlmICh0aGlzLmRvbmUoKSkgdGhpcy5sb2dTdGF0dXNJbmZvcm1hdGlvbigpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RhdHVzKTtcbiAgfVxuXG4gIHByaXZhdGUgZG9uZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5yZWNlaXZlZFJlc3BvbnNlQm9keSAmJiB0aGlzLnJlY2VpdmVkUmVzcG9uc2VTdGF0dXM7XG4gIH1cblxuICBwcml2YXRlIGxvZ1N0YXR1c0luZm9ybWF0aW9uKCk6IHZvaWQge1xuICAgIGNvbnN0IGluRmxpZ2h0UmVxdWVzdHNBdEVuZCA9XG4gICAgICAtLUluRmxpZ2h0UmVxdWVzdENvdW50TWlkZGxld2FyZS5udW1BY3RpdmVSZXF1ZXN0cztcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBSZXF1ZXN0IGNvbXBsZXRlZDsgaW4tZmxpZ2h0IHJlcXVlc3RzIGF0IHN0YXJ0OiAke3RoaXMuaW5GbGlnaHRSZXF1ZXN0c0F0U3RhcnR9LCBpbi1mbGlnaHQgcmVxdWVzdHMgYXQgY29tcGxldGlvbjogJHtpbkZsaWdodFJlcXVlc3RzQXRFbmR9YFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEluRmxpZ2h0UmVxdWVzdENvdW50TWlkZGxld2FyZSBpbXBsZW1lbnRzIE1pZGRsZXdhcmUge1xuICBzdGF0aWMgbnVtQWN0aXZlUmVxdWVzdHMgPSAwO1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcblxuICBjb25zdHJ1Y3Rvcihsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSkge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIodGhpcyk7XG4gIH1cblxuICBvbk5ld1JlcXVlc3QoKTogTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyIHtcbiAgICByZXR1cm4gbmV3IEluRmxpZ2h0UmVxdWVzdENvdW50TWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyKHRoaXMubG9nZ2VyKTtcbiAgfVxufVxuIl19