"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
const core = __importStar(require("../pkg/redis.js"));
const http_js_1 = require("../pkg/http.js");
const version_js_1 = require("../version.js");
/**
 * Serverless redis client for upstash.
 */
class Redis extends core.Redis {
    /**
     * Create a new redis client
     *
     * @example
     * ```typescript
     *    const redis = new Redis({
     *        url: "<UPSTASH_REDIS_REST_URL>",
     *        token: "<UPSTASH_REDIS_REST_TOKEN>",
     *        backend: "upstash-db",
     *    });
     * ```
     */
    constructor(config) {
        if (config.url.startsWith(" ") ||
            config.url.endsWith(" ") ||
            /\r|\n/.test(config.url)) {
            console.warn("The redis url contains whitespace or newline, which can cause errors!");
        }
        if (config.token.startsWith(" ") ||
            config.token.endsWith(" ") ||
            /\r|\n/.test(config.token)) {
            console.warn("The redis token contains whitespace or newline, which can cause errors!");
        }
        const client = new http_js_1.HttpClient({
            baseUrl: config.url,
            retry: config.retry,
            headers: { authorization: `Bearer ${config.token}` },
            options: { backend: config.backend },
            responseEncoding: config.responseEncoding,
        });
        super(client, {
            automaticDeserialization: config.automaticDeserialization,
        });
        this.addTelemetry({
            sdk: `@upstash/redis@${version_js_1.VERSION}`,
            platform: "fastly",
        });
    }
}
exports.Redis = Redis;
