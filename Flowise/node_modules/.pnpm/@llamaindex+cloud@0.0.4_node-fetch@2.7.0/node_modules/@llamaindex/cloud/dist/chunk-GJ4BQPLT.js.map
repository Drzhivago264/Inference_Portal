{"version":3,"sources":["../src/serialization/resources/dataSink/index.ts","../src/core/fetcher/Fetcher.ts","../src/core/fetcher/Supplier.ts","../src/core/auth/BasicAuth.ts","../src/core/schemas/index.ts","../src/core/schemas/Schema.ts","../src/core/schemas/utils/getErrorMessageForIncorrectType.ts","../src/core/schemas/utils/maybeSkipValidation.ts","../src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts","../src/core/schemas/builders/schema-utils/JsonError.ts","../src/core/schemas/builders/schema-utils/ParseError.ts","../src/core/schemas/builders/schema-utils/getSchemaUtils.ts","../src/core/schemas/builders/date/date.ts","../src/core/schemas/utils/createIdentitySchemaCreator.ts","../src/core/schemas/builders/enum/enum.ts","../src/core/schemas/builders/lazy/lazy.ts","../src/core/schemas/utils/entries.ts","../src/core/schemas/utils/filterObject.ts","../src/core/schemas/utils/isPlainObject.ts","../src/core/schemas/utils/keys.ts","../src/core/schemas/utils/partition.ts","../src/core/schemas/builders/object-like/getObjectLikeUtils.ts","../src/core/schemas/builders/object/property.ts","../src/core/schemas/builders/object/object.ts","../src/core/schemas/builders/object/objectWithoutOptionalProperties.ts","../src/core/schemas/builders/lazy/lazyObject.ts","../src/core/schemas/builders/list/list.ts","../src/core/schemas/builders/literals/stringLiteral.ts","../src/core/schemas/builders/literals/booleanLiteral.ts","../src/core/schemas/builders/primitives/any.ts","../src/core/schemas/builders/primitives/boolean.ts","../src/core/schemas/builders/primitives/number.ts","../src/core/schemas/builders/primitives/string.ts","../src/core/schemas/builders/primitives/unknown.ts","../src/core/schemas/builders/record/record.ts","../src/core/schemas/builders/set/set.ts","../src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts","../src/core/schemas/builders/union/discriminant.ts","../src/core/schemas/builders/union/union.ts","../src/serialization/resources/dataSink/types/DataSinkUpdateComponentOne.ts","../src/serialization/resources/dataSink/types/DataSinkUpdateComponent.ts","../src/serialization/resources/dataSink/client/requests/DataSinkUpdate.ts","../src/serialization/resources/dataSource/index.ts","../src/serialization/resources/dataSource/types/DataSourceUpdateComponentOne.ts","../src/serialization/resources/dataSource/types/DataSourceUpdateComponent.ts","../src/serialization/resources/dataSource/client/upsertDataSourceFromFiles.ts","../src/serialization/resources/dataSource/client/getDataSourceFiles.ts","../src/serialization/resources/dataSource/client/getDataSourceExecutions.ts","../src/serialization/resources/dataSource/client/requests/BodyUpsertDataSourceFromFilesApiDataSourceFileUploadPut.ts","../src/serialization/resources/dataSource/client/requests/DataSourceUpdate.ts","../src/serialization/resources/health/index.ts","../src/serialization/resources/health/client/health.ts","../src/serialization/resources/apiKey/index.ts","../src/serialization/resources/apiKey/client/getKeys.ts","../src/serialization/resources/apiKey/client/requests/ApiKeyCreate.ts","../src/serialization/resources/apiKey/client/requests/ApiKeyUpdate.ts","../src/serialization/resources/project/index.ts","../src/serialization/resources/project/client/listProjects.ts","../src/serialization/resources/project/client/getDatasetsForProject.ts","../src/serialization/resources/project/client/requests/ProjectUpdate.ts","../src/serialization/resources/project/client/requests/EvalDatasetCreate.ts","../src/serialization/resources/pipeline/index.ts","../src/serialization/resources/pipeline/client/searchPipelines.ts","../src/serialization/resources/pipeline/client/getLoadedFilesForPipeline.ts","../src/serialization/resources/pipeline/client/getAllPlaygroundJobs.ts","../src/serialization/resources/pipeline/client/getPlaygroundJobResult.ts","../src/serialization/resources/pipeline/client/getEvalDatasetExecutions.ts","../src/serialization/resources/pipeline/client/getEvalDatasetExecutionResult.ts","../src/serialization/resources/pipeline/client/runManagedRawFilesIngestion.ts","../src/serialization/resources/pipeline/client/getManagedDataSourceIngestionExecutions.ts","../src/serialization/resources/pipeline/client/getManagedPipelineIngestionExecutions.ts","../src/serialization/resources/pipeline/client/requests/PipelineUpdate.ts","../src/serialization/resources/pipeline/client/requests/EvalExecutionCreate.ts","../src/serialization/resources/pipeline/client/requests/BodyRunManagedRawFilesIngestionApiPipelinePipelineIdManagedIngestRawFilesPut.ts","../src/serialization/resources/pipeline/client/requests/RetrievalParams.ts","../src/serialization/resources/eval/index.ts","../src/serialization/resources/eval/client/getQuestions.ts","../src/serialization/resources/eval/client/createQuestions.ts","../src/serialization/resources/eval/client/getSupportedModels.ts","../src/serialization/resources/eval/client/requests/EvalDatasetUpdate.ts","../src/serialization/resources/componentDefinition/index.ts","../src/serialization/resources/componentDefinition/client/getAllTransformationDefinitions.ts","../src/serialization/resources/componentDefinition/client/getAllDataSourceDefinitions.ts","../src/serialization/resources/componentDefinition/client/getAllDataSinkDefinitions.ts","../src/serialization/types/ApiKey.ts","../src/serialization/types/AzureOpenAiEmbedding.ts","../src/serialization/types/BasePydanticReader.ts","../src/serialization/types/BeautifulSoupWebReader.ts","../src/serialization/types/ChromaVectorStore.ts","../src/serialization/types/CodeSplitter.ts","../src/serialization/types/ConfigurableDataSinkNames.ts","../src/serialization/types/ConfigurableDataSourceNames.ts","../src/serialization/types/ConfigurableTransformationDefinition.ts","../src/serialization/types/ConfigurableTransformationNames.ts","../src/serialization/types/ConfiguredTransformationItemComponentOne.ts","../src/serialization/types/ConfiguredTransformationItemComponent.ts","../src/serialization/types/ConfiguredTransformationItem.ts","../src/serialization/types/DataSinkComponentOne.ts","../src/serialization/types/DataSinkComponent.ts","../src/serialization/types/DataSink.ts","../src/serialization/types/DataSinkCreateComponentOne.ts","../src/serialization/types/DataSinkCreateComponent.ts","../src/serialization/types/DataSinkCreate.ts","../src/serialization/types/DataSinkDefinition.ts","../src/serialization/types/DataSourceComponentOne.ts","../src/serialization/types/DataSourceComponent.ts","../src/serialization/types/DataSource.ts","../src/serialization/types/DataSourceCreateComponentOne.ts","../src/serialization/types/DataSourceCreateComponent.ts","../src/serialization/types/DataSourceCreate.ts","../src/serialization/types/DataSourceDefinition.ts","../src/serialization/types/DataSourceLoadJobRecord.ts","../src/serialization/types/DataSourceManagedIngestionJobRecord.ts","../src/serialization/types/DiscordReader.ts","../src/serialization/types/DocumentRelationshipsValue.ts","../src/serialization/types/Document.ts","../src/serialization/types/DocumentGroup.ts","../src/serialization/types/EvalDataset.ts","../src/serialization/types/EvalDatasetJobRecord.ts","../src/serialization/types/EvalExecutionParams.ts","../src/serialization/types/EvalExecutionParamsOverride.ts","../src/serialization/types/EvalLlmModelData.ts","../src/serialization/types/EvalQuestion.ts","../src/serialization/types/EvalQuestionCreate.ts","../src/serialization/types/EvalQuestionResult.ts","../src/serialization/types/ExternallyStoredComponent.ts","../src/serialization/types/GoogleDocsReader.ts","../src/serialization/types/GoogleSheetsReader.ts","../src/serialization/types/HtmlNodeParser.ts","../src/serialization/types/HttpValidationError.ts","../src/serialization/types/JsonNodeParser.ts","../src/serialization/types/JobNames.ts","../src/serialization/types/LoadedFile.ts","../src/serialization/types/LoadedFilePayload.ts","../src/serialization/types/ManagedIngestionStatus.ts","../src/serialization/types/MarkdownNodeParser.ts","../src/serialization/types/MetricResult.ts","../src/serialization/types/NotionPageReader.ts","../src/serialization/types/ObjectType.ts","../src/serialization/types/OpenAiEmbedding.ts","../src/serialization/types/PgVectorStore.ts","../src/serialization/types/ParserLanguages.ts","../src/serialization/types/ParsingJob.ts","../src/serialization/types/ParsingJobMarkdownResult.ts","../src/serialization/types/ParsingJobTextResult.ts","../src/serialization/types/ParsingUsage.ts","../src/serialization/types/PineconeVectorStore.ts","../src/serialization/types/Pipeline.ts","../src/serialization/types/PipelineCreate.ts","../src/serialization/types/PipelineManagedIngestionJobRecord.ts","../src/serialization/types/PipelineType.ts","../src/serialization/types/PlatformTextNodeRelationshipsValue.ts","../src/serialization/types/PlatformTextNode.ts","../src/serialization/types/PlaygroundJobRecord.ts","../src/serialization/types/PresetRetrievalParams.ts","../src/serialization/types/Project.ts","../src/serialization/types/ProjectCreate.ts","../src/serialization/types/QdrantVectorStore.ts","../src/serialization/types/ReaderConfig.ts","../src/serialization/types/RelatedNodeInfo.ts","../src/serialization/types/RetrieveResults.ts","../src/serialization/types/RssReader.ts","../src/serialization/types/SentenceSplitter.ts","../src/serialization/types/SimpleFileNodeParser.ts","../src/serialization/types/SimpleWebPageReader.ts","../src/serialization/types/SlackReader.ts","../src/serialization/types/StatusEnum.ts","../src/serialization/types/SupportedEvalLlmModel.ts","../src/serialization/types/SupportedEvalLlmModelNames.ts","../src/serialization/types/TextNodeRelationshipsValue.ts","../src/serialization/types/TextNode.ts","../src/serialization/types/TextNodeWithScore.ts","../src/serialization/types/TokenTextSplitter.ts","../src/serialization/types/TrafilaturaWebReader.ts","../src/serialization/types/TransformationCategoryNames.ts","../src/serialization/types/ValidationErrorLocItem.ts","../src/serialization/types/ValidationError.ts","../src/serialization/types/WeaviateVectorStore.ts","../src/serialization/types/YoutubeTranscriptReader.ts"],"sourcesContent":["export * from \"./types\";\nexport * from \"./client\";\n","import { default as FormData } from \"form-data\";\nimport qs from \"qs\";\nimport type { APIResponse } from \"./APIResponse\";\n\nexport type FetchFunction = <R = unknown>(args: Fetcher.Args) => Promise<APIResponse<R, Fetcher.Error>>;\n\nexport declare namespace Fetcher {\n    export interface Args {\n        url: string;\n        method: string;\n        contentType?: string;\n        headers?: Record<string, string | undefined>;\n        queryParameters?: Record<string, string | string[]>;\n        body?: unknown;\n        timeoutMs?: number;\n        maxRetries?: number;\n        withCredentials?: boolean;\n        responseType?: \"json\" | \"blob\" | \"streaming\";\n    }\n\n    export type Error = FailedStatusCodeError | NonJsonError | TimeoutError | UnknownError;\n\n    export interface FailedStatusCodeError {\n        reason: \"status-code\";\n        statusCode: number;\n        body: unknown;\n    }\n\n    export interface NonJsonError {\n        reason: \"non-json\";\n        statusCode: number;\n        rawBody: string;\n    }\n\n    export interface TimeoutError {\n        reason: \"timeout\";\n    }\n\n    export interface UnknownError {\n        reason: \"unknown\";\n        errorMessage: string;\n    }\n}\n\nconst INITIAL_RETRY_DELAY = 1;\nconst MAX_RETRY_DELAY = 60;\nconst DEFAULT_MAX_RETRIES = 2;\n\nasync function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse<R, Fetcher.Error>> {\n    const headers: Record<string, string> = {};\n    if (args.body !== undefined && args.contentType != null) {\n        headers[\"Content-Type\"] = args.contentType;\n    }\n\n    if (args.headers != null) {\n        for (const [key, value] of Object.entries(args.headers)) {\n            if (value != null) {\n                headers[key] = value;\n            }\n        }\n    }\n\n    const url =\n        Object.keys(args.queryParameters ?? {}).length > 0\n            ? `${args.url}?${qs.stringify(args.queryParameters, { arrayFormat: \"repeat\" })}`\n            : args.url;\n\n    let body: BodyInit | undefined = undefined;\n    if (args.body instanceof FormData) {\n        // @ts-expect-error\n        body = args.body;\n    } else {\n        body = JSON.stringify(args.body);\n    }\n\n    const fetchFn = typeof fetch == \"function\" ? fetch : require(\"node-fetch\");\n\n    const makeRequest = async (): Promise<Response> => {\n        const controller = new AbortController();\n        let abortId = undefined;\n        if (args.timeoutMs != null) {\n            abortId = setTimeout(() => controller.abort(), args.timeoutMs);\n        }\n        const response = await fetchFn(url, {\n            method: args.method,\n            headers,\n            body,\n            signal: controller.signal,\n            credentials: args.withCredentials ? \"include\" : undefined,\n        });\n        if (abortId != null) {\n            clearTimeout(abortId);\n        }\n        return response;\n    };\n\n    try {\n        let response = await makeRequest();\n\n        for (let i = 0; i < (args.maxRetries ?? DEFAULT_MAX_RETRIES); ++i) {\n            if (\n                response.status === 408 ||\n                response.status === 409 ||\n                response.status === 429 ||\n                response.status >= 500\n            ) {\n                const delay = Math.min(INITIAL_RETRY_DELAY * Math.pow(i, 2), MAX_RETRY_DELAY);\n                await new Promise((resolve) => setTimeout(resolve, delay));\n                response = await makeRequest();\n            } else {\n                break;\n            }\n        }\n\n        let body: unknown;\n        if (response.body != null && args.responseType === \"blob\") {\n            body = await response.blob();\n        } else if (response.body != null && args.responseType === \"streaming\") {\n            body = response.body;\n        } else {\n            const text = await response.text();\n            if (text.length > 0) {\n                try {\n                    body = JSON.parse(text);\n                } catch (err) {\n                    return {\n                        ok: false,\n                        error: {\n                            reason: \"non-json\",\n                            statusCode: response.status,\n                            rawBody: text,\n                        },\n                    };\n                }\n            }\n        }\n\n        if (response.status >= 200 && response.status < 400) {\n            return {\n                ok: true,\n                body: body as R,\n                headers: response.headers,\n            };\n        } else {\n            return {\n                ok: false,\n                error: {\n                    reason: \"status-code\",\n                    statusCode: response.status,\n                    body,\n                },\n            };\n        }\n    } catch (error) {\n        if (error instanceof Error && error.name === \"AbortError\") {\n            return {\n                ok: false,\n                error: {\n                    reason: \"timeout\",\n                },\n            };\n        } else if (error instanceof Error) {\n            return {\n                ok: false,\n                error: {\n                    reason: \"unknown\",\n                    errorMessage: error.message,\n                },\n            };\n        }\n\n        return {\n            ok: false,\n            error: {\n                reason: \"unknown\",\n                errorMessage: JSON.stringify(error),\n            },\n        };\n    }\n}\n\nexport const fetcher: FetchFunction = fetcherImpl;\n","export type Supplier<T> = T | Promise<T> | (() => T | Promise<T>);\n\nexport const Supplier = {\n    get: async <T>(supplier: Supplier<T>): Promise<T> => {\n        if (typeof supplier === \"function\") {\n            return (supplier as () => T)();\n        } else {\n            return supplier;\n        }\n    },\n};\n","import { Base64 } from \"js-base64\";\n\nexport interface BasicAuth {\n    username: string;\n    password: string;\n}\n\nconst BASIC_AUTH_HEADER_PREFIX = /^Basic /i;\n\nexport const BasicAuth = {\n    toAuthorizationHeader: (basicAuth: BasicAuth | undefined): string | undefined => {\n        if (basicAuth == null) {\n            return undefined;\n        }\n        const token = Base64.encode(`${basicAuth.username}:${basicAuth.password}`);\n        return `Basic ${token}`;\n    },\n    fromAuthorizationHeader: (header: string): BasicAuth => {\n        const credentials = header.replace(BASIC_AUTH_HEADER_PREFIX, \"\");\n        const decoded = Base64.decode(credentials);\n        const [username, password] = decoded.split(\":\", 2);\n\n        if (username == null || password == null) {\n            throw new Error(\"Invalid basic auth\");\n        }\n        return {\n            username,\n            password,\n        };\n    },\n};\n","export * from \"./builders\";\nexport type { inferParsed, inferRaw, Schema, SchemaOptions } from \"./Schema\";\n","import type { SchemaUtils } from \"./builders\";\nimport type { MaybePromise } from \"./utils/MaybePromise\";\n\nexport type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;\n\nexport type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;\nexport type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;\n\nexport interface BaseSchema<Raw, Parsed> {\n    parse: (raw: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Parsed>>;\n    json: (parsed: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Raw>>;\n    getType: () => SchemaType | Promise<SchemaType>;\n}\n\nexport const SchemaType = {\n    DATE: \"date\",\n    ENUM: \"enum\",\n    LIST: \"list\",\n    STRING_LITERAL: \"stringLiteral\",\n    BOOLEAN_LITERAL: \"booleanLiteral\",\n    OBJECT: \"object\",\n    ANY: \"any\",\n    BOOLEAN: \"boolean\",\n    NUMBER: \"number\",\n    STRING: \"string\",\n    UNKNOWN: \"unknown\",\n    RECORD: \"record\",\n    SET: \"set\",\n    UNION: \"union\",\n    UNDISCRIMINATED_UNION: \"undiscriminatedUnion\",\n    OPTIONAL: \"optional\",\n} as const;\nexport type SchemaType = typeof SchemaType[keyof typeof SchemaType];\n\nexport type MaybeValid<T> = Valid<T> | Invalid;\n\nexport interface Valid<T> {\n    ok: true;\n    value: T;\n}\n\nexport interface Invalid {\n    ok: false;\n    errors: ValidationError[];\n}\n\nexport interface ValidationError {\n    path: string[];\n    message: string;\n}\n\nexport interface SchemaOptions {\n    /**\n     * how to handle unrecognized keys in objects\n     *\n     * @default \"fail\"\n     */\n    unrecognizedObjectKeys?: \"fail\" | \"passthrough\" | \"strip\";\n\n    /**\n     * whether to fail when an unrecognized discriminant value is\n     * encountered in a union\n     *\n     * @default false\n     */\n    allowUnrecognizedUnionMembers?: boolean;\n\n    /**\n     * whether to fail when an unrecognized enum value is encountered\n     *\n     * @default false\n     */\n    allowUnrecognizedEnumValues?: boolean;\n\n    /**\n     * whether to allow data that doesn't conform to the schema.\n     * invalid data is passed through without transformation.\n     *\n     * when this is enabled, .parse() and .json() will always\n     * return `ok: true`. `.parseOrThrow()` and `.jsonOrThrow()`\n     * will never fail.\n     *\n     * @default false\n     */\n    skipValidation?: boolean;\n\n    /**\n     * each validation failure contains a \"path\" property, which is\n     * the breadcrumbs to the offending node in the JSON. you can supply\n     * a prefix that is prepended to all the errors' paths. this can be\n     * helpful for zurg's internal debug logging.\n     */\n    breadcrumbsPrefix?: string[];\n}\n","export function getErrorMessageForIncorrectType(value: unknown, expectedType: string): string {\n    return `Expected ${expectedType}. Received ${getTypeAsString(value)}.`;\n}\n\nfunction getTypeAsString(value: unknown): string {\n    if (Array.isArray(value)) {\n        return \"list\";\n    }\n    if (value === null) {\n        return \"null\";\n    }\n    switch (typeof value) {\n        case \"string\":\n            return `\"${value}\"`;\n        case \"number\":\n        case \"boolean\":\n        case \"undefined\":\n            return `${value}`;\n    }\n    return typeof value;\n}\n","import type { BaseSchema, MaybeValid, SchemaOptions } from \"../Schema\";\nimport type { MaybePromise } from \"./MaybePromise\";\n\nexport function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {\n    return {\n        ...schema,\n        json: transformAndMaybeSkipValidation(schema.json),\n        parse: transformAndMaybeSkipValidation(schema.parse),\n    };\n}\n\nfunction transformAndMaybeSkipValidation<T>(\n    transform: (value: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<T>>\n): (value: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<T>> {\n    return async (value, opts): Promise<MaybeValid<T>> => {\n        const transformed = await transform(value, opts);\n        const { skipValidation = false } = opts ?? {};\n        if (!transformed.ok && skipValidation) {\n            // eslint-disable-next-line no-console\n            console.warn(\n                [\n                    \"Failed to validate.\",\n                    ...transformed.errors.map(\n                        (error) =>\n                            \"  - \" +\n                            (error.path.length > 0 ? `${error.path.join(\".\")}: ${error.message}` : error.message)\n                    ),\n                ].join(\"\\n\")\n            );\n\n            return {\n                ok: true,\n                value: value as T,\n            };\n        } else {\n            return transformed;\n        }\n    };\n}\n","import type { ValidationError } from \"../../Schema\";\n\nexport function stringifyValidationError(error: ValidationError): string {\n    if (error.path.length === 0) {\n        return error.message;\n    }\n    return `${error.path.join(\" -> \")}: ${error.message}`;\n}\n","import type { ValidationError } from \"../../Schema\";\nimport { stringifyValidationError } from \"./stringifyValidationErrors\";\n\nexport class JsonError extends Error {\n    constructor(public readonly errors: ValidationError[]) {\n        super(errors.map(stringifyValidationError).join(\"; \"));\n        Object.setPrototypeOf(this, JsonError.prototype);\n    }\n}\n","import type { ValidationError } from \"../../Schema\";\nimport { stringifyValidationError } from \"./stringifyValidationErrors\";\n\nexport class ParseError extends Error {\n    constructor(public readonly errors: ValidationError[]) {\n        super(errors.map(stringifyValidationError).join(\"; \"));\n        Object.setPrototypeOf(this, ParseError.prototype);\n    }\n}\n","import type { BaseSchema, Schema, SchemaOptions} from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { JsonError } from \"./JsonError\";\nimport { ParseError } from \"./ParseError\";\n\nexport interface SchemaUtils<Raw, Parsed> {\n    optional: () => Schema<Raw | null | undefined, Parsed | undefined>;\n    transform: <Transformed>(transformer: SchemaTransformer<Parsed, Transformed>) => Schema<Raw, Transformed>;\n    parseOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Parsed>;\n    jsonOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Raw>;\n}\n\nexport interface SchemaTransformer<Parsed, Transformed> {\n    transform: (parsed: Parsed) => Transformed;\n    untransform: (transformed: any) => Parsed;\n}\n\nexport function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed> {\n    return {\n        optional: () => optional(schema),\n        transform: (transformer) => transform(schema, transformer),\n        parseOrThrow: async (raw, opts) => {\n            const parsed = await schema.parse(raw, opts);\n            if (parsed.ok) {\n                return parsed.value;\n            }\n            throw new ParseError(parsed.errors);\n        },\n        jsonOrThrow: async (parsed, opts) => {\n            const raw = await schema.json(parsed, opts);\n            if (raw.ok) {\n                return raw.value;\n            }\n            throw new JsonError(raw.errors);\n        },\n    };\n}\n\n/**\n * schema utils are defined in one file to resolve issues with circular imports\n */\n\nexport function optional<Raw, Parsed>(\n    schema: BaseSchema<Raw, Parsed>\n): Schema<Raw | null | undefined, Parsed | undefined> {\n    const baseSchema: BaseSchema<Raw | null | undefined, Parsed | undefined> = {\n        parse: (raw, opts) => {\n            if (raw == null) {\n                return {\n                    ok: true,\n                    value: undefined,\n                };\n            }\n            return schema.parse(raw, opts);\n        },\n        json: (parsed, opts) => {\n            if (parsed == null) {\n                return {\n                    ok: true,\n                    value: null,\n                };\n            }\n            return schema.json(parsed, opts);\n        },\n        getType: () => SchemaType.OPTIONAL,\n    };\n\n    return {\n        ...baseSchema,\n        ...getSchemaUtils(baseSchema),\n    };\n}\n\nexport function transform<Raw, Parsed, Transformed>(\n    schema: BaseSchema<Raw, Parsed>,\n    transformer: SchemaTransformer<Parsed, Transformed>\n): Schema<Raw, Transformed> {\n    const baseSchema: BaseSchema<Raw, Transformed> = {\n        parse: async (raw, opts) => {\n            const parsed = await schema.parse(raw, opts);\n            if (!parsed.ok) {\n                return parsed;\n            }\n            return {\n                ok: true,\n                value: transformer.transform(parsed.value),\n            };\n        },\n        json: async (transformed, opts) => {\n            const parsed = await transformer.untransform(transformed);\n            return schema.json(parsed, opts);\n        },\n        getType: () => schema.getType(),\n    };\n\n    return {\n        ...baseSchema,\n        ...getSchemaUtils(baseSchema),\n    };\n}\n","import type { BaseSchema, Schema} from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { getSchemaUtils } from \"../schema-utils\";\n\n// https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime\nconst ISO_8601_REGEX =\n    /^([+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24:?00)([.,]\\d+(?!:))?)?(\\17[0-5]\\d([.,]\\d+)?)?([zZ]|([+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n\nexport function date(): Schema<string, Date> {\n    const baseSchema: BaseSchema<string, Date> = {\n        parse: (raw, { breadcrumbsPrefix = [] } = {}) => {\n            if (typeof raw !== \"string\") {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(raw, \"string\"),\n                        },\n                    ],\n                };\n            }\n            if (!ISO_8601_REGEX.test(raw)) {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(raw, \"ISO 8601 date string\"),\n                        },\n                    ],\n                };\n            }\n            return {\n                ok: true,\n                value: new Date(raw),\n            };\n        },\n        json: (date, { breadcrumbsPrefix = [] } = {}) => {\n            if (date instanceof Date) {\n                return {\n                    ok: true,\n                    value: date.toISOString(),\n                };\n            } else {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(date, \"Date object\"),\n                        },\n                    ],\n                };\n            }\n        },\n        getType: () => SchemaType.DATE,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n    };\n}\n","import { getSchemaUtils } from \"../builders/schema-utils\";\nimport type { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from \"../Schema\";\nimport { maybeSkipValidation } from \"./maybeSkipValidation\";\n\nexport function createIdentitySchemaCreator<T>(\n    schemaType: SchemaType,\n    validate: (value: unknown, opts?: SchemaOptions) => MaybeValid<T>\n): () => Schema<T, T> {\n    return () => {\n        const baseSchema: BaseSchema<T, T> = {\n            parse: validate,\n            json: validate,\n            getType: () => schemaType,\n        };\n\n        return {\n            ...maybeSkipValidation(baseSchema),\n            ...getSchemaUtils(baseSchema),\n        };\n    };\n}\n","import type { Schema} from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\n\nexport function enum_<U extends string, E extends U[]>(values: E): Schema<E[number], E[number]> {\n    const validValues = new Set<string>(values);\n\n    const schemaCreator = createIdentitySchemaCreator(\n        SchemaType.ENUM,\n        (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {\n            if (typeof value !== \"string\") {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(value, \"string\"),\n                        },\n                    ],\n                };\n            }\n\n            if (!validValues.has(value) && !allowUnrecognizedEnumValues) {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(value, \"enum\"),\n                        },\n                    ],\n                };\n            }\n\n            return {\n                ok: true,\n                value: value as U,\n            };\n        }\n    );\n\n    return schemaCreator();\n}\n","import type { BaseSchema, Schema } from \"../../Schema\";\nimport { getSchemaUtils } from \"../schema-utils\";\n\nexport type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;\n\nexport function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed> {\n    const baseSchema = constructLazyBaseSchema(getter);\n    return {\n        ...baseSchema,\n        ...getSchemaUtils(baseSchema),\n    };\n}\n\nexport function constructLazyBaseSchema<Raw, Parsed>(\n    getter: SchemaGetter<Schema<Raw, Parsed>>\n): BaseSchema<Raw, Parsed> {\n    return {\n        parse: async (raw, opts) => (await getMemoizedSchema(getter)).parse(raw, opts),\n        json: async (parsed, opts) => (await getMemoizedSchema(getter)).json(parsed, opts),\n        getType: async () => (await getMemoizedSchema(getter)).getType(),\n    };\n}\n\ntype MemoizedGetter<SchemaType extends Schema<any, any>> = SchemaGetter<SchemaType> & { __zurg_memoized?: SchemaType };\n\nexport async function getMemoizedSchema<SchemaType extends Schema<any, any>>(\n    getter: SchemaGetter<SchemaType>\n): Promise<SchemaType> {\n    const castedGetter = getter as MemoizedGetter<SchemaType>;\n    if (castedGetter.__zurg_memoized == null) {\n        castedGetter.__zurg_memoized = await getter();\n    }\n    return castedGetter.__zurg_memoized;\n}\n","export function entries<T>(object: T): [keyof T, T[keyof T]][] {\n    return Object.entries(object) as [keyof T, T[keyof T]][];\n}\n","export function filterObject<T, K extends keyof T>(obj: T, keysToInclude: K[]): Pick<T, K> {\n    const keysToIncludeSet = new Set(keysToInclude);\n    return Object.entries(obj).reduce((acc, [key, value]) => {\n        if (keysToIncludeSet.has(key as K)) {\n            acc[key as K] = value;\n        }\n        return acc;\n        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n    }, {} as Pick<T, K>);\n}\n","// borrowed from https://github.com/lodash/lodash/blob/master/isPlainObject.js\nexport function isPlainObject(value: unknown): value is Record<string, unknown> {\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n\n    return Object.getPrototypeOf(value) === proto;\n}\n","export function keys<T>(object: T): (keyof T)[] {\n    return Object.keys(object) as (keyof T)[];\n}\n","export function partition<T>(items: readonly T[], predicate: (item: T) => boolean): [T[], T[]] {\n    const trueItems: T[] = [],\n        falseItems: T[] = [];\n    for (const item of items) {\n        if (predicate(item)) {\n            trueItems.push(item);\n        } else {\n            falseItems.push(item);\n        }\n    }\n    return [trueItems, falseItems];\n}\n","import type { BaseSchema } from \"../../Schema\";\nimport { filterObject } from \"../../utils/filterObject\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { isPlainObject } from \"../../utils/isPlainObject\";\nimport { getSchemaUtils } from \"../schema-utils\";\nimport type { ObjectLikeSchema, ObjectLikeUtils } from \"./types\";\n\nexport function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {\n    return {\n        withParsedProperties: (properties) => withParsedProperties(schema, properties),\n    };\n}\n\n/**\n * object-like utils are defined in one file to resolve issues with circular imports\n */\n\nexport function withParsedProperties<RawObjectShape, ParsedObjectShape, Properties>(\n    objectLike: BaseSchema<RawObjectShape, ParsedObjectShape>,\n    properties: { [K in keyof Properties]: Properties[K] | ((parsed: ParsedObjectShape) => Properties[K]) }\n): ObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties> {\n    const objectSchema: BaseSchema<RawObjectShape, ParsedObjectShape & Properties> = {\n        parse: async (raw, opts) => {\n            const parsedObject = await objectLike.parse(raw, opts);\n            if (!parsedObject.ok) {\n                return parsedObject;\n            }\n\n            const additionalProperties = Object.entries(properties).reduce<Record<string, any>>(\n                (processed, [key, value]) => {\n                    return {\n                        ...processed,\n                        [key]: typeof value === \"function\" ? value(parsedObject.value) : value,\n                    };\n                },\n                {}\n            );\n\n            return {\n                ok: true,\n                value: {\n                    ...parsedObject.value,\n                    ...(additionalProperties as Properties),\n                },\n            };\n        },\n\n        json: (parsed, opts) => {\n            if (!isPlainObject(parsed)) {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: opts?.breadcrumbsPrefix ?? [],\n                            message: getErrorMessageForIncorrectType(parsed, \"object\"),\n                        },\n                    ],\n                };\n            }\n\n            // strip out added properties\n            const addedPropertyKeys = new Set(Object.keys(properties));\n            const parsedWithoutAddedProperties = filterObject(\n                parsed,\n                Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))\n            );\n\n            return objectLike.json(parsedWithoutAddedProperties as ParsedObjectShape, opts);\n        },\n\n        getType: () => objectLike.getType(),\n    };\n\n    return {\n        ...objectSchema,\n        ...getSchemaUtils(objectSchema),\n        ...getObjectLikeUtils(objectSchema),\n    };\n}\n","import type { Schema } from \"../../Schema\";\n\nexport function property<RawKey extends string, RawValue, ParsedValue>(\n    rawKey: RawKey,\n    valueSchema: Schema<RawValue, ParsedValue>\n): Property<RawKey, RawValue, ParsedValue> {\n    return {\n        rawKey,\n        valueSchema,\n        isProperty: true,\n    };\n}\n\nexport interface Property<RawKey extends string, RawValue, ParsedValue> {\n    rawKey: RawKey;\n    valueSchema: Schema<RawValue, ParsedValue>;\n    isProperty: true;\n}\n\nexport function isProperty<O extends Property<any, any, any>>(maybeProperty: unknown): maybeProperty is O {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return (maybeProperty as O).isProperty;\n}\n","import type { MaybeValid, Schema, ValidationError } from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { entries } from \"../../utils/entries\";\nimport { filterObject } from \"../../utils/filterObject\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { isPlainObject } from \"../../utils/isPlainObject\";\nimport { keys } from \"../../utils/keys\";\nimport type { MaybePromise } from \"../../utils/MaybePromise\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { partition } from \"../../utils/partition\";\nimport { getObjectLikeUtils } from \"../object-like\";\nimport { getSchemaUtils } from \"../schema-utils\";\nimport { isProperty } from \"./property\";\nimport type {\n    BaseObjectSchema,\n    inferObjectSchemaFromPropertySchemas,\n    inferParsedObjectFromPropertySchemas,\n    inferRawObjectFromPropertySchemas,\n    ObjectSchema,\n    ObjectUtils,\n    PropertySchemas,\n} from \"./types\";\n\ninterface ObjectPropertyWithRawKey {\n    rawKey: string;\n    parsedKey: string;\n    valueSchema: Schema<any, any>;\n}\n\nexport function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(\n    schemas: T\n): inferObjectSchemaFromPropertySchemas<T> {\n    const baseSchema: BaseObjectSchema<\n        inferRawObjectFromPropertySchemas<T>,\n        inferParsedObjectFromPropertySchemas<T>\n    > = {\n        _getRawProperties: () =>\n            Promise.resolve(\n                Object.entries(schemas).map(([parsedKey, propertySchema]) =>\n                    isProperty(propertySchema) ? propertySchema.rawKey : parsedKey\n                ) as unknown as (keyof inferRawObjectFromPropertySchemas<T>)[]\n            ),\n        _getParsedProperties: () =>\n            Promise.resolve(keys(schemas) as unknown as (keyof inferParsedObjectFromPropertySchemas<T>)[]),\n\n        parse: async (raw, opts) => {\n            const rawKeyToProperty: Record<string, ObjectPropertyWithRawKey> = {};\n            const requiredKeys: string[] = [];\n\n            for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {\n                const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;\n                const valueSchema: Schema<any, any> = isProperty(schemaOrObjectProperty)\n                    ? schemaOrObjectProperty.valueSchema\n                    : schemaOrObjectProperty;\n\n                const property: ObjectPropertyWithRawKey = {\n                    rawKey,\n                    parsedKey: parsedKey as string,\n                    valueSchema,\n                };\n\n                rawKeyToProperty[rawKey] = property;\n\n                if (await isSchemaRequired(valueSchema)) {\n                    requiredKeys.push(rawKey);\n                }\n            }\n\n            return validateAndTransformObject({\n                value: raw,\n                requiredKeys,\n                getProperty: (rawKey) => {\n                    const property = rawKeyToProperty[rawKey];\n                    if (property == null) {\n                        return undefined;\n                    }\n                    return {\n                        transformedKey: property.parsedKey,\n                        transform: (propertyValue) =>\n                            property.valueSchema.parse(propertyValue, {\n                                ...opts,\n                                breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), rawKey],\n                            }),\n                    };\n                },\n                unrecognizedObjectKeys: opts?.unrecognizedObjectKeys,\n                skipValidation: opts?.skipValidation,\n                breadcrumbsPrefix: opts?.breadcrumbsPrefix,\n            });\n        },\n\n        json: async (parsed, opts) => {\n            const requiredKeys: string[] = [];\n\n            for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {\n                const valueSchema: Schema<any, any> = isProperty(schemaOrObjectProperty)\n                    ? schemaOrObjectProperty.valueSchema\n                    : schemaOrObjectProperty;\n\n                if (await isSchemaRequired(valueSchema)) {\n                    requiredKeys.push(parsedKey as string);\n                }\n            }\n\n            return validateAndTransformObject({\n                value: parsed,\n                requiredKeys,\n                getProperty: (\n                    parsedKey\n                ):\n                    | { transformedKey: string; transform: (propertyValue: unknown) => MaybePromise<MaybeValid<any>> }\n                    | undefined => {\n                    const property = schemas[parsedKey as keyof T];\n\n                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                    if (property == null) {\n                        return undefined;\n                    }\n\n                    if (isProperty(property)) {\n                        return {\n                            transformedKey: property.rawKey,\n                            transform: (propertyValue) =>\n                                property.valueSchema.json(propertyValue, {\n                                    ...opts,\n                                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), parsedKey],\n                                }),\n                        };\n                    } else {\n                        return {\n                            transformedKey: parsedKey,\n                            transform: (propertyValue) =>\n                                property.json(propertyValue, {\n                                    ...opts,\n                                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), parsedKey],\n                                }),\n                        };\n                    }\n                },\n                unrecognizedObjectKeys: opts?.unrecognizedObjectKeys,\n                skipValidation: opts?.skipValidation,\n                breadcrumbsPrefix: opts?.breadcrumbsPrefix,\n            });\n        },\n\n        getType: () => SchemaType.OBJECT,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n        ...getObjectLikeUtils(baseSchema),\n        ...getObjectUtils(baseSchema),\n    };\n}\n\nasync function validateAndTransformObject<Transformed>({\n    value,\n    requiredKeys,\n    getProperty,\n    unrecognizedObjectKeys = \"fail\",\n    skipValidation = false,\n    breadcrumbsPrefix = [],\n}: {\n    value: unknown;\n    requiredKeys: string[];\n    getProperty: (\n        preTransformedKey: string\n    ) => { transformedKey: string; transform: (propertyValue: unknown) => MaybePromise<MaybeValid<any>> } | undefined;\n    unrecognizedObjectKeys: \"fail\" | \"passthrough\" | \"strip\" | undefined;\n    skipValidation: boolean | undefined;\n    breadcrumbsPrefix: string[] | undefined;\n}): Promise<MaybeValid<Transformed>> {\n    if (!isPlainObject(value)) {\n        return {\n            ok: false,\n            errors: [\n                {\n                    path: breadcrumbsPrefix,\n                    message: getErrorMessageForIncorrectType(value, \"object\"),\n                },\n            ],\n        };\n    }\n\n    const missingRequiredKeys = new Set(requiredKeys);\n    const errors: ValidationError[] = [];\n    const transformed: Record<string | number | symbol, any> = {};\n\n    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {\n        const property = getProperty(preTransformedKey);\n\n        if (property != null) {\n            missingRequiredKeys.delete(preTransformedKey);\n\n            const value = await property.transform(preTransformedItemValue);\n            if (value.ok) {\n                transformed[property.transformedKey] = value.value;\n            } else {\n                transformed[preTransformedKey] = preTransformedItemValue;\n                errors.push(...value.errors);\n            }\n        } else {\n            switch (unrecognizedObjectKeys) {\n                case \"fail\":\n                    errors.push({\n                        path: [...breadcrumbsPrefix, preTransformedKey],\n                        message: `Unexpected key \"${preTransformedKey}\"`,\n                    });\n                    break;\n                case \"strip\":\n                    break;\n                case \"passthrough\":\n                    transformed[preTransformedKey] = preTransformedItemValue;\n                    break;\n            }\n        }\n    }\n\n    errors.push(\n        ...requiredKeys\n            .filter((key) => missingRequiredKeys.has(key))\n            .map((key) => ({\n                path: breadcrumbsPrefix,\n                message: `Missing required key \"${key}\"`,\n            }))\n    );\n\n    if (errors.length === 0 || skipValidation) {\n        return {\n            ok: true,\n            value: transformed as Transformed,\n        };\n    } else {\n        return {\n            ok: false,\n            errors,\n        };\n    }\n}\n\nexport function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed> {\n    return {\n        extend: <RawExtension, ParsedExtension>(extension: ObjectSchema<RawExtension, ParsedExtension>) => {\n            const baseSchema: BaseObjectSchema<Raw & RawExtension, Parsed & ParsedExtension> = {\n                _getParsedProperties: async () => [\n                    ...(await schema._getParsedProperties()),\n                    ...(await extension._getParsedProperties()),\n                ],\n                _getRawProperties: async () => [\n                    ...(await schema._getRawProperties()),\n                    ...(await extension._getRawProperties()),\n                ],\n                parse: async (raw, opts) => {\n                    return validateAndTransformExtendedObject({\n                        extensionKeys: await extension._getRawProperties(),\n                        value: raw,\n                        transformBase: (rawBase) => schema.parse(rawBase, opts),\n                        transformExtension: (rawExtension) => extension.parse(rawExtension, opts),\n                    });\n                },\n                json: async (parsed, opts) => {\n                    return validateAndTransformExtendedObject({\n                        extensionKeys: await extension._getParsedProperties(),\n                        value: parsed,\n                        transformBase: (parsedBase) => schema.json(parsedBase, opts),\n                        transformExtension: (parsedExtension) => extension.json(parsedExtension, opts),\n                    });\n                },\n                getType: () => SchemaType.OBJECT,\n            };\n\n            return {\n                ...baseSchema,\n                ...getSchemaUtils(baseSchema),\n                ...getObjectLikeUtils(baseSchema),\n                ...getObjectUtils(baseSchema),\n            };\n        },\n    };\n}\n\nasync function validateAndTransformExtendedObject<PreTransformedExtension, TransformedBase, TransformedExtension>({\n    extensionKeys,\n    value,\n    transformBase,\n    transformExtension,\n}: {\n    extensionKeys: (keyof PreTransformedExtension)[];\n    value: unknown;\n    transformBase: (value: unknown) => MaybePromise<MaybeValid<TransformedBase>>;\n    transformExtension: (value: unknown) => MaybePromise<MaybeValid<TransformedExtension>>;\n}): Promise<MaybeValid<TransformedBase & TransformedExtension>> {\n    const extensionPropertiesSet = new Set(extensionKeys);\n    const [extensionProperties, baseProperties] = partition(keys(value), (key) =>\n        extensionPropertiesSet.has(key as keyof PreTransformedExtension)\n    );\n\n    const transformedBase = await transformBase(filterObject(value, baseProperties));\n    const transformedExtension = await transformExtension(filterObject(value, extensionProperties));\n\n    if (transformedBase.ok && transformedExtension.ok) {\n        return {\n            ok: true,\n            value: {\n                ...transformedBase.value,\n                ...transformedExtension.value,\n            },\n        };\n    } else {\n        return {\n            ok: false,\n            errors: [\n                ...(transformedBase.ok ? [] : transformedBase.errors),\n                ...(transformedExtension.ok ? [] : transformedExtension.errors),\n            ],\n        };\n    }\n}\n\nasync function isSchemaRequired(schema: Schema<any, any>): Promise<boolean> {\n    return !(await isSchemaOptional(schema));\n}\n\nasync function isSchemaOptional(schema: Schema<any, any>): Promise<boolean> {\n    switch (await schema.getType()) {\n        case SchemaType.ANY:\n        case SchemaType.UNKNOWN:\n        case SchemaType.OPTIONAL:\n            return true;\n        default:\n            return false;\n    }\n}\n","import { object } from \"./object\";\nimport type { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from \"./types\";\n\nexport function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(\n    schemas: T\n): inferObjectWithoutOptionalPropertiesSchemaFromPropertySchemas<T> {\n    return object(schemas) as unknown as inferObjectWithoutOptionalPropertiesSchemaFromPropertySchemas<T>;\n}\n\nexport type inferObjectWithoutOptionalPropertiesSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> =\n    ObjectSchema<\n        inferRawObjectFromPropertySchemas<T>,\n        inferParsedObjectWithoutOptionalPropertiesFromPropertySchemas<T>\n    >;\n\nexport type inferParsedObjectWithoutOptionalPropertiesFromPropertySchemas<T extends PropertySchemas<keyof T>> = {\n    [K in keyof T]: inferParsedPropertySchema<T[K]>;\n};\n","import { getObjectUtils } from \"../object\";\nimport { getObjectLikeUtils } from \"../object-like\";\nimport type { BaseObjectSchema, ObjectSchema } from \"../object/types\";\nimport { getSchemaUtils } from \"../schema-utils\";\nimport type { SchemaGetter } from \"./lazy\";\nimport { constructLazyBaseSchema, getMemoizedSchema } from \"./lazy\";\n\nexport function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {\n    const baseSchema: BaseObjectSchema<Raw, Parsed> = {\n        ...constructLazyBaseSchema(getter),\n        _getRawProperties: async () => (await getMemoizedSchema(getter))._getRawProperties(),\n        _getParsedProperties: async () => (await getMemoizedSchema(getter))._getParsedProperties(),\n    };\n\n    return {\n        ...baseSchema,\n        ...getSchemaUtils(baseSchema),\n        ...getObjectLikeUtils(baseSchema),\n        ...getObjectUtils(baseSchema),\n    };\n}\n","import type { BaseSchema, MaybeValid, Schema, ValidationError } from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport type { MaybePromise } from \"../../utils/MaybePromise\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { getSchemaUtils } from \"../schema-utils\";\n\nexport function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {\n    const baseSchema: BaseSchema<Raw[], Parsed[]> = {\n        parse: async (raw, opts) =>\n            validateAndTransformArray(raw, (item, index) =>\n                schema.parse(item, {\n                    ...opts,\n                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), `[${index}]`],\n                })\n            ),\n        json: (parsed, opts) =>\n            validateAndTransformArray(parsed, (item, index) =>\n                schema.json(item, {\n                    ...opts,\n                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), `[${index}]`],\n                })\n            ),\n        getType: () => SchemaType.LIST,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n    };\n}\n\nasync function validateAndTransformArray<Raw, Parsed>(\n    value: unknown,\n    transformItem: (item: Raw, index: number) => MaybePromise<MaybeValid<Parsed>>\n): Promise<MaybeValid<Parsed[]>> {\n    if (!Array.isArray(value)) {\n        return {\n            ok: false,\n            errors: [\n                {\n                    message: getErrorMessageForIncorrectType(value, \"list\"),\n                    path: [],\n                },\n            ],\n        };\n    }\n\n    const maybeValidItems = await Promise.all(value.map((item, index) => transformItem(item, index)));\n\n    return maybeValidItems.reduce<MaybeValid<Parsed[]>>(\n        (acc, item) => {\n            if (acc.ok && item.ok) {\n                return {\n                    ok: true,\n                    value: [...acc.value, item.value],\n                };\n            }\n\n            const errors: ValidationError[] = [];\n            if (!acc.ok) {\n                errors.push(...acc.errors);\n            }\n            if (!item.ok) {\n                errors.push(...item.errors);\n            }\n\n            return {\n                ok: false,\n                errors,\n            };\n        },\n        { ok: true, value: [] }\n    );\n}\n","import type { Schema} from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\n\nexport function stringLiteral<V extends string>(literal: V): Schema<V, V> {\n    const schemaCreator = createIdentitySchemaCreator(\n        SchemaType.STRING_LITERAL,\n        (value, { breadcrumbsPrefix = [] } = {}) => {\n            if (value === literal) {\n                return {\n                    ok: true,\n                    value: literal,\n                };\n            } else {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(value, `\"${literal}\"`),\n                        },\n                    ],\n                };\n            }\n        }\n    );\n\n    return schemaCreator();\n}\n","import type { Schema} from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\n\nexport function booleanLiteral<V extends boolean>(literal: V): Schema<V, V> {\n    const schemaCreator = createIdentitySchemaCreator(\n        SchemaType.BOOLEAN_LITERAL,\n        (value, { breadcrumbsPrefix = [] } = {}) => {\n            if (value === literal) {\n                return {\n                    ok: true,\n                    value: literal,\n                };\n            } else {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(value, `${literal.toString()}`),\n                        },\n                    ],\n                };\n            }\n        }\n    );\n\n    return schemaCreator();\n}\n","import { SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\n\nexport const any = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({ ok: true, value }));\n","import { SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\n\nexport const boolean = createIdentitySchemaCreator<boolean>(\n    SchemaType.BOOLEAN,\n    (value, { breadcrumbsPrefix = [] } = {}) => {\n        if (typeof value === \"boolean\") {\n            return {\n                ok: true,\n                value,\n            };\n        } else {\n            return {\n                ok: false,\n                errors: [\n                    {\n                        path: breadcrumbsPrefix,\n                        message: getErrorMessageForIncorrectType(value, \"boolean\"),\n                    },\n                ],\n            };\n        }\n    }\n);\n","import { SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\n\nexport const number = createIdentitySchemaCreator<number>(\n    SchemaType.NUMBER,\n    (value, { breadcrumbsPrefix = [] } = {}) => {\n        if (typeof value === \"number\") {\n            return {\n                ok: true,\n                value,\n            };\n        } else {\n            return {\n                ok: false,\n                errors: [\n                    {\n                        path: breadcrumbsPrefix,\n                        message: getErrorMessageForIncorrectType(value, \"number\"),\n                    },\n                ],\n            };\n        }\n    }\n);\n","import { SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\n\nexport const string = createIdentitySchemaCreator<string>(\n    SchemaType.STRING,\n    (value, { breadcrumbsPrefix = [] } = {}) => {\n        if (typeof value === \"string\") {\n            return {\n                ok: true,\n                value,\n            };\n        } else {\n            return {\n                ok: false,\n                errors: [\n                    {\n                        path: breadcrumbsPrefix,\n                        message: getErrorMessageForIncorrectType(value, \"string\"),\n                    },\n                ],\n            };\n        }\n    }\n);\n","import { SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\n\nexport const unknown = createIdentitySchemaCreator<unknown>(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));\n","import type { MaybeValid, Schema, ValidationError } from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { entries } from \"../../utils/entries\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { isPlainObject } from \"../../utils/isPlainObject\";\nimport type { MaybePromise } from \"../../utils/MaybePromise\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { getSchemaUtils } from \"../schema-utils\";\nimport type { BaseRecordSchema, RecordSchema } from \"./types\";\n\nexport function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(\n    keySchema: Schema<RawKey, ParsedKey>,\n    valueSchema: Schema<RawValue, ParsedValue>\n): RecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> {\n    const baseSchema: BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> = {\n        parse: async (raw, opts) => {\n            return validateAndTransformRecord({\n                value: raw,\n                isKeyNumeric: (await keySchema.getType()) === SchemaType.NUMBER,\n                transformKey: (key) =>\n                    keySchema.parse(key, {\n                        ...opts,\n                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), `${key} (key)`],\n                    }),\n                transformValue: (value, key) =>\n                    valueSchema.parse(value, {\n                        ...opts,\n                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), `${key}`],\n                    }),\n                breadcrumbsPrefix: opts?.breadcrumbsPrefix,\n            });\n        },\n        json: async (parsed, opts) => {\n            return validateAndTransformRecord({\n                value: parsed,\n                isKeyNumeric: (await keySchema.getType()) === SchemaType.NUMBER,\n                transformKey: (key) =>\n                    keySchema.json(key, {\n                        ...opts,\n                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), `${key} (key)`],\n                    }),\n                transformValue: (value, key) =>\n                    valueSchema.json(value, {\n                        ...opts,\n                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), `${key}`],\n                    }),\n                breadcrumbsPrefix: opts?.breadcrumbsPrefix,\n            });\n        },\n        getType: () => SchemaType.RECORD,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n    };\n}\n\nasync function validateAndTransformRecord<TransformedKey extends string | number, TransformedValue>({\n    value,\n    isKeyNumeric,\n    transformKey,\n    transformValue,\n    breadcrumbsPrefix = [],\n}: {\n    value: unknown;\n    isKeyNumeric: boolean;\n    transformKey: (key: string | number) => MaybePromise<MaybeValid<TransformedKey>>;\n    transformValue: (value: unknown, key: string | number) => MaybePromise<MaybeValid<TransformedValue>>;\n    breadcrumbsPrefix: string[] | undefined;\n}): Promise<MaybeValid<Record<TransformedKey, TransformedValue>>> {\n    if (!isPlainObject(value)) {\n        return {\n            ok: false,\n            errors: [\n                {\n                    path: breadcrumbsPrefix,\n                    message: getErrorMessageForIncorrectType(value, \"object\"),\n                },\n            ],\n        };\n    }\n\n    return entries(value).reduce<Promise<MaybeValid<Record<TransformedKey, TransformedValue>>>>(\n        async (accPromise, [stringKey, value]) => {\n            // skip nullish keys\n            if (value == null) {\n                return accPromise;\n            }\n\n            const acc = await accPromise;\n\n            let key: string | number = stringKey;\n            if (isKeyNumeric) {\n                const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;\n                if (!isNaN(numberKey)) {\n                    key = numberKey;\n                }\n            }\n            const transformedKey = await transformKey(key);\n\n            const transformedValue = await transformValue(value, key);\n\n            if (acc.ok && transformedKey.ok && transformedValue.ok) {\n                return {\n                    ok: true,\n                    value: {\n                        ...acc.value,\n                        [transformedKey.value]: transformedValue.value,\n                    },\n                };\n            }\n\n            const errors: ValidationError[] = [];\n            if (!acc.ok) {\n                errors.push(...acc.errors);\n            }\n            if (!transformedKey.ok) {\n                errors.push(...transformedKey.errors);\n            }\n            if (!transformedValue.ok) {\n                errors.push(...transformedValue.errors);\n            }\n\n            return {\n                ok: false,\n                errors,\n            };\n        },\n        Promise.resolve({ ok: true, value: {} as Record<TransformedKey, TransformedValue> })\n    );\n}\n","import type { BaseSchema, Schema} from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { list } from \"../list\";\nimport { getSchemaUtils } from \"../schema-utils\";\n\nexport function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {\n    const listSchema = list(schema);\n    const baseSchema: BaseSchema<Raw[], Set<Parsed>> = {\n        parse: async (raw, opts) => {\n            const parsedList = await listSchema.parse(raw, opts);\n            if (parsedList.ok) {\n                return {\n                    ok: true,\n                    value: new Set(parsedList.value),\n                };\n            } else {\n                return parsedList;\n            }\n        },\n        json: async (parsed, opts) => {\n            if (!(parsed instanceof Set)) {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: opts?.breadcrumbsPrefix ?? [],\n                            message: getErrorMessageForIncorrectType(parsed, \"Set\"),\n                        },\n                    ],\n                };\n            }\n            const jsonList = await listSchema.json([...parsed], opts);\n            return jsonList;\n        },\n        getType: () => SchemaType.SET,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n    };\n}\n","import type { BaseSchema, MaybeValid, Schema, SchemaOptions, ValidationError } from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport type { MaybePromise } from \"../../utils/MaybePromise\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { getSchemaUtils } from \"../schema-utils\";\nimport type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from \"./types\";\n\nexport function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(\n    schemas: Schemas\n): Schema<inferRawUnidiscriminatedUnionSchema<Schemas>, inferParsedUnidiscriminatedUnionSchema<Schemas>> {\n    const baseSchema: BaseSchema<\n        inferRawUnidiscriminatedUnionSchema<Schemas>,\n        inferParsedUnidiscriminatedUnionSchema<Schemas>\n    > = {\n        parse: async (raw, opts) => {\n            return validateAndTransformUndiscriminatedUnion<inferParsedUnidiscriminatedUnionSchema<Schemas>>(\n                (schema, opts) => schema.parse(raw, opts),\n                schemas,\n                opts\n            );\n        },\n        json: async (parsed, opts) => {\n            return validateAndTransformUndiscriminatedUnion<inferRawUnidiscriminatedUnionSchema<Schemas>>(\n                (schema, opts) => schema.json(parsed, opts),\n                schemas,\n                opts\n            );\n        },\n        getType: () => SchemaType.UNDISCRIMINATED_UNION,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n    };\n}\n\nasync function validateAndTransformUndiscriminatedUnion<Transformed>(\n    transform: (schema: Schema<any, any>, opts: SchemaOptions) => MaybePromise<MaybeValid<Transformed>>,\n    schemas: Schema<any, any>[],\n    opts: SchemaOptions | undefined\n): Promise<MaybeValid<Transformed>> {\n    const errors: ValidationError[] = [];\n    for (const [index, schema] of schemas.entries()) {\n        const transformed = await transform(schema, { ...opts, skipValidation: false });\n        if (transformed.ok) {\n            return transformed;\n        } else {\n            for (const error of transformed.errors) {\n                errors.push({\n                    path: error.path,\n                    message: `[Variant ${index}] ${error.message}`,\n                });\n            }\n        }\n    }\n\n    return {\n        ok: false,\n        errors,\n    };\n}\n","export function discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string>(\n    parsedDiscriminant: ParsedDiscriminant,\n    rawDiscriminant: RawDiscriminant\n): Discriminant<RawDiscriminant, ParsedDiscriminant> {\n    return {\n        parsedDiscriminant,\n        rawDiscriminant,\n    };\n}\n\nexport interface Discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string> {\n    parsedDiscriminant: ParsedDiscriminant;\n    rawDiscriminant: RawDiscriminant;\n}\n","import type { BaseSchema, MaybeValid} from \"../../Schema\";\nimport { SchemaType } from \"../../Schema\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { isPlainObject } from \"../../utils/isPlainObject\";\nimport { keys } from \"../../utils/keys\";\nimport type { MaybePromise } from \"../../utils/MaybePromise\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { enum_ } from \"../enum\";\nimport type { ObjectSchema } from \"../object\";\nimport type { ObjectLikeSchema } from \"../object-like\";\nimport { getObjectLikeUtils } from \"../object-like\";\nimport { getSchemaUtils } from \"../schema-utils\";\nimport type { Discriminant } from \"./discriminant\";\nimport type { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from \"./types\";\n\nexport function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(\n    discriminant: D,\n    union: U\n): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> {\n    const rawDiscriminant =\n        typeof discriminant === \"string\" ? discriminant : (discriminant.rawDiscriminant as inferRawDiscriminant<D>);\n    const parsedDiscriminant =\n        typeof discriminant === \"string\"\n            ? discriminant\n            : (discriminant.parsedDiscriminant as inferParsedDiscriminant<D>);\n\n    const discriminantValueSchema = enum_(keys(union) as string[]);\n\n    const baseSchema: BaseSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> = {\n        parse: async (raw, opts) => {\n            return transformAndValidateUnion({\n                value: raw,\n                discriminant: rawDiscriminant,\n                transformedDiscriminant: parsedDiscriminant,\n                transformDiscriminantValue: (discriminantValue) =>\n                    discriminantValueSchema.parse(discriminantValue, {\n                        allowUnrecognizedEnumValues: opts?.allowUnrecognizedUnionMembers,\n                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), rawDiscriminant],\n                    }),\n                getAdditionalPropertiesSchema: (discriminantValue) => union[discriminantValue],\n                allowUnrecognizedUnionMembers: opts?.allowUnrecognizedUnionMembers,\n                transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) =>\n                    additionalPropertiesSchema.parse(additionalProperties, opts),\n                breadcrumbsPrefix: opts?.breadcrumbsPrefix,\n            });\n        },\n        json: async (parsed, opts) => {\n            return transformAndValidateUnion({\n                value: parsed,\n                discriminant: parsedDiscriminant,\n                transformedDiscriminant: rawDiscriminant,\n                transformDiscriminantValue: (discriminantValue) =>\n                    discriminantValueSchema.json(discriminantValue, {\n                        allowUnrecognizedEnumValues: opts?.allowUnrecognizedUnionMembers,\n                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), parsedDiscriminant],\n                    }),\n                getAdditionalPropertiesSchema: (discriminantValue) => union[discriminantValue],\n                allowUnrecognizedUnionMembers: opts?.allowUnrecognizedUnionMembers,\n                transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) =>\n                    additionalPropertiesSchema.json(additionalProperties, opts),\n                breadcrumbsPrefix: opts?.breadcrumbsPrefix,\n            });\n        },\n        getType: () => SchemaType.UNION,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n        ...getObjectLikeUtils(baseSchema),\n    };\n}\n\nasync function transformAndValidateUnion<\n    TransformedDiscriminant extends string,\n    TransformedDiscriminantValue extends string,\n    TransformedAdditionalProperties\n>({\n    value,\n    discriminant,\n    transformedDiscriminant,\n    transformDiscriminantValue,\n    getAdditionalPropertiesSchema,\n    allowUnrecognizedUnionMembers = false,\n    transformAdditionalProperties,\n    breadcrumbsPrefix = [],\n}: {\n    value: unknown;\n    discriminant: string;\n    transformedDiscriminant: TransformedDiscriminant;\n    transformDiscriminantValue: (discriminantValue: unknown) => MaybePromise<MaybeValid<TransformedDiscriminantValue>>;\n    getAdditionalPropertiesSchema: (discriminantValue: string) => ObjectSchema<any, any> | undefined;\n    allowUnrecognizedUnionMembers: boolean | undefined;\n    transformAdditionalProperties: (\n        additionalProperties: unknown,\n        additionalPropertiesSchema: ObjectSchema<any, any>\n    ) => MaybePromise<MaybeValid<TransformedAdditionalProperties>>;\n    breadcrumbsPrefix: string[] | undefined;\n}): Promise<\n    MaybeValid<Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties>\n> {\n    if (!isPlainObject(value)) {\n        return {\n            ok: false,\n            errors: [\n                {\n                    path: breadcrumbsPrefix,\n                    message: getErrorMessageForIncorrectType(value, \"object\"),\n                },\n            ],\n        };\n    }\n\n    const { [discriminant]: discriminantValue, ...additionalProperties } = value;\n\n    if (discriminantValue == null) {\n        return {\n            ok: false,\n            errors: [\n                {\n                    path: breadcrumbsPrefix,\n                    message: `Missing discriminant (\"${discriminant}\")`,\n                },\n            ],\n        };\n    }\n\n    const transformedDiscriminantValue = await transformDiscriminantValue(discriminantValue);\n    if (!transformedDiscriminantValue.ok) {\n        return {\n            ok: false,\n            errors: transformedDiscriminantValue.errors,\n        };\n    }\n\n    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);\n\n    if (additionalPropertiesSchema == null) {\n        if (allowUnrecognizedUnionMembers) {\n            return {\n                ok: true,\n                value: {\n                    [transformedDiscriminant]: transformedDiscriminantValue.value,\n                    ...additionalProperties,\n                } as Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties,\n            };\n        } else {\n            return {\n                ok: false,\n                errors: [\n                    {\n                        path: [...breadcrumbsPrefix, discriminant],\n                        message: \"Unexpected discriminant value\",\n                    },\n                ],\n            };\n        }\n    }\n\n    const transformedAdditionalProperties = await transformAdditionalProperties(\n        additionalProperties,\n        additionalPropertiesSchema\n    );\n    if (!transformedAdditionalProperties.ok) {\n        return transformedAdditionalProperties;\n    }\n\n    return {\n        ok: true,\n        value: {\n            [transformedDiscriminant]: discriminantValue,\n            ...transformedAdditionalProperties.value,\n        } as Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties,\n    };\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const DataSinkUpdateComponentOne: core.serialization.Schema<\n    serializers.DataSinkUpdateComponentOne.Raw,\n    PlatformApi.DataSinkUpdateComponentOne\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).ChromaVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).PineconeVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).PgVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).QdrantVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).WeaviateVectorStore),\n]);\n\nexport declare namespace DataSinkUpdateComponentOne {\n    type Raw =\n        | serializers.ChromaVectorStore.Raw\n        | serializers.PineconeVectorStore.Raw\n        | serializers.PgVectorStore.Raw\n        | serializers.QdrantVectorStore.Raw\n        | serializers.WeaviateVectorStore.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const DataSinkUpdateComponent: core.serialization.Schema<\n    serializers.DataSinkUpdateComponent.Raw,\n    PlatformApi.DataSinkUpdateComponent\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.record(core.serialization.string(), core.serialization.unknown()),\n    core.serialization.lazy(async () => (await import(\"../../..\")).DataSinkUpdateComponentOne),\n]);\n\nexport declare namespace DataSinkUpdateComponent {\n    type Raw = Record<string, unknown> | serializers.DataSinkUpdateComponentOne.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const DataSinkUpdate: core.serialization.Schema<serializers.DataSinkUpdate.Raw, PlatformApi.DataSinkUpdate> =\n    core.serialization.object({\n        name: core.serialization.string().optional(),\n        sinkType: core.serialization.property(\n            \"sink_type\",\n            core.serialization.lazy(async () => (await import(\"../../../..\")).ConfigurableDataSinkNames)\n        ),\n        component: core.serialization\n            .lazy(async () => (await import(\"../../../..\")).DataSinkUpdateComponent)\n            .optional(),\n    });\n\nexport declare namespace DataSinkUpdate {\n    interface Raw {\n        name?: string | null;\n        sink_type: serializers.ConfigurableDataSinkNames.Raw;\n        component?: serializers.DataSinkUpdateComponent.Raw | null;\n    }\n}\n","export * from \"./types\";\nexport * from \"./client\";\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const DataSourceUpdateComponentOne: core.serialization.Schema<\n    serializers.DataSourceUpdateComponentOne.Raw,\n    PlatformApi.DataSourceUpdateComponentOne\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).DiscordReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).NotionPageReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).SlackReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).SimpleWebPageReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).TrafilaturaWebReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).BeautifulSoupWebReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).RssReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).YoutubeTranscriptReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).GoogleDocsReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).GoogleSheetsReader),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).ReaderConfig),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).DocumentGroup),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).TextNode),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).Document),\n]);\n\nexport declare namespace DataSourceUpdateComponentOne {\n    type Raw =\n        | serializers.DiscordReader.Raw\n        | serializers.NotionPageReader.Raw\n        | serializers.SlackReader.Raw\n        | serializers.SimpleWebPageReader.Raw\n        | serializers.TrafilaturaWebReader.Raw\n        | serializers.BeautifulSoupWebReader.Raw\n        | serializers.RssReader.Raw\n        | serializers.YoutubeTranscriptReader.Raw\n        | serializers.GoogleDocsReader.Raw\n        | serializers.GoogleSheetsReader.Raw\n        | serializers.ReaderConfig.Raw\n        | serializers.DocumentGroup.Raw\n        | serializers.TextNode.Raw\n        | serializers.Document.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const DataSourceUpdateComponent: core.serialization.Schema<\n    serializers.DataSourceUpdateComponent.Raw,\n    PlatformApi.DataSourceUpdateComponent\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.record(core.serialization.string(), core.serialization.unknown()),\n    core.serialization.lazy(async () => (await import(\"../../..\")).DataSourceUpdateComponentOne),\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).ExternallyStoredComponent),\n]);\n\nexport declare namespace DataSourceUpdateComponent {\n    type Raw =\n        | Record<string, unknown>\n        | serializers.DataSourceUpdateComponentOne.Raw\n        | serializers.ExternallyStoredComponent.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.dataSource.upsertDataSourceFromFiles.Response.Raw,\n    PlatformApi.DataSource[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).DataSource));\n\nexport declare namespace Response {\n    type Raw = serializers.DataSource.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.dataSource.getDataSourceFiles.Response.Raw,\n    PlatformApi.LoadedFile[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).LoadedFile));\n\nexport declare namespace Response {\n    type Raw = serializers.LoadedFile.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.dataSource.getDataSourceExecutions.Response.Raw,\n    PlatformApi.DataSourceLoadJobRecord[]\n> = core.serialization.list(\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).DataSourceLoadJobRecord)\n);\n\nexport declare namespace Response {\n    type Raw = serializers.DataSourceLoadJobRecord.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const BodyUpsertDataSourceFromFilesApiDataSourceFileUploadPut: core.serialization.Schema<\n    serializers.BodyUpsertDataSourceFromFilesApiDataSourceFileUploadPut.Raw,\n    PlatformApi.BodyUpsertDataSourceFromFilesApiDataSourceFileUploadPut\n> = core.serialization.object({\n    files: core.serialization.list(core.serialization.string()),\n});\n\nexport declare namespace BodyUpsertDataSourceFromFilesApiDataSourceFileUploadPut {\n    interface Raw {\n        files: string[];\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const DataSourceUpdate: core.serialization.Schema<\n    serializers.DataSourceUpdate.Raw,\n    PlatformApi.DataSourceUpdate\n> = core.serialization.object({\n    name: core.serialization.string().optional(),\n    sourceType: core.serialization.property(\n        \"source_type\",\n        core.serialization.lazy(async () => (await import(\"../../../..\")).ConfigurableDataSourceNames)\n    ),\n    component: core.serialization.lazy(async () => (await import(\"../../../..\")).DataSourceUpdateComponent).optional(),\n});\n\nexport declare namespace DataSourceUpdate {\n    interface Raw {\n        name?: string | null;\n        source_type: serializers.ConfigurableDataSourceNames.Raw;\n        component?: serializers.DataSourceUpdateComponent.Raw | null;\n    }\n}\n","export * from \"./client\";\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.health.health.Response.Raw,\n    Record<string, string>\n> = core.serialization.record(core.serialization.string(), core.serialization.string());\n\nexport declare namespace Response {\n    type Raw = Record<string, string>;\n}\n","export * from \"./client\";\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<serializers.apiKey.getKeys.Response.Raw, PlatformApi.ApiKey[]> =\n    core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).ApiKey));\n\nexport declare namespace Response {\n    type Raw = serializers.ApiKey.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const ApiKeyCreate: core.serialization.Schema<serializers.ApiKeyCreate.Raw, PlatformApi.ApiKeyCreate> =\n    core.serialization.object({\n        name: core.serialization.string().optional(),\n    });\n\nexport declare namespace ApiKeyCreate {\n    interface Raw {\n        name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const ApiKeyUpdate: core.serialization.Schema<serializers.ApiKeyUpdate.Raw, PlatformApi.ApiKeyUpdate> =\n    core.serialization.object({\n        name: core.serialization.string().optional(),\n    });\n\nexport declare namespace ApiKeyUpdate {\n    interface Raw {\n        name?: string | null;\n    }\n}\n","export * from \"./client\";\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<serializers.project.listProjects.Response.Raw, PlatformApi.Project[]> =\n    core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).Project));\n\nexport declare namespace Response {\n    type Raw = serializers.Project.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.project.getDatasetsForProject.Response.Raw,\n    PlatformApi.EvalDataset[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).EvalDataset));\n\nexport declare namespace Response {\n    type Raw = serializers.EvalDataset.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const ProjectUpdate: core.serialization.Schema<serializers.ProjectUpdate.Raw, PlatformApi.ProjectUpdate> =\n    core.serialization.object({\n        name: core.serialization.string(),\n    });\n\nexport declare namespace ProjectUpdate {\n    interface Raw {\n        name: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const EvalDatasetCreate: core.serialization.Schema<\n    serializers.EvalDatasetCreate.Raw,\n    PlatformApi.EvalDatasetCreate\n> = core.serialization.object({\n    name: core.serialization.string(),\n});\n\nexport declare namespace EvalDatasetCreate {\n    interface Raw {\n        name: string;\n    }\n}\n","export * from \"./client\";\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.searchPipelines.Response.Raw,\n    PlatformApi.Pipeline[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).Pipeline));\n\nexport declare namespace Response {\n    type Raw = serializers.Pipeline.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.getLoadedFilesForPipeline.Response.Raw,\n    PlatformApi.LoadedFile[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).LoadedFile));\n\nexport declare namespace Response {\n    type Raw = serializers.LoadedFile.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.getAllPlaygroundJobs.Response.Raw,\n    PlatformApi.PlaygroundJobRecord[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).PlaygroundJobRecord));\n\nexport declare namespace Response {\n    type Raw = serializers.PlaygroundJobRecord.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.getPlaygroundJobResult.Response.Raw,\n    PlatformApi.PlatformTextNode[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).PlatformTextNode));\n\nexport declare namespace Response {\n    type Raw = serializers.PlatformTextNode.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.getEvalDatasetExecutions.Response.Raw,\n    PlatformApi.EvalDatasetJobRecord[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).EvalDatasetJobRecord));\n\nexport declare namespace Response {\n    type Raw = serializers.EvalDatasetJobRecord.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.getEvalDatasetExecutionResult.Response.Raw,\n    PlatformApi.EvalQuestionResult[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).EvalQuestionResult));\n\nexport declare namespace Response {\n    type Raw = serializers.EvalQuestionResult.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.runManagedRawFilesIngestion.Response.Raw,\n    PlatformApi.DataSourceManagedIngestionJobRecord[]\n> = core.serialization.list(\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).DataSourceManagedIngestionJobRecord)\n);\n\nexport declare namespace Response {\n    type Raw = serializers.DataSourceManagedIngestionJobRecord.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.getManagedDataSourceIngestionExecutions.Response.Raw,\n    PlatformApi.DataSourceManagedIngestionJobRecord[]\n> = core.serialization.list(\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).DataSourceManagedIngestionJobRecord)\n);\n\nexport declare namespace Response {\n    type Raw = serializers.DataSourceManagedIngestionJobRecord.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pipeline.getManagedPipelineIngestionExecutions.Response.Raw,\n    PlatformApi.PipelineManagedIngestionJobRecord[]\n> = core.serialization.list(\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).PipelineManagedIngestionJobRecord)\n);\n\nexport declare namespace Response {\n    type Raw = serializers.PipelineManagedIngestionJobRecord.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const PipelineUpdate: core.serialization.Schema<serializers.PipelineUpdate.Raw, PlatformApi.PipelineUpdate> =\n    core.serialization.object({\n        configuredTransformations: core.serialization.property(\n            \"configured_transformations\",\n            core.serialization\n                .list(\n                    core.serialization.lazyObject(\n                        async () => (await import(\"../../../..\")).ConfiguredTransformationItem\n                    )\n                )\n                .optional()\n        ),\n        dataSourceIds: core.serialization.property(\n            \"data_source_ids\",\n            core.serialization.list(core.serialization.string()).optional()\n        ),\n        dataSources: core.serialization.property(\n            \"data_sources\",\n            core.serialization\n                .list(core.serialization.lazyObject(async () => (await import(\"../../../..\")).DataSourceCreate))\n                .optional()\n        ),\n        dataSinkIds: core.serialization.property(\n            \"data_sink_ids\",\n            core.serialization.list(core.serialization.string()).optional()\n        ),\n        dataSinks: core.serialization.property(\n            \"data_sinks\",\n            core.serialization\n                .list(core.serialization.lazyObject(async () => (await import(\"../../../..\")).DataSinkCreate))\n                .optional()\n        ),\n        presetRetrievalParameters: core.serialization.property(\n            \"preset_retrieval_parameters\",\n            core.serialization.lazyObject(async () => (await import(\"../../../..\")).PresetRetrievalParams).optional()\n        ),\n        evalParameters: core.serialization.property(\n            \"eval_parameters\",\n            core.serialization.lazyObject(async () => (await import(\"../../../..\")).EvalExecutionParams).optional()\n        ),\n        name: core.serialization.string().optional(),\n        managedPipelineId: core.serialization.property(\"managed_pipeline_id\", core.serialization.string().optional()),\n    });\n\nexport declare namespace PipelineUpdate {\n    interface Raw {\n        configured_transformations?: serializers.ConfiguredTransformationItem.Raw[] | null;\n        data_source_ids?: string[] | null;\n        data_sources?: serializers.DataSourceCreate.Raw[] | null;\n        data_sink_ids?: string[] | null;\n        data_sinks?: serializers.DataSinkCreate.Raw[] | null;\n        preset_retrieval_parameters?: serializers.PresetRetrievalParams.Raw | null;\n        eval_parameters?: serializers.EvalExecutionParams.Raw | null;\n        name?: string | null;\n        managed_pipeline_id?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const EvalExecutionCreate: core.serialization.Schema<\n    serializers.EvalExecutionCreate.Raw,\n    PlatformApi.EvalExecutionCreate\n> = core.serialization.object({\n    evalQuestionIds: core.serialization.property(\n        \"eval_question_ids\",\n        core.serialization.list(core.serialization.string())\n    ),\n    params: core.serialization\n        .lazyObject(async () => (await import(\"../../../..\")).EvalExecutionParamsOverride)\n        .optional(),\n});\n\nexport declare namespace EvalExecutionCreate {\n    interface Raw {\n        eval_question_ids: string[];\n        params?: serializers.EvalExecutionParamsOverride.Raw | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const BodyRunManagedRawFilesIngestionApiPipelinePipelineIdManagedIngestRawFilesPut: core.serialization.Schema<\n    serializers.BodyRunManagedRawFilesIngestionApiPipelinePipelineIdManagedIngestRawFilesPut.Raw,\n    PlatformApi.BodyRunManagedRawFilesIngestionApiPipelinePipelineIdManagedIngestRawFilesPut\n> = core.serialization.object({\n    files: core.serialization.list(core.serialization.string()),\n});\n\nexport declare namespace BodyRunManagedRawFilesIngestionApiPipelinePipelineIdManagedIngestRawFilesPut {\n    interface Raw {\n        files: string[];\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const RetrievalParams: core.serialization.Schema<serializers.RetrievalParams.Raw, PlatformApi.RetrievalParams> =\n    core.serialization.object({\n        denseSimilarityTopK: core.serialization.property(\n            \"dense_similarity_top_k\",\n            core.serialization.number().optional()\n        ),\n        sparseSimilarityTopK: core.serialization.property(\n            \"sparse_similarity_top_k\",\n            core.serialization.number().optional()\n        ),\n        enableReranking: core.serialization.property(\"enable_reranking\", core.serialization.boolean().optional()),\n        rerankTopN: core.serialization.property(\"rerank_top_n\", core.serialization.number().optional()),\n        alpha: core.serialization.number().optional(),\n        searchFilters: core.serialization.property(\n            \"search_filters\",\n            core.serialization\n                .record(core.serialization.string(), core.serialization.list(core.serialization.unknown()))\n                .optional()\n        ),\n        query: core.serialization.string(),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace RetrievalParams {\n    interface Raw {\n        dense_similarity_top_k?: number | null;\n        sparse_similarity_top_k?: number | null;\n        enable_reranking?: boolean | null;\n        rerank_top_n?: number | null;\n        alpha?: number | null;\n        search_filters?: Record<string, unknown[]> | null;\n        query: string;\n        class_name?: string | null;\n    }\n}\n","export * from \"./client\";\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.eval.getQuestions.Response.Raw,\n    PlatformApi.EvalQuestion[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).EvalQuestion));\n\nexport declare namespace Response {\n    type Raw = serializers.EvalQuestion.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Request: core.serialization.Schema<\n    serializers.eval.createQuestions.Request.Raw,\n    PlatformApi.EvalQuestionCreate[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).EvalQuestionCreate));\n\nexport declare namespace Request {\n    type Raw = serializers.EvalQuestionCreate.Raw[];\n}\n\nexport const Response: core.serialization.Schema<\n    serializers.eval.createQuestions.Response.Raw,\n    PlatformApi.EvalQuestion[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).EvalQuestion));\n\nexport declare namespace Response {\n    type Raw = serializers.EvalQuestion.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.eval.getSupportedModels.Response.Raw,\n    PlatformApi.SupportedEvalLlmModel[]\n> = core.serialization.list(\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).SupportedEvalLlmModel)\n);\n\nexport declare namespace Response {\n    type Raw = serializers.SupportedEvalLlmModel.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../../..\";\nimport type * as PlatformApi from \"../../../../../api\";\nimport * as core from \"../../../../../core\";\n\nexport const EvalDatasetUpdate: core.serialization.Schema<\n    serializers.EvalDatasetUpdate.Raw,\n    PlatformApi.EvalDatasetUpdate\n> = core.serialization.object({\n    name: core.serialization.string(),\n});\n\nexport declare namespace EvalDatasetUpdate {\n    interface Raw {\n        name: string;\n    }\n}\n","export * from \"./client\";\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.componentDefinition.getAllTransformationDefinitions.Response.Raw,\n    PlatformApi.ConfigurableTransformationDefinition[]\n> = core.serialization.list(\n    core.serialization.lazyObject(async () => (await import(\"../../..\")).ConfigurableTransformationDefinition)\n);\n\nexport declare namespace Response {\n    type Raw = serializers.ConfigurableTransformationDefinition.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.componentDefinition.getAllDataSourceDefinitions.Response.Raw,\n    PlatformApi.DataSourceDefinition[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).DataSourceDefinition));\n\nexport declare namespace Response {\n    type Raw = serializers.DataSourceDefinition.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"../../..\";\nimport type * as PlatformApi from \"../../../../api\";\nimport * as core from \"../../../../core\";\n\nexport const Response: core.serialization.Schema<\n    serializers.componentDefinition.getAllDataSinkDefinitions.Response.Raw,\n    PlatformApi.DataSinkDefinition[]\n> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\"../../..\")).DataSinkDefinition));\n\nexport declare namespace Response {\n    type Raw = serializers.DataSinkDefinition.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ApiKey: core.serialization.ObjectSchema<serializers.ApiKey.Raw, PlatformApi.ApiKey> =\n    core.serialization.object({\n        id: core.serialization.string(),\n        createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n        updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n        name: core.serialization.string().optional(),\n        userId: core.serialization.property(\"user_id\", core.serialization.string()),\n        redactedApiKey: core.serialization.property(\"redacted_api_key\", core.serialization.string()),\n    });\n\nexport declare namespace ApiKey {\n    interface Raw {\n        id: string;\n        created_at?: string | null;\n        updated_at?: string | null;\n        name?: string | null;\n        user_id: string;\n        redacted_api_key: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const AzureOpenAiEmbedding: core.serialization.ObjectSchema<\n    serializers.AzureOpenAiEmbedding.Raw,\n    PlatformApi.AzureOpenAiEmbedding\n> = core.serialization.object({\n    modelName: core.serialization.property(\"model_name\", core.serialization.string().optional()),\n    embedBatchSize: core.serialization.property(\"embed_batch_size\", core.serialization.number().optional()),\n    callbackManager: core.serialization.property(\n        \"callback_manager\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    additionalKwargs: core.serialization.property(\n        \"additional_kwargs\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    apiKey: core.serialization.property(\"api_key\", core.serialization.string()),\n    apiBase: core.serialization.property(\"api_base\", core.serialization.string()),\n    apiVersion: core.serialization.property(\"api_version\", core.serialization.string()),\n    maxRetries: core.serialization.property(\"max_retries\", core.serialization.number().optional()),\n    timeout: core.serialization.number().optional(),\n    defaultHeaders: core.serialization.property(\n        \"default_headers\",\n        core.serialization.record(core.serialization.string(), core.serialization.string()).optional()\n    ),\n    reuseClient: core.serialization.property(\"reuse_client\", core.serialization.boolean().optional()),\n    dimensions: core.serialization.number().optional(),\n    azureEndpoint: core.serialization.property(\"azure_endpoint\", core.serialization.string().optional()),\n    azureDeployment: core.serialization.property(\"azure_deployment\", core.serialization.string().optional()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace AzureOpenAiEmbedding {\n    interface Raw {\n        model_name?: string | null;\n        embed_batch_size?: number | null;\n        callback_manager?: Record<string, unknown> | null;\n        additional_kwargs?: Record<string, unknown> | null;\n        api_key: string;\n        api_base: string;\n        api_version: string;\n        max_retries?: number | null;\n        timeout?: number | null;\n        default_headers?: Record<string, string> | null;\n        reuse_client?: boolean | null;\n        dimensions?: number | null;\n        azure_endpoint?: string | null;\n        azure_deployment?: string | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const BasePydanticReader: core.serialization.ObjectSchema<\n    serializers.BasePydanticReader.Raw,\n    PlatformApi.BasePydanticReader\n> = core.serialization.object({\n    isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace BasePydanticReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const BeautifulSoupWebReader: core.serialization.ObjectSchema<\n    serializers.BeautifulSoupWebReader.Raw,\n    PlatformApi.BeautifulSoupWebReader\n> = core.serialization.object({\n    isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace BeautifulSoupWebReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ChromaVectorStore: core.serialization.ObjectSchema<\n    serializers.ChromaVectorStore.Raw,\n    PlatformApi.ChromaVectorStore\n> = core.serialization.object({\n    storesText: core.serialization.property(\"stores_text\", core.serialization.boolean().optional()),\n    isEmbeddingQuery: core.serialization.property(\"is_embedding_query\", core.serialization.boolean().optional()),\n    flatMetadata: core.serialization.property(\"flat_metadata\", core.serialization.boolean().optional()),\n    collectionName: core.serialization.property(\"collection_name\", core.serialization.string().optional()),\n    host: core.serialization.string().optional(),\n    port: core.serialization.string().optional(),\n    ssl: core.serialization.boolean(),\n    headers: core.serialization.record(core.serialization.string(), core.serialization.string()).optional(),\n    persistDir: core.serialization.property(\"persist_dir\", core.serialization.string().optional()),\n    collectionKwargs: core.serialization.property(\n        \"collection_kwargs\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace ChromaVectorStore {\n    interface Raw {\n        stores_text?: boolean | null;\n        is_embedding_query?: boolean | null;\n        flat_metadata?: boolean | null;\n        collection_name?: string | null;\n        host?: string | null;\n        port?: string | null;\n        ssl: boolean;\n        headers?: Record<string, string> | null;\n        persist_dir?: string | null;\n        collection_kwargs?: Record<string, unknown> | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const CodeSplitter: core.serialization.ObjectSchema<serializers.CodeSplitter.Raw, PlatformApi.CodeSplitter> =\n    core.serialization.object({\n        includeMetadata: core.serialization.property(\"include_metadata\", core.serialization.boolean().optional()),\n        includePrevNextRel: core.serialization.property(\n            \"include_prev_next_rel\",\n            core.serialization.boolean().optional()\n        ),\n        callbackManager: core.serialization.property(\n            \"callback_manager\",\n            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n        ),\n        language: core.serialization.string(),\n        chunkLines: core.serialization.property(\"chunk_lines\", core.serialization.number().optional()),\n        chunkLinesOverlap: core.serialization.property(\"chunk_lines_overlap\", core.serialization.number().optional()),\n        maxChars: core.serialization.property(\"max_chars\", core.serialization.number().optional()),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace CodeSplitter {\n    interface Raw {\n        include_metadata?: boolean | null;\n        include_prev_next_rel?: boolean | null;\n        callback_manager?: Record<string, unknown> | null;\n        language: string;\n        chunk_lines?: number | null;\n        chunk_lines_overlap?: number | null;\n        max_chars?: number | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ConfigurableDataSinkNames: core.serialization.Schema<\n    serializers.ConfigurableDataSinkNames.Raw,\n    PlatformApi.ConfigurableDataSinkNames\n> = core.serialization.enum_([\"CHROMA\", \"PINECONE\", \"POSTGRES\", \"QDRANT\", \"WEAVIATE\"]);\n\nexport declare namespace ConfigurableDataSinkNames {\n    type Raw = \"CHROMA\" | \"PINECONE\" | \"POSTGRES\" | \"QDRANT\" | \"WEAVIATE\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ConfigurableDataSourceNames: core.serialization.Schema<\n    serializers.ConfigurableDataSourceNames.Raw,\n    PlatformApi.ConfigurableDataSourceNames\n> = core.serialization.enum_([\n    \"DISCORD\",\n    \"NOTION_PAGE\",\n    \"SLACK\",\n    \"SIMPLE_WEB_PAGE\",\n    \"TRAFILATURA_WEB_PAGE\",\n    \"BEAUTIFUL_SOUP_WEB_PAGE\",\n    \"RSS\",\n    \"YOUTUBE_TRANSCRIPT\",\n    \"GOOGLE_DOCS\",\n    \"GOOGLE_SHEETS\",\n    \"READER\",\n    \"DOCUMENT_GROUP\",\n    \"TEXT_NODE\",\n    \"DOCUMENT\",\n]);\n\nexport declare namespace ConfigurableDataSourceNames {\n    type Raw =\n        | \"DISCORD\"\n        | \"NOTION_PAGE\"\n        | \"SLACK\"\n        | \"SIMPLE_WEB_PAGE\"\n        | \"TRAFILATURA_WEB_PAGE\"\n        | \"BEAUTIFUL_SOUP_WEB_PAGE\"\n        | \"RSS\"\n        | \"YOUTUBE_TRANSCRIPT\"\n        | \"GOOGLE_DOCS\"\n        | \"GOOGLE_SHEETS\"\n        | \"READER\"\n        | \"DOCUMENT_GROUP\"\n        | \"TEXT_NODE\"\n        | \"DOCUMENT\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ConfigurableTransformationDefinition: core.serialization.ObjectSchema<\n    serializers.ConfigurableTransformationDefinition.Raw,\n    PlatformApi.ConfigurableTransformationDefinition\n> = core.serialization.object({\n    label: core.serialization.string(),\n    jsonSchema: core.serialization.property(\n        \"json_schema\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown())\n    ),\n    configurableTransformationType: core.serialization.property(\n        \"configurable_transformation_type\",\n        core.serialization.lazy(async () => (await import(\"..\")).ConfigurableTransformationNames)\n    ),\n    transformationCategory: core.serialization.property(\n        \"transformation_category\",\n        core.serialization.lazy(async () => (await import(\"..\")).TransformationCategoryNames)\n    ),\n});\n\nexport declare namespace ConfigurableTransformationDefinition {\n    interface Raw {\n        label: string;\n        json_schema: Record<string, unknown>;\n        configurable_transformation_type: serializers.ConfigurableTransformationNames.Raw;\n        transformation_category: serializers.TransformationCategoryNames.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ConfigurableTransformationNames: core.serialization.Schema<\n    serializers.ConfigurableTransformationNames.Raw,\n    PlatformApi.ConfigurableTransformationNames\n> = core.serialization.enum_([\n    \"CODE_NODE_PARSER\",\n    \"SENTENCE_AWARE_NODE_PARSER\",\n    \"TOKEN_AWARE_NODE_PARSER\",\n    \"HTML_NODE_PARSER\",\n    \"MARKDOWN_NODE_PARSER\",\n    \"JSON_NODE_PARSER\",\n    \"SIMPLE_FILE_NODE_PARSER\",\n    \"OPENAI_EMBEDDING\",\n    \"AZURE_EMBEDDING\",\n]);\n\nexport declare namespace ConfigurableTransformationNames {\n    type Raw =\n        | \"CODE_NODE_PARSER\"\n        | \"SENTENCE_AWARE_NODE_PARSER\"\n        | \"TOKEN_AWARE_NODE_PARSER\"\n        | \"HTML_NODE_PARSER\"\n        | \"MARKDOWN_NODE_PARSER\"\n        | \"JSON_NODE_PARSER\"\n        | \"SIMPLE_FILE_NODE_PARSER\"\n        | \"OPENAI_EMBEDDING\"\n        | \"AZURE_EMBEDDING\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ConfiguredTransformationItemComponentOne: core.serialization.Schema<\n    serializers.ConfiguredTransformationItemComponentOne.Raw,\n    PlatformApi.ConfiguredTransformationItemComponentOne\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"..\")).CodeSplitter),\n    core.serialization.lazyObject(async () => (await import(\"..\")).SentenceSplitter),\n    core.serialization.lazyObject(async () => (await import(\"..\")).TokenTextSplitter),\n    core.serialization.lazyObject(async () => (await import(\"..\")).HtmlNodeParser),\n    core.serialization.lazyObject(async () => (await import(\"..\")).MarkdownNodeParser),\n    core.serialization.lazyObject(async () => (await import(\"..\")).JsonNodeParser),\n    core.serialization.lazyObject(async () => (await import(\"..\")).SimpleFileNodeParser),\n    core.serialization.lazyObject(async () => (await import(\"..\")).OpenAiEmbedding),\n    core.serialization.lazyObject(async () => (await import(\"..\")).AzureOpenAiEmbedding),\n]);\n\nexport declare namespace ConfiguredTransformationItemComponentOne {\n    type Raw =\n        | serializers.CodeSplitter.Raw\n        | serializers.SentenceSplitter.Raw\n        | serializers.TokenTextSplitter.Raw\n        | serializers.HtmlNodeParser.Raw\n        | serializers.MarkdownNodeParser.Raw\n        | serializers.JsonNodeParser.Raw\n        | serializers.SimpleFileNodeParser.Raw\n        | serializers.OpenAiEmbedding.Raw\n        | serializers.AzureOpenAiEmbedding.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ConfiguredTransformationItemComponent: core.serialization.Schema<\n    serializers.ConfiguredTransformationItemComponent.Raw,\n    PlatformApi.ConfiguredTransformationItemComponent\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.record(core.serialization.string(), core.serialization.unknown()),\n    core.serialization.lazy(async () => (await import(\"..\")).ConfiguredTransformationItemComponentOne),\n]);\n\nexport declare namespace ConfiguredTransformationItemComponent {\n    type Raw = Record<string, unknown> | serializers.ConfiguredTransformationItemComponentOne.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ConfiguredTransformationItem: core.serialization.ObjectSchema<\n    serializers.ConfiguredTransformationItem.Raw,\n    PlatformApi.ConfiguredTransformationItem\n> = core.serialization.object({\n    id: core.serialization.string().optional(),\n    configurableTransformationType: core.serialization.property(\n        \"configurable_transformation_type\",\n        core.serialization.lazy(async () => (await import(\"..\")).ConfigurableTransformationNames)\n    ),\n    component: core.serialization.lazy(async () => (await import(\"..\")).ConfiguredTransformationItemComponent),\n});\n\nexport declare namespace ConfiguredTransformationItem {\n    interface Raw {\n        id?: string | null;\n        configurable_transformation_type: serializers.ConfigurableTransformationNames.Raw;\n        component: serializers.ConfiguredTransformationItemComponent.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSinkComponentOne: core.serialization.Schema<\n    serializers.DataSinkComponentOne.Raw,\n    PlatformApi.DataSinkComponentOne\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"..\")).ChromaVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"..\")).PineconeVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"..\")).PgVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"..\")).QdrantVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"..\")).WeaviateVectorStore),\n]);\n\nexport declare namespace DataSinkComponentOne {\n    type Raw =\n        | serializers.ChromaVectorStore.Raw\n        | serializers.PineconeVectorStore.Raw\n        | serializers.PgVectorStore.Raw\n        | serializers.QdrantVectorStore.Raw\n        | serializers.WeaviateVectorStore.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSinkComponent: core.serialization.Schema<\n    serializers.DataSinkComponent.Raw,\n    PlatformApi.DataSinkComponent\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.record(core.serialization.string(), core.serialization.unknown()),\n    core.serialization.lazy(async () => (await import(\"..\")).DataSinkComponentOne),\n]);\n\nexport declare namespace DataSinkComponent {\n    type Raw = Record<string, unknown> | serializers.DataSinkComponentOne.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSink: core.serialization.ObjectSchema<serializers.DataSink.Raw, PlatformApi.DataSink> =\n    core.serialization.object({\n        id: core.serialization.string(),\n        createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n        updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n        name: core.serialization.string(),\n        sinkType: core.serialization.property(\n            \"sink_type\",\n            core.serialization.lazy(async () => (await import(\"..\")).ConfigurableDataSinkNames)\n        ),\n        component: core.serialization.lazy(async () => (await import(\"..\")).DataSinkComponent),\n    });\n\nexport declare namespace DataSink {\n    interface Raw {\n        id: string;\n        created_at?: string | null;\n        updated_at?: string | null;\n        name: string;\n        sink_type: serializers.ConfigurableDataSinkNames.Raw;\n        component: serializers.DataSinkComponent.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSinkCreateComponentOne: core.serialization.Schema<\n    serializers.DataSinkCreateComponentOne.Raw,\n    PlatformApi.DataSinkCreateComponentOne\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"..\")).ChromaVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"..\")).PineconeVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"..\")).PgVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"..\")).QdrantVectorStore),\n    core.serialization.lazyObject(async () => (await import(\"..\")).WeaviateVectorStore),\n]);\n\nexport declare namespace DataSinkCreateComponentOne {\n    type Raw =\n        | serializers.ChromaVectorStore.Raw\n        | serializers.PineconeVectorStore.Raw\n        | serializers.PgVectorStore.Raw\n        | serializers.QdrantVectorStore.Raw\n        | serializers.WeaviateVectorStore.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSinkCreateComponent: core.serialization.Schema<\n    serializers.DataSinkCreateComponent.Raw,\n    PlatformApi.DataSinkCreateComponent\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.record(core.serialization.string(), core.serialization.unknown()),\n    core.serialization.lazy(async () => (await import(\"..\")).DataSinkCreateComponentOne),\n]);\n\nexport declare namespace DataSinkCreateComponent {\n    type Raw = Record<string, unknown> | serializers.DataSinkCreateComponentOne.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSinkCreate: core.serialization.ObjectSchema<\n    serializers.DataSinkCreate.Raw,\n    PlatformApi.DataSinkCreate\n> = core.serialization.object({\n    name: core.serialization.string(),\n    sinkType: core.serialization.property(\n        \"sink_type\",\n        core.serialization.lazy(async () => (await import(\"..\")).ConfigurableDataSinkNames)\n    ),\n    component: core.serialization.lazy(async () => (await import(\"..\")).DataSinkCreateComponent),\n});\n\nexport declare namespace DataSinkCreate {\n    interface Raw {\n        name: string;\n        sink_type: serializers.ConfigurableDataSinkNames.Raw;\n        component: serializers.DataSinkCreateComponent.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSinkDefinition: core.serialization.ObjectSchema<\n    serializers.DataSinkDefinition.Raw,\n    PlatformApi.DataSinkDefinition\n> = core.serialization.object({\n    label: core.serialization.string(),\n    jsonSchema: core.serialization.property(\n        \"json_schema\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown())\n    ),\n    sinkType: core.serialization.property(\n        \"sink_type\",\n        core.serialization.lazy(async () => (await import(\"..\")).ConfigurableDataSinkNames)\n    ),\n});\n\nexport declare namespace DataSinkDefinition {\n    interface Raw {\n        label: string;\n        json_schema: Record<string, unknown>;\n        sink_type: serializers.ConfigurableDataSinkNames.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSourceComponentOne: core.serialization.Schema<\n    serializers.DataSourceComponentOne.Raw,\n    PlatformApi.DataSourceComponentOne\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"..\")).DiscordReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).NotionPageReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).SlackReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).SimpleWebPageReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).TrafilaturaWebReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).BeautifulSoupWebReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).RssReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).YoutubeTranscriptReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).GoogleDocsReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).GoogleSheetsReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).ReaderConfig),\n    core.serialization.lazyObject(async () => (await import(\"..\")).DocumentGroup),\n    core.serialization.lazyObject(async () => (await import(\"..\")).TextNode),\n    core.serialization.lazyObject(async () => (await import(\"..\")).Document),\n]);\n\nexport declare namespace DataSourceComponentOne {\n    type Raw =\n        | serializers.DiscordReader.Raw\n        | serializers.NotionPageReader.Raw\n        | serializers.SlackReader.Raw\n        | serializers.SimpleWebPageReader.Raw\n        | serializers.TrafilaturaWebReader.Raw\n        | serializers.BeautifulSoupWebReader.Raw\n        | serializers.RssReader.Raw\n        | serializers.YoutubeTranscriptReader.Raw\n        | serializers.GoogleDocsReader.Raw\n        | serializers.GoogleSheetsReader.Raw\n        | serializers.ReaderConfig.Raw\n        | serializers.DocumentGroup.Raw\n        | serializers.TextNode.Raw\n        | serializers.Document.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSourceComponent: core.serialization.Schema<\n    serializers.DataSourceComponent.Raw,\n    PlatformApi.DataSourceComponent\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.record(core.serialization.string(), core.serialization.unknown()),\n    core.serialization.lazy(async () => (await import(\"..\")).DataSourceComponentOne),\n    core.serialization.lazyObject(async () => (await import(\"..\")).ExternallyStoredComponent),\n]);\n\nexport declare namespace DataSourceComponent {\n    type Raw =\n        | Record<string, unknown>\n        | serializers.DataSourceComponentOne.Raw\n        | serializers.ExternallyStoredComponent.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSource: core.serialization.ObjectSchema<serializers.DataSource.Raw, PlatformApi.DataSource> =\n    core.serialization.object({\n        id: core.serialization.string(),\n        createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n        updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n        name: core.serialization.string(),\n        sourceType: core.serialization.property(\n            \"source_type\",\n            core.serialization.lazy(async () => (await import(\"..\")).ConfigurableDataSourceNames)\n        ),\n        component: core.serialization.lazy(async () => (await import(\"..\")).DataSourceComponent),\n    });\n\nexport declare namespace DataSource {\n    interface Raw {\n        id: string;\n        created_at?: string | null;\n        updated_at?: string | null;\n        name: string;\n        source_type: serializers.ConfigurableDataSourceNames.Raw;\n        component: serializers.DataSourceComponent.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSourceCreateComponentOne: core.serialization.Schema<\n    serializers.DataSourceCreateComponentOne.Raw,\n    PlatformApi.DataSourceCreateComponentOne\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"..\")).DiscordReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).NotionPageReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).SlackReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).SimpleWebPageReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).TrafilaturaWebReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).BeautifulSoupWebReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).RssReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).YoutubeTranscriptReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).GoogleDocsReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).GoogleSheetsReader),\n    core.serialization.lazyObject(async () => (await import(\"..\")).ReaderConfig),\n    core.serialization.lazyObject(async () => (await import(\"..\")).DocumentGroup),\n    core.serialization.lazyObject(async () => (await import(\"..\")).TextNode),\n    core.serialization.lazyObject(async () => (await import(\"..\")).Document),\n]);\n\nexport declare namespace DataSourceCreateComponentOne {\n    type Raw =\n        | serializers.DiscordReader.Raw\n        | serializers.NotionPageReader.Raw\n        | serializers.SlackReader.Raw\n        | serializers.SimpleWebPageReader.Raw\n        | serializers.TrafilaturaWebReader.Raw\n        | serializers.BeautifulSoupWebReader.Raw\n        | serializers.RssReader.Raw\n        | serializers.YoutubeTranscriptReader.Raw\n        | serializers.GoogleDocsReader.Raw\n        | serializers.GoogleSheetsReader.Raw\n        | serializers.ReaderConfig.Raw\n        | serializers.DocumentGroup.Raw\n        | serializers.TextNode.Raw\n        | serializers.Document.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSourceCreateComponent: core.serialization.Schema<\n    serializers.DataSourceCreateComponent.Raw,\n    PlatformApi.DataSourceCreateComponent\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.record(core.serialization.string(), core.serialization.unknown()),\n    core.serialization.lazy(async () => (await import(\"..\")).DataSourceCreateComponentOne),\n    core.serialization.lazyObject(async () => (await import(\"..\")).ExternallyStoredComponent),\n]);\n\nexport declare namespace DataSourceCreateComponent {\n    type Raw =\n        | Record<string, unknown>\n        | serializers.DataSourceCreateComponentOne.Raw\n        | serializers.ExternallyStoredComponent.Raw;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSourceCreate: core.serialization.ObjectSchema<\n    serializers.DataSourceCreate.Raw,\n    PlatformApi.DataSourceCreate\n> = core.serialization.object({\n    name: core.serialization.string(),\n    sourceType: core.serialization.property(\n        \"source_type\",\n        core.serialization.lazy(async () => (await import(\"..\")).ConfigurableDataSourceNames)\n    ),\n    component: core.serialization.lazy(async () => (await import(\"..\")).DataSourceCreateComponent),\n});\n\nexport declare namespace DataSourceCreate {\n    interface Raw {\n        name: string;\n        source_type: serializers.ConfigurableDataSourceNames.Raw;\n        component: serializers.DataSourceCreateComponent.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSourceDefinition: core.serialization.ObjectSchema<\n    serializers.DataSourceDefinition.Raw,\n    PlatformApi.DataSourceDefinition\n> = core.serialization.object({\n    label: core.serialization.string(),\n    jsonSchema: core.serialization.property(\n        \"json_schema\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown())\n    ),\n    sourceType: core.serialization.property(\n        \"source_type\",\n        core.serialization.lazy(async () => (await import(\"..\")).ConfigurableDataSourceNames)\n    ),\n});\n\nexport declare namespace DataSourceDefinition {\n    interface Raw {\n        label: string;\n        json_schema: Record<string, unknown>;\n        source_type: serializers.ConfigurableDataSourceNames.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSourceLoadJobRecord: core.serialization.ObjectSchema<\n    serializers.DataSourceLoadJobRecord.Raw,\n    PlatformApi.DataSourceLoadJobRecord\n> = core.serialization.object({\n    id: core.serialization.string().optional(),\n    jobName: core.serialization.property(\n        \"job_name\",\n        core.serialization.lazy(async () => (await import(\"..\")).JobNames).optional()\n    ),\n    status: core.serialization.lazy(async () => (await import(\"..\")).StatusEnum),\n    startedAt: core.serialization.property(\"started_at\", core.serialization.date().optional()),\n    endedAt: core.serialization.property(\"ended_at\", core.serialization.date().optional()),\n    createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n    updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n    partitions: core.serialization.record(core.serialization.string(), core.serialization.string()),\n});\n\nexport declare namespace DataSourceLoadJobRecord {\n    interface Raw {\n        id?: string | null;\n        job_name?: serializers.JobNames.Raw | null;\n        status: serializers.StatusEnum.Raw;\n        started_at?: string | null;\n        ended_at?: string | null;\n        created_at?: string | null;\n        updated_at?: string | null;\n        partitions: Record<string, string>;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DataSourceManagedIngestionJobRecord: core.serialization.ObjectSchema<\n    serializers.DataSourceManagedIngestionJobRecord.Raw,\n    PlatformApi.DataSourceManagedIngestionJobRecord\n> = core.serialization.object({\n    id: core.serialization.string().optional(),\n    jobName: core.serialization.property(\n        \"job_name\",\n        core.serialization.lazy(async () => (await import(\"..\")).JobNames)\n    ),\n    status: core.serialization.lazy(async () => (await import(\"..\")).StatusEnum),\n    startedAt: core.serialization.property(\"started_at\", core.serialization.date().optional()),\n    endedAt: core.serialization.property(\"ended_at\", core.serialization.date().optional()),\n    createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n    updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n    partitions: core.serialization.record(core.serialization.string(), core.serialization.string()),\n});\n\nexport declare namespace DataSourceManagedIngestionJobRecord {\n    interface Raw {\n        id?: string | null;\n        job_name: serializers.JobNames.Raw;\n        status: serializers.StatusEnum.Raw;\n        started_at?: string | null;\n        ended_at?: string | null;\n        created_at?: string | null;\n        updated_at?: string | null;\n        partitions: Record<string, string>;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DiscordReader: core.serialization.ObjectSchema<serializers.DiscordReader.Raw, PlatformApi.DiscordReader> =\n    core.serialization.object({\n        isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n        discordToken: core.serialization.property(\"discord_token\", core.serialization.string()),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace DiscordReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        discord_token: string;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DocumentRelationshipsValue: core.serialization.Schema<\n    serializers.DocumentRelationshipsValue.Raw,\n    PlatformApi.DocumentRelationshipsValue\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"..\")).RelatedNodeInfo),\n    core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).RelatedNodeInfo)),\n]);\n\nexport declare namespace DocumentRelationshipsValue {\n    type Raw = serializers.RelatedNodeInfo.Raw | serializers.RelatedNodeInfo.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const Document: core.serialization.ObjectSchema<serializers.Document.Raw, PlatformApi.Document> =\n    core.serialization.object({\n        docId: core.serialization.property(\"doc_id\", core.serialization.string().optional()),\n        embedding: core.serialization.list(core.serialization.number()).optional(),\n        extraInfo: core.serialization.property(\n            \"extra_info\",\n            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n        ),\n        excludedEmbedMetadataKeys: core.serialization.property(\n            \"excluded_embed_metadata_keys\",\n            core.serialization.list(core.serialization.string()).optional()\n        ),\n        excludedLlmMetadataKeys: core.serialization.property(\n            \"excluded_llm_metadata_keys\",\n            core.serialization.list(core.serialization.string()).optional()\n        ),\n        relationships: core.serialization\n            .record(\n                core.serialization.string(),\n                core.serialization.lazy(async () => (await import(\"..\")).DocumentRelationshipsValue)\n            )\n            .optional(),\n        text: core.serialization.string().optional(),\n        startCharIdx: core.serialization.property(\"start_char_idx\", core.serialization.number().optional()),\n        endCharIdx: core.serialization.property(\"end_char_idx\", core.serialization.number().optional()),\n        textTemplate: core.serialization.property(\"text_template\", core.serialization.string().optional()),\n        metadataTemplate: core.serialization.property(\"metadata_template\", core.serialization.string().optional()),\n        metadataSeperator: core.serialization.property(\"metadata_seperator\", core.serialization.string().optional()),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace Document {\n    interface Raw {\n        doc_id?: string | null;\n        embedding?: number[] | null;\n        extra_info?: Record<string, unknown> | null;\n        excluded_embed_metadata_keys?: string[] | null;\n        excluded_llm_metadata_keys?: string[] | null;\n        relationships?: Record<string, serializers.DocumentRelationshipsValue.Raw> | null;\n        text?: string | null;\n        start_char_idx?: number | null;\n        end_char_idx?: number | null;\n        text_template?: string | null;\n        metadata_template?: string | null;\n        metadata_seperator?: string | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const DocumentGroup: core.serialization.ObjectSchema<serializers.DocumentGroup.Raw, PlatformApi.DocumentGroup> =\n    core.serialization.object({\n        isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n        filePath: core.serialization.property(\"file_path\", core.serialization.string()),\n        documents: core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).Document)),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace DocumentGroup {\n    interface Raw {\n        is_remote?: boolean | null;\n        file_path: string;\n        documents: serializers.Document.Raw[];\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const EvalDataset: core.serialization.ObjectSchema<serializers.EvalDataset.Raw, PlatformApi.EvalDataset> =\n    core.serialization.object({\n        id: core.serialization.string(),\n        createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n        updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n        name: core.serialization.string(),\n        projectId: core.serialization.property(\"project_id\", core.serialization.string()),\n    });\n\nexport declare namespace EvalDataset {\n    interface Raw {\n        id: string;\n        created_at?: string | null;\n        updated_at?: string | null;\n        name: string;\n        project_id: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const EvalDatasetJobRecord: core.serialization.ObjectSchema<\n    serializers.EvalDatasetJobRecord.Raw,\n    PlatformApi.EvalDatasetJobRecord\n> = core.serialization.object({\n    id: core.serialization.string().optional(),\n    jobName: core.serialization.property(\n        \"job_name\",\n        core.serialization.lazy(async () => (await import(\"..\")).JobNames)\n    ),\n    status: core.serialization.lazy(async () => (await import(\"..\")).StatusEnum),\n    startedAt: core.serialization.property(\"started_at\", core.serialization.date().optional()),\n    endedAt: core.serialization.property(\"ended_at\", core.serialization.date().optional()),\n    createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n    updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n    partitions: core.serialization.record(core.serialization.string(), core.serialization.string()),\n    evalQuestionIds: core.serialization.property(\n        \"eval_question_ids\",\n        core.serialization.list(core.serialization.string())\n    ),\n    evalExecutionParams: core.serialization.property(\n        \"eval_execution_params\",\n        core.serialization.lazyObject(async () => (await import(\"..\")).EvalExecutionParams)\n    ),\n});\n\nexport declare namespace EvalDatasetJobRecord {\n    interface Raw {\n        id?: string | null;\n        job_name: serializers.JobNames.Raw;\n        status: serializers.StatusEnum.Raw;\n        started_at?: string | null;\n        ended_at?: string | null;\n        created_at?: string | null;\n        updated_at?: string | null;\n        partitions: Record<string, string>;\n        eval_question_ids: string[];\n        eval_execution_params: serializers.EvalExecutionParams.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const EvalExecutionParams: core.serialization.ObjectSchema<\n    serializers.EvalExecutionParams.Raw,\n    PlatformApi.EvalExecutionParams\n> = core.serialization.object({\n    llmModel: core.serialization.property(\n        \"llm_model\",\n        core.serialization.lazy(async () => (await import(\"..\")).SupportedEvalLlmModelNames).optional()\n    ),\n    qaPromptTmpl: core.serialization.property(\"qa_prompt_tmpl\", core.serialization.string().optional()),\n});\n\nexport declare namespace EvalExecutionParams {\n    interface Raw {\n        llm_model?: serializers.SupportedEvalLlmModelNames.Raw | null;\n        qa_prompt_tmpl?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const EvalExecutionParamsOverride: core.serialization.ObjectSchema<\n    serializers.EvalExecutionParamsOverride.Raw,\n    PlatformApi.EvalExecutionParamsOverride\n> = core.serialization.object({\n    llmModel: core.serialization.property(\n        \"llm_model\",\n        core.serialization.lazy(async () => (await import(\"..\")).SupportedEvalLlmModelNames).optional()\n    ),\n    qaPromptTmpl: core.serialization.property(\"qa_prompt_tmpl\", core.serialization.string().optional()),\n});\n\nexport declare namespace EvalExecutionParamsOverride {\n    interface Raw {\n        llm_model?: serializers.SupportedEvalLlmModelNames.Raw | null;\n        qa_prompt_tmpl?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const EvalLlmModelData: core.serialization.ObjectSchema<\n    serializers.EvalLlmModelData.Raw,\n    PlatformApi.EvalLlmModelData\n> = core.serialization.object({\n    name: core.serialization.string(),\n    description: core.serialization.string(),\n});\n\nexport declare namespace EvalLlmModelData {\n    interface Raw {\n        name: string;\n        description: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const EvalQuestion: core.serialization.ObjectSchema<serializers.EvalQuestion.Raw, PlatformApi.EvalQuestion> =\n    core.serialization.object({\n        id: core.serialization.string(),\n        createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n        updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n        content: core.serialization.string(),\n        evalDatasetId: core.serialization.property(\"eval_dataset_id\", core.serialization.string()),\n        evalDatasetIndex: core.serialization.property(\"eval_dataset_index\", core.serialization.number()),\n    });\n\nexport declare namespace EvalQuestion {\n    interface Raw {\n        id: string;\n        created_at?: string | null;\n        updated_at?: string | null;\n        content: string;\n        eval_dataset_id: string;\n        eval_dataset_index: number;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const EvalQuestionCreate: core.serialization.ObjectSchema<\n    serializers.EvalQuestionCreate.Raw,\n    PlatformApi.EvalQuestionCreate\n> = core.serialization.object({\n    content: core.serialization.string(),\n});\n\nexport declare namespace EvalQuestionCreate {\n    interface Raw {\n        content: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const EvalQuestionResult: core.serialization.ObjectSchema<\n    serializers.EvalQuestionResult.Raw,\n    PlatformApi.EvalQuestionResult\n> = core.serialization.object({\n    evalQuestionId: core.serialization.property(\"eval_question_id\", core.serialization.string()),\n    pipelineId: core.serialization.property(\"pipeline_id\", core.serialization.string()),\n    sourceNodes: core.serialization.property(\n        \"source_nodes\",\n        core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).TextNode))\n    ),\n    answer: core.serialization.string(),\n    evalMetrics: core.serialization.property(\n        \"eval_metrics\",\n        core.serialization.record(\n            core.serialization.string(),\n            core.serialization.lazyObject(async () => (await import(\"..\")).MetricResult)\n        )\n    ),\n    evalDatasetExecutionId: core.serialization.property(\"eval_dataset_execution_id\", core.serialization.string()),\n    evalDatasetExecutionParams: core.serialization.property(\n        \"eval_dataset_execution_params\",\n        core.serialization.lazyObject(async () => (await import(\"..\")).EvalExecutionParams)\n    ),\n    evalFinishedAt: core.serialization.property(\"eval_finished_at\", core.serialization.date()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace EvalQuestionResult {\n    interface Raw {\n        eval_question_id: string;\n        pipeline_id: string;\n        source_nodes: serializers.TextNode.Raw[];\n        answer: string;\n        eval_metrics: Record<string, serializers.MetricResult.Raw>;\n        eval_dataset_execution_id: string;\n        eval_dataset_execution_params: serializers.EvalExecutionParams.Raw;\n        eval_finished_at: string;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ExternallyStoredComponent: core.serialization.ObjectSchema<\n    serializers.ExternallyStoredComponent.Raw,\n    PlatformApi.ExternallyStoredComponent\n> = core.serialization.object({\n    id: core.serialization.string(),\n    extraPathPrefix: core.serialization.property(\"extra_path_prefix\", core.serialization.string()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace ExternallyStoredComponent {\n    interface Raw {\n        id: string;\n        extra_path_prefix: string;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const GoogleDocsReader: core.serialization.ObjectSchema<\n    serializers.GoogleDocsReader.Raw,\n    PlatformApi.GoogleDocsReader\n> = core.serialization.object({\n    isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace GoogleDocsReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const GoogleSheetsReader: core.serialization.ObjectSchema<\n    serializers.GoogleSheetsReader.Raw,\n    PlatformApi.GoogleSheetsReader\n> = core.serialization.object({\n    isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace GoogleSheetsReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const HtmlNodeParser: core.serialization.ObjectSchema<\n    serializers.HtmlNodeParser.Raw,\n    PlatformApi.HtmlNodeParser\n> = core.serialization.object({\n    includeMetadata: core.serialization.property(\"include_metadata\", core.serialization.boolean().optional()),\n    includePrevNextRel: core.serialization.property(\"include_prev_next_rel\", core.serialization.boolean().optional()),\n    callbackManager: core.serialization.property(\n        \"callback_manager\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    tags: core.serialization.list(core.serialization.string()).optional(),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace HtmlNodeParser {\n    interface Raw {\n        include_metadata?: boolean | null;\n        include_prev_next_rel?: boolean | null;\n        callback_manager?: Record<string, unknown> | null;\n        tags?: string[] | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const HttpValidationError: core.serialization.ObjectSchema<\n    serializers.HttpValidationError.Raw,\n    PlatformApi.HttpValidationError\n> = core.serialization.object({\n    detail: core.serialization\n        .list(core.serialization.lazyObject(async () => (await import(\"..\")).ValidationError))\n        .optional(),\n});\n\nexport declare namespace HttpValidationError {\n    interface Raw {\n        detail?: serializers.ValidationError.Raw[] | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const JsonNodeParser: core.serialization.ObjectSchema<\n    serializers.JsonNodeParser.Raw,\n    PlatformApi.JsonNodeParser\n> = core.serialization.object({\n    includeMetadata: core.serialization.property(\"include_metadata\", core.serialization.boolean().optional()),\n    includePrevNextRel: core.serialization.property(\"include_prev_next_rel\", core.serialization.boolean().optional()),\n    callbackManager: core.serialization.property(\n        \"callback_manager\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace JsonNodeParser {\n    interface Raw {\n        include_metadata?: boolean | null;\n        include_prev_next_rel?: boolean | null;\n        callback_manager?: Record<string, unknown> | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const JobNames: core.serialization.Schema<serializers.JobNames.Raw, PlatformApi.JobNames> =\n    core.serialization.enum_([\n        \"load_documents_job\",\n        \"playground_job\",\n        \"eval_dataset_job\",\n        \"pipeline_managed_ingestion_job\",\n        \"data_source_managed_ingestion_job\",\n        \"loaded_file_managed_ingestion_job\",\n    ]);\n\nexport declare namespace JobNames {\n    type Raw =\n        | \"load_documents_job\"\n        | \"playground_job\"\n        | \"eval_dataset_job\"\n        | \"pipeline_managed_ingestion_job\"\n        | \"data_source_managed_ingestion_job\"\n        | \"loaded_file_managed_ingestion_job\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const LoadedFile: core.serialization.ObjectSchema<serializers.LoadedFile.Raw, PlatformApi.LoadedFile> =\n    core.serialization.object({\n        id: core.serialization.string(),\n        createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n        updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n        name: core.serialization.string(),\n        fileSize: core.serialization.property(\"file_size\", core.serialization.number().optional()),\n        fileType: core.serialization.property(\"file_type\", core.serialization.string().optional()),\n        numPages: core.serialization.property(\"num_pages\", core.serialization.number().optional()),\n        dataSourceId: core.serialization.property(\"data_source_id\", core.serialization.string()),\n    });\n\nexport declare namespace LoadedFile {\n    interface Raw {\n        id: string;\n        created_at?: string | null;\n        updated_at?: string | null;\n        name: string;\n        file_size?: number | null;\n        file_type?: string | null;\n        num_pages?: number | null;\n        data_source_id: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const LoadedFilePayload: core.serialization.ObjectSchema<\n    serializers.LoadedFilePayload.Raw,\n    PlatformApi.LoadedFilePayload\n> = core.serialization.object({\n    loadedFileId: core.serialization.property(\"loaded_file_id\", core.serialization.string()),\n    documents: core.serialization\n        .list(core.serialization.lazyObject(async () => (await import(\"..\")).Document))\n        .optional(),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace LoadedFilePayload {\n    interface Raw {\n        loaded_file_id: string;\n        documents?: serializers.Document.Raw[] | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ManagedIngestionStatus: core.serialization.Schema<\n    serializers.ManagedIngestionStatus.Raw,\n    PlatformApi.ManagedIngestionStatus\n> = core.serialization.enum_([\"NOT_STARTED\", \"CREATING\", \"IN_PROGRESS\", \"SUCCESS\", \"ERROR\"]);\n\nexport declare namespace ManagedIngestionStatus {\n    type Raw = \"NOT_STARTED\" | \"CREATING\" | \"IN_PROGRESS\" | \"SUCCESS\" | \"ERROR\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const MarkdownNodeParser: core.serialization.ObjectSchema<\n    serializers.MarkdownNodeParser.Raw,\n    PlatformApi.MarkdownNodeParser\n> = core.serialization.object({\n    includeMetadata: core.serialization.property(\"include_metadata\", core.serialization.boolean().optional()),\n    includePrevNextRel: core.serialization.property(\"include_prev_next_rel\", core.serialization.boolean().optional()),\n    callbackManager: core.serialization.property(\n        \"callback_manager\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace MarkdownNodeParser {\n    interface Raw {\n        include_metadata?: boolean | null;\n        include_prev_next_rel?: boolean | null;\n        callback_manager?: Record<string, unknown> | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const MetricResult: core.serialization.ObjectSchema<serializers.MetricResult.Raw, PlatformApi.MetricResult> =\n    core.serialization.object({\n        passing: core.serialization.boolean().optional(),\n        score: core.serialization.number().optional(),\n        feedback: core.serialization.string().optional(),\n    });\n\nexport declare namespace MetricResult {\n    interface Raw {\n        passing?: boolean | null;\n        score?: number | null;\n        feedback?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const NotionPageReader: core.serialization.ObjectSchema<\n    serializers.NotionPageReader.Raw,\n    PlatformApi.NotionPageReader\n> = core.serialization.object({\n    isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n    token: core.serialization.string(),\n    headers: core.serialization.record(core.serialization.string(), core.serialization.string()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace NotionPageReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        token: string;\n        headers: Record<string, string>;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ObjectType: core.serialization.Schema<serializers.ObjectType.Raw, PlatformApi.ObjectType> =\n    core.serialization.enum_([\"1\", \"2\", \"3\", \"4\"]);\n\nexport declare namespace ObjectType {\n    type Raw = \"1\" | \"2\" | \"3\" | \"4\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const OpenAiEmbedding: core.serialization.ObjectSchema<\n    serializers.OpenAiEmbedding.Raw,\n    PlatformApi.OpenAiEmbedding\n> = core.serialization.object({\n    modelName: core.serialization.property(\"model_name\", core.serialization.string().optional()),\n    embedBatchSize: core.serialization.property(\"embed_batch_size\", core.serialization.number().optional()),\n    callbackManager: core.serialization.property(\n        \"callback_manager\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    additionalKwargs: core.serialization.property(\n        \"additional_kwargs\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    apiKey: core.serialization.property(\"api_key\", core.serialization.string()),\n    apiBase: core.serialization.property(\"api_base\", core.serialization.string()),\n    apiVersion: core.serialization.property(\"api_version\", core.serialization.string()),\n    maxRetries: core.serialization.property(\"max_retries\", core.serialization.number().optional()),\n    timeout: core.serialization.number().optional(),\n    defaultHeaders: core.serialization.property(\n        \"default_headers\",\n        core.serialization.record(core.serialization.string(), core.serialization.string()).optional()\n    ),\n    reuseClient: core.serialization.property(\"reuse_client\", core.serialization.boolean().optional()),\n    dimensions: core.serialization.number().optional(),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace OpenAiEmbedding {\n    interface Raw {\n        model_name?: string | null;\n        embed_batch_size?: number | null;\n        callback_manager?: Record<string, unknown> | null;\n        additional_kwargs?: Record<string, unknown> | null;\n        api_key: string;\n        api_base: string;\n        api_version: string;\n        max_retries?: number | null;\n        timeout?: number | null;\n        default_headers?: Record<string, string> | null;\n        reuse_client?: boolean | null;\n        dimensions?: number | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PgVectorStore: core.serialization.ObjectSchema<serializers.PgVectorStore.Raw, PlatformApi.PgVectorStore> =\n    core.serialization.object({\n        storesText: core.serialization.property(\"stores_text\", core.serialization.boolean().optional()),\n        isEmbeddingQuery: core.serialization.property(\"is_embedding_query\", core.serialization.boolean().optional()),\n        connectionString: core.serialization.property(\"connection_string\", core.serialization.string()),\n        asyncConnectionString: core.serialization.property(\"async_connection_string\", core.serialization.string()),\n        tableName: core.serialization.property(\"table_name\", core.serialization.string()),\n        schemaName: core.serialization.property(\"schema_name\", core.serialization.string()),\n        embedDim: core.serialization.property(\"embed_dim\", core.serialization.number()),\n        hybridSearch: core.serialization.property(\"hybrid_search\", core.serialization.boolean()),\n        textSearchConfig: core.serialization.property(\"text_search_config\", core.serialization.string()),\n        cacheOk: core.serialization.property(\"cache_ok\", core.serialization.boolean()),\n        performSetup: core.serialization.property(\"perform_setup\", core.serialization.boolean()),\n        debug: core.serialization.boolean(),\n        useJsonb: core.serialization.property(\"use_jsonb\", core.serialization.boolean()),\n        flatMetadata: core.serialization.property(\"flat_metadata\", core.serialization.boolean().optional()),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace PgVectorStore {\n    interface Raw {\n        stores_text?: boolean | null;\n        is_embedding_query?: boolean | null;\n        connection_string: string;\n        async_connection_string: string;\n        table_name: string;\n        schema_name: string;\n        embed_dim: number;\n        hybrid_search: boolean;\n        text_search_config: string;\n        cache_ok: boolean;\n        perform_setup: boolean;\n        debug: boolean;\n        use_jsonb: boolean;\n        flat_metadata?: boolean | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ParserLanguages: core.serialization.Schema<serializers.ParserLanguages.Raw, PlatformApi.ParserLanguages> =\n    core.serialization.enum_([\n        \"af\",\n        \"az\",\n        \"bs\",\n        \"cs\",\n        \"cy\",\n        \"da\",\n        \"de\",\n        \"en\",\n        \"es\",\n        \"et\",\n        \"fr\",\n        \"ga\",\n        \"hr\",\n        \"hu\",\n        \"id\",\n        \"is\",\n        \"it\",\n        \"ku\",\n        \"la\",\n        \"lt\",\n        \"lv\",\n        \"mi\",\n        \"ms\",\n        \"mt\",\n        \"nl\",\n        \"no\",\n        \"oc\",\n        \"pi\",\n        \"pl\",\n        \"pt\",\n        \"ro\",\n        \"rs_latin\",\n        \"sk\",\n        \"sl\",\n        \"sq\",\n        \"sv\",\n        \"sw\",\n        \"tl\",\n        \"tr\",\n        \"uz\",\n        \"vi\",\n        \"ar\",\n        \"fa\",\n        \"ug\",\n        \"ur\",\n        \"bn\",\n        \"as\",\n        \"mni\",\n        \"ru\",\n        \"rs_cyrillic\",\n        \"be\",\n        \"bg\",\n        \"uk\",\n        \"mn\",\n        \"abq\",\n        \"ady\",\n        \"kbd\",\n        \"ava\",\n        \"dar\",\n        \"inh\",\n        \"che\",\n        \"lbe\",\n        \"lez\",\n        \"tab\",\n        \"tjk\",\n        \"hi\",\n        \"mr\",\n        \"ne\",\n        \"bh\",\n        \"mai\",\n        \"ang\",\n        \"bho\",\n        \"mah\",\n        \"sck\",\n        \"new\",\n        \"gom\",\n        \"sa\",\n        \"bgc\",\n        \"th\",\n        \"ch_sim\",\n        \"ch_tra\",\n        \"ja\",\n        \"ko\",\n        \"ta\",\n        \"te\",\n        \"kn\",\n    ]);\n\nexport declare namespace ParserLanguages {\n    type Raw =\n        | \"af\"\n        | \"az\"\n        | \"bs\"\n        | \"cs\"\n        | \"cy\"\n        | \"da\"\n        | \"de\"\n        | \"en\"\n        | \"es\"\n        | \"et\"\n        | \"fr\"\n        | \"ga\"\n        | \"hr\"\n        | \"hu\"\n        | \"id\"\n        | \"is\"\n        | \"it\"\n        | \"ku\"\n        | \"la\"\n        | \"lt\"\n        | \"lv\"\n        | \"mi\"\n        | \"ms\"\n        | \"mt\"\n        | \"nl\"\n        | \"no\"\n        | \"oc\"\n        | \"pi\"\n        | \"pl\"\n        | \"pt\"\n        | \"ro\"\n        | \"rs_latin\"\n        | \"sk\"\n        | \"sl\"\n        | \"sq\"\n        | \"sv\"\n        | \"sw\"\n        | \"tl\"\n        | \"tr\"\n        | \"uz\"\n        | \"vi\"\n        | \"ar\"\n        | \"fa\"\n        | \"ug\"\n        | \"ur\"\n        | \"bn\"\n        | \"as\"\n        | \"mni\"\n        | \"ru\"\n        | \"rs_cyrillic\"\n        | \"be\"\n        | \"bg\"\n        | \"uk\"\n        | \"mn\"\n        | \"abq\"\n        | \"ady\"\n        | \"kbd\"\n        | \"ava\"\n        | \"dar\"\n        | \"inh\"\n        | \"che\"\n        | \"lbe\"\n        | \"lez\"\n        | \"tab\"\n        | \"tjk\"\n        | \"hi\"\n        | \"mr\"\n        | \"ne\"\n        | \"bh\"\n        | \"mai\"\n        | \"ang\"\n        | \"bho\"\n        | \"mah\"\n        | \"sck\"\n        | \"new\"\n        | \"gom\"\n        | \"sa\"\n        | \"bgc\"\n        | \"th\"\n        | \"ch_sim\"\n        | \"ch_tra\"\n        | \"ja\"\n        | \"ko\"\n        | \"ta\"\n        | \"te\"\n        | \"kn\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ParsingJob: core.serialization.ObjectSchema<serializers.ParsingJob.Raw, PlatformApi.ParsingJob> =\n    core.serialization.object({\n        id: core.serialization.string(),\n        status: core.serialization.lazy(async () => (await import(\"..\")).StatusEnum),\n    });\n\nexport declare namespace ParsingJob {\n    interface Raw {\n        id: string;\n        status: serializers.StatusEnum.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ParsingJobMarkdownResult: core.serialization.ObjectSchema<\n    serializers.ParsingJobMarkdownResult.Raw,\n    PlatformApi.ParsingJobMarkdownResult\n> = core.serialization.object({\n    markdown: core.serialization.string(),\n});\n\nexport declare namespace ParsingJobMarkdownResult {\n    interface Raw {\n        markdown: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ParsingJobTextResult: core.serialization.ObjectSchema<\n    serializers.ParsingJobTextResult.Raw,\n    PlatformApi.ParsingJobTextResult\n> = core.serialization.object({\n    text: core.serialization.string(),\n});\n\nexport declare namespace ParsingJobTextResult {\n    interface Raw {\n        text: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ParsingUsage: core.serialization.ObjectSchema<serializers.ParsingUsage.Raw, PlatformApi.ParsingUsage> =\n    core.serialization.object({\n        usagePdfPages: core.serialization.property(\"usage_pdf_pages\", core.serialization.number()),\n        maxPdfPages: core.serialization.property(\"max_pdf_pages\", core.serialization.number()),\n    });\n\nexport declare namespace ParsingUsage {\n    interface Raw {\n        usage_pdf_pages: number;\n        max_pdf_pages: number;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PineconeVectorStore: core.serialization.ObjectSchema<\n    serializers.PineconeVectorStore.Raw,\n    PlatformApi.PineconeVectorStore\n> = core.serialization.object({\n    storesText: core.serialization.property(\"stores_text\", core.serialization.boolean().optional()),\n    isEmbeddingQuery: core.serialization.property(\"is_embedding_query\", core.serialization.boolean().optional()),\n    flatMetadata: core.serialization.property(\"flat_metadata\", core.serialization.boolean().optional()),\n    apiKey: core.serialization.property(\"api_key\", core.serialization.string().optional()),\n    indexName: core.serialization.property(\"index_name\", core.serialization.string().optional()),\n    environment: core.serialization.string().optional(),\n    namespace: core.serialization.string().optional(),\n    insertKwargs: core.serialization.property(\n        \"insert_kwargs\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    addSparseVector: core.serialization.property(\"add_sparse_vector\", core.serialization.boolean()),\n    textKey: core.serialization.property(\"text_key\", core.serialization.string()),\n    batchSize: core.serialization.property(\"batch_size\", core.serialization.number()),\n    removeTextFromMetadata: core.serialization.property(\"remove_text_from_metadata\", core.serialization.boolean()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace PineconeVectorStore {\n    interface Raw {\n        stores_text?: boolean | null;\n        is_embedding_query?: boolean | null;\n        flat_metadata?: boolean | null;\n        api_key?: string | null;\n        index_name?: string | null;\n        environment?: string | null;\n        namespace?: string | null;\n        insert_kwargs?: Record<string, unknown> | null;\n        add_sparse_vector: boolean;\n        text_key: string;\n        batch_size: number;\n        remove_text_from_metadata: boolean;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const Pipeline: core.serialization.ObjectSchema<serializers.Pipeline.Raw, PlatformApi.Pipeline> =\n    core.serialization.object({\n        configuredTransformations: core.serialization.property(\n            \"configured_transformations\",\n            core.serialization.list(\n                core.serialization.lazyObject(async () => (await import(\"..\")).ConfiguredTransformationItem)\n            )\n        ),\n        id: core.serialization.string(),\n        createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n        updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n        name: core.serialization.string(),\n        projectId: core.serialization.property(\"project_id\", core.serialization.string()),\n        pipelineType: core.serialization.property(\n            \"pipeline_type\",\n            core.serialization.lazy(async () => (await import(\"..\")).PipelineType).optional()\n        ),\n        managedPipelineId: core.serialization.property(\"managed_pipeline_id\", core.serialization.string().optional()),\n        presetRetrievalParameters: core.serialization.property(\n            \"preset_retrieval_parameters\",\n            core.serialization.lazyObject(async () => (await import(\"..\")).PresetRetrievalParams).optional()\n        ),\n        evalParameters: core.serialization.property(\n            \"eval_parameters\",\n            core.serialization.lazyObject(async () => (await import(\"..\")).EvalExecutionParams).optional()\n        ),\n        managedIngestionStatus: core.serialization.property(\n            \"managed_ingestion_status\",\n            core.serialization.lazy(async () => (await import(\"..\")).ManagedIngestionStatus).optional()\n        ),\n        dataSources: core.serialization.property(\n            \"data_sources\",\n            core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).DataSource))\n        ),\n        dataSinks: core.serialization.property(\n            \"data_sinks\",\n            core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).DataSink))\n        ),\n    });\n\nexport declare namespace Pipeline {\n    interface Raw {\n        configured_transformations: serializers.ConfiguredTransformationItem.Raw[];\n        id: string;\n        created_at?: string | null;\n        updated_at?: string | null;\n        name: string;\n        project_id: string;\n        pipeline_type?: serializers.PipelineType.Raw | null;\n        managed_pipeline_id?: string | null;\n        preset_retrieval_parameters?: serializers.PresetRetrievalParams.Raw | null;\n        eval_parameters?: serializers.EvalExecutionParams.Raw | null;\n        managed_ingestion_status?: serializers.ManagedIngestionStatus.Raw | null;\n        data_sources: serializers.DataSource.Raw[];\n        data_sinks: serializers.DataSink.Raw[];\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PipelineCreate: core.serialization.ObjectSchema<\n    serializers.PipelineCreate.Raw,\n    PlatformApi.PipelineCreate\n> = core.serialization.object({\n    configuredTransformations: core.serialization.property(\n        \"configured_transformations\",\n        core.serialization\n            .list(core.serialization.lazyObject(async () => (await import(\"..\")).ConfiguredTransformationItem))\n            .optional()\n    ),\n    dataSourceIds: core.serialization.property(\n        \"data_source_ids\",\n        core.serialization.list(core.serialization.string()).optional()\n    ),\n    dataSources: core.serialization.property(\n        \"data_sources\",\n        core.serialization\n            .list(core.serialization.lazyObject(async () => (await import(\"..\")).DataSourceCreate))\n            .optional()\n    ),\n    dataSinkIds: core.serialization.property(\n        \"data_sink_ids\",\n        core.serialization.list(core.serialization.string()).optional()\n    ),\n    dataSinks: core.serialization.property(\n        \"data_sinks\",\n        core.serialization\n            .list(core.serialization.lazyObject(async () => (await import(\"..\")).DataSinkCreate))\n            .optional()\n    ),\n    presetRetrievalParameters: core.serialization.property(\n        \"preset_retrieval_parameters\",\n        core.serialization.lazyObject(async () => (await import(\"..\")).PresetRetrievalParams).optional()\n    ),\n    evalParameters: core.serialization.property(\n        \"eval_parameters\",\n        core.serialization.lazyObject(async () => (await import(\"..\")).EvalExecutionParams).optional()\n    ),\n    name: core.serialization.string(),\n    pipelineType: core.serialization.property(\n        \"pipeline_type\",\n        core.serialization.lazy(async () => (await import(\"..\")).PipelineType).optional()\n    ),\n    managedPipelineId: core.serialization.property(\"managed_pipeline_id\", core.serialization.string().optional()),\n});\n\nexport declare namespace PipelineCreate {\n    interface Raw {\n        configured_transformations?: serializers.ConfiguredTransformationItem.Raw[] | null;\n        data_source_ids?: string[] | null;\n        data_sources?: serializers.DataSourceCreate.Raw[] | null;\n        data_sink_ids?: string[] | null;\n        data_sinks?: serializers.DataSinkCreate.Raw[] | null;\n        preset_retrieval_parameters?: serializers.PresetRetrievalParams.Raw | null;\n        eval_parameters?: serializers.EvalExecutionParams.Raw | null;\n        name: string;\n        pipeline_type?: serializers.PipelineType.Raw | null;\n        managed_pipeline_id?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PipelineManagedIngestionJobRecord: core.serialization.ObjectSchema<\n    serializers.PipelineManagedIngestionJobRecord.Raw,\n    PlatformApi.PipelineManagedIngestionJobRecord\n> = core.serialization.object({\n    id: core.serialization.string().optional(),\n    jobName: core.serialization.property(\n        \"job_name\",\n        core.serialization.lazy(async () => (await import(\"..\")).JobNames)\n    ),\n    status: core.serialization.lazy(async () => (await import(\"..\")).StatusEnum),\n    startedAt: core.serialization.property(\"started_at\", core.serialization.date().optional()),\n    endedAt: core.serialization.property(\"ended_at\", core.serialization.date().optional()),\n    createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n    updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n    partitions: core.serialization.record(core.serialization.string(), core.serialization.string()),\n});\n\nexport declare namespace PipelineManagedIngestionJobRecord {\n    interface Raw {\n        id?: string | null;\n        job_name: serializers.JobNames.Raw;\n        status: serializers.StatusEnum.Raw;\n        started_at?: string | null;\n        ended_at?: string | null;\n        created_at?: string | null;\n        updated_at?: string | null;\n        partitions: Record<string, string>;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PipelineType: core.serialization.Schema<serializers.PipelineType.Raw, PlatformApi.PipelineType> =\n    core.serialization.enum_([\"PLAYGROUND\", \"MANAGED\"]);\n\nexport declare namespace PipelineType {\n    type Raw = \"PLAYGROUND\" | \"MANAGED\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PlatformTextNodeRelationshipsValue: core.serialization.Schema<\n    serializers.PlatformTextNodeRelationshipsValue.Raw,\n    PlatformApi.PlatformTextNodeRelationshipsValue\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"..\")).RelatedNodeInfo),\n    core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).RelatedNodeInfo)),\n]);\n\nexport declare namespace PlatformTextNodeRelationshipsValue {\n    type Raw = serializers.RelatedNodeInfo.Raw | serializers.RelatedNodeInfo.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PlatformTextNode: core.serialization.ObjectSchema<\n    serializers.PlatformTextNode.Raw,\n    PlatformApi.PlatformTextNode\n> = core.serialization.object({\n    id: core.serialization.property(\"id_\", core.serialization.string().optional()),\n    embedding: core.serialization.list(core.serialization.number()).optional(),\n    extraInfo: core.serialization.property(\n        \"extra_info\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    excludedEmbedMetadataKeys: core.serialization.property(\n        \"excluded_embed_metadata_keys\",\n        core.serialization.list(core.serialization.string()).optional()\n    ),\n    excludedLlmMetadataKeys: core.serialization.property(\n        \"excluded_llm_metadata_keys\",\n        core.serialization.list(core.serialization.string()).optional()\n    ),\n    relationships: core.serialization\n        .record(\n            core.serialization.string(),\n            core.serialization.lazy(async () => (await import(\"..\")).PlatformTextNodeRelationshipsValue)\n        )\n        .optional(),\n    text: core.serialization.string().optional(),\n    startCharIdx: core.serialization.property(\"start_char_idx\", core.serialization.number().optional()),\n    endCharIdx: core.serialization.property(\"end_char_idx\", core.serialization.number().optional()),\n    textTemplate: core.serialization.property(\"text_template\", core.serialization.string().optional()),\n    metadataTemplate: core.serialization.property(\"metadata_template\", core.serialization.string().optional()),\n    metadataSeperator: core.serialization.property(\"metadata_seperator\", core.serialization.string().optional()),\n    pipelineId: core.serialization.property(\"pipeline_id\", core.serialization.string()),\n    configuredTransformationId: core.serialization.property(\n        \"configured_transformation_id\",\n        core.serialization.string()\n    ),\n    createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace PlatformTextNode {\n    interface Raw {\n        id_?: string | null;\n        embedding?: number[] | null;\n        extra_info?: Record<string, unknown> | null;\n        excluded_embed_metadata_keys?: string[] | null;\n        excluded_llm_metadata_keys?: string[] | null;\n        relationships?: Record<string, serializers.PlatformTextNodeRelationshipsValue.Raw> | null;\n        text?: string | null;\n        start_char_idx?: number | null;\n        end_char_idx?: number | null;\n        text_template?: string | null;\n        metadata_template?: string | null;\n        metadata_seperator?: string | null;\n        pipeline_id: string;\n        configured_transformation_id: string;\n        created_at?: string | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PlaygroundJobRecord: core.serialization.ObjectSchema<\n    serializers.PlaygroundJobRecord.Raw,\n    PlatformApi.PlaygroundJobRecord\n> = core.serialization.object({\n    id: core.serialization.string().optional(),\n    jobName: core.serialization.property(\n        \"job_name\",\n        core.serialization.lazy(async () => (await import(\"..\")).JobNames)\n    ),\n    status: core.serialization.lazy(async () => (await import(\"..\")).StatusEnum),\n    startedAt: core.serialization.property(\"started_at\", core.serialization.date().optional()),\n    endedAt: core.serialization.property(\"ended_at\", core.serialization.date().optional()),\n    createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n    updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n    partitions: core.serialization.record(core.serialization.string(), core.serialization.string()),\n    loadedFileIds: core.serialization.property(\n        \"loaded_file_ids\",\n        core.serialization.list(core.serialization.string()).optional()\n    ),\n});\n\nexport declare namespace PlaygroundJobRecord {\n    interface Raw {\n        id?: string | null;\n        job_name: serializers.JobNames.Raw;\n        status: serializers.StatusEnum.Raw;\n        started_at?: string | null;\n        ended_at?: string | null;\n        created_at?: string | null;\n        updated_at?: string | null;\n        partitions: Record<string, string>;\n        loaded_file_ids?: string[] | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const PresetRetrievalParams: core.serialization.ObjectSchema<\n    serializers.PresetRetrievalParams.Raw,\n    PlatformApi.PresetRetrievalParams\n> = core.serialization.object({\n    denseSimilarityTopK: core.serialization.property(\"dense_similarity_top_k\", core.serialization.number().optional()),\n    sparseSimilarityTopK: core.serialization.property(\n        \"sparse_similarity_top_k\",\n        core.serialization.number().optional()\n    ),\n    enableReranking: core.serialization.property(\"enable_reranking\", core.serialization.boolean().optional()),\n    rerankTopN: core.serialization.property(\"rerank_top_n\", core.serialization.number().optional()),\n    alpha: core.serialization.number().optional(),\n    searchFilters: core.serialization.property(\n        \"search_filters\",\n        core.serialization\n            .record(core.serialization.string(), core.serialization.list(core.serialization.unknown()))\n            .optional()\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace PresetRetrievalParams {\n    interface Raw {\n        dense_similarity_top_k?: number | null;\n        sparse_similarity_top_k?: number | null;\n        enable_reranking?: boolean | null;\n        rerank_top_n?: number | null;\n        alpha?: number | null;\n        search_filters?: Record<string, unknown[]> | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const Project: core.serialization.ObjectSchema<serializers.Project.Raw, PlatformApi.Project> =\n    core.serialization.object({\n        name: core.serialization.string(),\n        id: core.serialization.string(),\n        createdAt: core.serialization.property(\"created_at\", core.serialization.date().optional()),\n        updatedAt: core.serialization.property(\"updated_at\", core.serialization.date().optional()),\n        pipelines: core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).Pipeline)),\n        adHocEvalDatasetId: core.serialization.property(\n            \"ad_hoc_eval_dataset_id\",\n            core.serialization.string().optional()\n        ),\n    });\n\nexport declare namespace Project {\n    interface Raw {\n        name: string;\n        id: string;\n        created_at?: string | null;\n        updated_at?: string | null;\n        pipelines: serializers.Pipeline.Raw[];\n        ad_hoc_eval_dataset_id?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ProjectCreate: core.serialization.ObjectSchema<serializers.ProjectCreate.Raw, PlatformApi.ProjectCreate> =\n    core.serialization.object({\n        name: core.serialization.string(),\n    });\n\nexport declare namespace ProjectCreate {\n    interface Raw {\n        name: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const QdrantVectorStore: core.serialization.ObjectSchema<\n    serializers.QdrantVectorStore.Raw,\n    PlatformApi.QdrantVectorStore\n> = core.serialization.object({\n    storesText: core.serialization.property(\"stores_text\", core.serialization.boolean().optional()),\n    isEmbeddingQuery: core.serialization.property(\"is_embedding_query\", core.serialization.boolean().optional()),\n    flatMetadata: core.serialization.property(\"flat_metadata\", core.serialization.boolean().optional()),\n    collectionName: core.serialization.property(\"collection_name\", core.serialization.string()),\n    path: core.serialization.string().optional(),\n    url: core.serialization.string().optional(),\n    apiKey: core.serialization.property(\"api_key\", core.serialization.string().optional()),\n    batchSize: core.serialization.property(\"batch_size\", core.serialization.number()),\n    parallel: core.serialization.number(),\n    maxRetries: core.serialization.property(\"max_retries\", core.serialization.number()),\n    clientKwargs: core.serialization.property(\n        \"client_kwargs\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    enableHybrid: core.serialization.property(\"enable_hybrid\", core.serialization.boolean()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace QdrantVectorStore {\n    interface Raw {\n        stores_text?: boolean | null;\n        is_embedding_query?: boolean | null;\n        flat_metadata?: boolean | null;\n        collection_name: string;\n        path?: string | null;\n        url?: string | null;\n        api_key?: string | null;\n        batch_size: number;\n        parallel: number;\n        max_retries: number;\n        client_kwargs?: Record<string, unknown> | null;\n        enable_hybrid: boolean;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ReaderConfig: core.serialization.ObjectSchema<serializers.ReaderConfig.Raw, PlatformApi.ReaderConfig> =\n    core.serialization.object({\n        reader: core.serialization.lazyObject(async () => (await import(\"..\")).BasePydanticReader),\n        readerArgs: core.serialization.property(\n            \"reader_args\",\n            core.serialization.list(core.serialization.unknown()).optional()\n        ),\n        readerKwargs: core.serialization.property(\n            \"reader_kwargs\",\n            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n        ),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace ReaderConfig {\n    interface Raw {\n        reader: serializers.BasePydanticReader.Raw;\n        reader_args?: unknown[] | null;\n        reader_kwargs?: Record<string, unknown> | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const RelatedNodeInfo: core.serialization.ObjectSchema<\n    serializers.RelatedNodeInfo.Raw,\n    PlatformApi.RelatedNodeInfo\n> = core.serialization.object({\n    nodeId: core.serialization.property(\"node_id\", core.serialization.string()),\n    nodeType: core.serialization.property(\n        \"node_type\",\n        core.serialization.lazy(async () => (await import(\"..\")).ObjectType).optional()\n    ),\n    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),\n    hash: core.serialization.string().optional(),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace RelatedNodeInfo {\n    interface Raw {\n        node_id: string;\n        node_type?: serializers.ObjectType.Raw | null;\n        metadata?: Record<string, unknown> | null;\n        hash?: string | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const RetrieveResults: core.serialization.ObjectSchema<\n    serializers.RetrieveResults.Raw,\n    PlatformApi.RetrieveResults\n> = core.serialization.object({\n    pipelineId: core.serialization.property(\"pipeline_id\", core.serialization.string()),\n    retrievalNodes: core.serialization.property(\n        \"retrieval_nodes\",\n        core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).TextNodeWithScore))\n    ),\n    retrievalLatency: core.serialization.property(\n        \"retrieval_latency\",\n        core.serialization.record(core.serialization.string(), core.serialization.number())\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace RetrieveResults {\n    interface Raw {\n        pipeline_id: string;\n        retrieval_nodes: serializers.TextNodeWithScore.Raw[];\n        retrieval_latency: Record<string, number>;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const RssReader: core.serialization.ObjectSchema<serializers.RssReader.Raw, PlatformApi.RssReader> =\n    core.serialization.object({\n        isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n        htmlToText: core.serialization.property(\"html_to_text\", core.serialization.boolean().optional()),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace RssReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        html_to_text?: boolean | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const SentenceSplitter: core.serialization.ObjectSchema<\n    serializers.SentenceSplitter.Raw,\n    PlatformApi.SentenceSplitter\n> = core.serialization.object({\n    includeMetadata: core.serialization.property(\"include_metadata\", core.serialization.boolean().optional()),\n    includePrevNextRel: core.serialization.property(\"include_prev_next_rel\", core.serialization.boolean().optional()),\n    callbackManager: core.serialization.property(\n        \"callback_manager\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    chunkSize: core.serialization.property(\"chunk_size\", core.serialization.number().optional()),\n    chunkOverlap: core.serialization.property(\"chunk_overlap\", core.serialization.number().optional()),\n    separator: core.serialization.string().optional(),\n    paragraphSeparator: core.serialization.property(\"paragraph_separator\", core.serialization.string().optional()),\n    secondaryChunkingRegex: core.serialization.property(\n        \"secondary_chunking_regex\",\n        core.serialization.string().optional()\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace SentenceSplitter {\n    interface Raw {\n        include_metadata?: boolean | null;\n        include_prev_next_rel?: boolean | null;\n        callback_manager?: Record<string, unknown> | null;\n        chunk_size?: number | null;\n        chunk_overlap?: number | null;\n        separator?: string | null;\n        paragraph_separator?: string | null;\n        secondary_chunking_regex?: string | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const SimpleFileNodeParser: core.serialization.ObjectSchema<\n    serializers.SimpleFileNodeParser.Raw,\n    PlatformApi.SimpleFileNodeParser\n> = core.serialization.object({\n    includeMetadata: core.serialization.property(\"include_metadata\", core.serialization.boolean().optional()),\n    includePrevNextRel: core.serialization.property(\"include_prev_next_rel\", core.serialization.boolean().optional()),\n    callbackManager: core.serialization.property(\n        \"callback_manager\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace SimpleFileNodeParser {\n    interface Raw {\n        include_metadata?: boolean | null;\n        include_prev_next_rel?: boolean | null;\n        callback_manager?: Record<string, unknown> | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const SimpleWebPageReader: core.serialization.ObjectSchema<\n    serializers.SimpleWebPageReader.Raw,\n    PlatformApi.SimpleWebPageReader\n> = core.serialization.object({\n    isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n    htmlToText: core.serialization.property(\"html_to_text\", core.serialization.boolean()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace SimpleWebPageReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        html_to_text: boolean;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const SlackReader: core.serialization.ObjectSchema<serializers.SlackReader.Raw, PlatformApi.SlackReader> =\n    core.serialization.object({\n        isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n        slackToken: core.serialization.property(\"slack_token\", core.serialization.string()),\n        earliestDateTimestamp: core.serialization.property(\n            \"earliest_date_timestamp\",\n            core.serialization.number().optional()\n        ),\n        latestDateTimestamp: core.serialization.property(\"latest_date_timestamp\", core.serialization.number()),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace SlackReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        slack_token: string;\n        earliest_date_timestamp?: number | null;\n        latest_date_timestamp: number;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const StatusEnum: core.serialization.Schema<serializers.StatusEnum.Raw, PlatformApi.StatusEnum> =\n    core.serialization.enum_([\"PENDING\", \"SUCCESS\", \"ERROR\", \"CANCELED\"]);\n\nexport declare namespace StatusEnum {\n    type Raw = \"PENDING\" | \"SUCCESS\" | \"ERROR\" | \"CANCELED\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const SupportedEvalLlmModel: core.serialization.ObjectSchema<\n    serializers.SupportedEvalLlmModel.Raw,\n    PlatformApi.SupportedEvalLlmModel\n> = core.serialization.object({\n    name: core.serialization.lazy(async () => (await import(\"..\")).SupportedEvalLlmModelNames),\n    details: core.serialization.lazyObject(async () => (await import(\"..\")).EvalLlmModelData),\n});\n\nexport declare namespace SupportedEvalLlmModel {\n    interface Raw {\n        name: serializers.SupportedEvalLlmModelNames.Raw;\n        details: serializers.EvalLlmModelData.Raw;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const SupportedEvalLlmModelNames: core.serialization.Schema<\n    serializers.SupportedEvalLlmModelNames.Raw,\n    PlatformApi.SupportedEvalLlmModelNames\n> = core.serialization.enum_([\"GPT_3_5_TURBO\", \"GPT_4\", \"GPT_4_TURBO\"]);\n\nexport declare namespace SupportedEvalLlmModelNames {\n    type Raw = \"GPT_3_5_TURBO\" | \"GPT_4\" | \"GPT_4_TURBO\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const TextNodeRelationshipsValue: core.serialization.Schema<\n    serializers.TextNodeRelationshipsValue.Raw,\n    PlatformApi.TextNodeRelationshipsValue\n> = core.serialization.undiscriminatedUnion([\n    core.serialization.lazyObject(async () => (await import(\"..\")).RelatedNodeInfo),\n    core.serialization.list(core.serialization.lazyObject(async () => (await import(\"..\")).RelatedNodeInfo)),\n]);\n\nexport declare namespace TextNodeRelationshipsValue {\n    type Raw = serializers.RelatedNodeInfo.Raw | serializers.RelatedNodeInfo.Raw[];\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const TextNode: core.serialization.ObjectSchema<serializers.TextNode.Raw, PlatformApi.TextNode> =\n    core.serialization.object({\n        id: core.serialization.property(\"id_\", core.serialization.string().optional()),\n        embedding: core.serialization.list(core.serialization.number()).optional(),\n        extraInfo: core.serialization.property(\n            \"extra_info\",\n            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n        ),\n        excludedEmbedMetadataKeys: core.serialization.property(\n            \"excluded_embed_metadata_keys\",\n            core.serialization.list(core.serialization.string()).optional()\n        ),\n        excludedLlmMetadataKeys: core.serialization.property(\n            \"excluded_llm_metadata_keys\",\n            core.serialization.list(core.serialization.string()).optional()\n        ),\n        relationships: core.serialization\n            .record(\n                core.serialization.string(),\n                core.serialization.lazy(async () => (await import(\"..\")).TextNodeRelationshipsValue)\n            )\n            .optional(),\n        text: core.serialization.string().optional(),\n        startCharIdx: core.serialization.property(\"start_char_idx\", core.serialization.number().optional()),\n        endCharIdx: core.serialization.property(\"end_char_idx\", core.serialization.number().optional()),\n        textTemplate: core.serialization.property(\"text_template\", core.serialization.string().optional()),\n        metadataTemplate: core.serialization.property(\"metadata_template\", core.serialization.string().optional()),\n        metadataSeperator: core.serialization.property(\"metadata_seperator\", core.serialization.string().optional()),\n        className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n    });\n\nexport declare namespace TextNode {\n    interface Raw {\n        id_?: string | null;\n        embedding?: number[] | null;\n        extra_info?: Record<string, unknown> | null;\n        excluded_embed_metadata_keys?: string[] | null;\n        excluded_llm_metadata_keys?: string[] | null;\n        relationships?: Record<string, serializers.TextNodeRelationshipsValue.Raw> | null;\n        text?: string | null;\n        start_char_idx?: number | null;\n        end_char_idx?: number | null;\n        text_template?: string | null;\n        metadata_template?: string | null;\n        metadata_seperator?: string | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const TextNodeWithScore: core.serialization.ObjectSchema<\n    serializers.TextNodeWithScore.Raw,\n    PlatformApi.TextNodeWithScore\n> = core.serialization.object({\n    node: core.serialization.lazyObject(async () => (await import(\"..\")).TextNode),\n    score: core.serialization.number().optional(),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace TextNodeWithScore {\n    interface Raw {\n        node: serializers.TextNode.Raw;\n        score?: number | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const TokenTextSplitter: core.serialization.ObjectSchema<\n    serializers.TokenTextSplitter.Raw,\n    PlatformApi.TokenTextSplitter\n> = core.serialization.object({\n    includeMetadata: core.serialization.property(\"include_metadata\", core.serialization.boolean().optional()),\n    includePrevNextRel: core.serialization.property(\"include_prev_next_rel\", core.serialization.boolean().optional()),\n    callbackManager: core.serialization.property(\n        \"callback_manager\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    chunkSize: core.serialization.property(\"chunk_size\", core.serialization.number().optional()),\n    chunkOverlap: core.serialization.property(\"chunk_overlap\", core.serialization.number().optional()),\n    separator: core.serialization.string().optional(),\n    backupSeparators: core.serialization.property(\n        \"backup_separators\",\n        core.serialization.list(core.serialization.unknown()).optional()\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace TokenTextSplitter {\n    interface Raw {\n        include_metadata?: boolean | null;\n        include_prev_next_rel?: boolean | null;\n        callback_manager?: Record<string, unknown> | null;\n        chunk_size?: number | null;\n        chunk_overlap?: number | null;\n        separator?: string | null;\n        backup_separators?: unknown[] | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const TrafilaturaWebReader: core.serialization.ObjectSchema<\n    serializers.TrafilaturaWebReader.Raw,\n    PlatformApi.TrafilaturaWebReader\n> = core.serialization.object({\n    isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace TrafilaturaWebReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const TransformationCategoryNames: core.serialization.Schema<\n    serializers.TransformationCategoryNames.Raw,\n    PlatformApi.TransformationCategoryNames\n> = core.serialization.enum_([\"NODE_PARSER\", \"EMBEDDING\"]);\n\nexport declare namespace TransformationCategoryNames {\n    type Raw = \"NODE_PARSER\" | \"EMBEDDING\";\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ValidationErrorLocItem: core.serialization.Schema<\n    serializers.ValidationErrorLocItem.Raw,\n    PlatformApi.ValidationErrorLocItem\n> = core.serialization.undiscriminatedUnion([core.serialization.string(), core.serialization.number()]);\n\nexport declare namespace ValidationErrorLocItem {\n    type Raw = string | number;\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const ValidationError: core.serialization.ObjectSchema<\n    serializers.ValidationError.Raw,\n    PlatformApi.ValidationError\n> = core.serialization.object({\n    loc: core.serialization.list(core.serialization.lazy(async () => (await import(\"..\")).ValidationErrorLocItem)),\n    msg: core.serialization.string(),\n    type: core.serialization.string(),\n});\n\nexport declare namespace ValidationError {\n    interface Raw {\n        loc: serializers.ValidationErrorLocItem.Raw[];\n        msg: string;\n        type: string;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const WeaviateVectorStore: core.serialization.ObjectSchema<\n    serializers.WeaviateVectorStore.Raw,\n    PlatformApi.WeaviateVectorStore\n> = core.serialization.object({\n    storesText: core.serialization.property(\"stores_text\", core.serialization.boolean().optional()),\n    isEmbeddingQuery: core.serialization.property(\"is_embedding_query\", core.serialization.boolean().optional()),\n    indexName: core.serialization.property(\"index_name\", core.serialization.string()),\n    url: core.serialization.string().optional(),\n    textKey: core.serialization.property(\"text_key\", core.serialization.string()),\n    authConfig: core.serialization.property(\n        \"auth_config\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    clientKwargs: core.serialization.property(\n        \"client_kwargs\",\n        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()\n    ),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace WeaviateVectorStore {\n    interface Raw {\n        stores_text?: boolean | null;\n        is_embedding_query?: boolean | null;\n        index_name: string;\n        url?: string | null;\n        text_key: string;\n        auth_config?: Record<string, unknown> | null;\n        client_kwargs?: Record<string, unknown> | null;\n        class_name?: string | null;\n    }\n}\n","/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport type * as serializers from \"..\";\nimport type * as PlatformApi from \"../../api\";\nimport * as core from \"../../core\";\n\nexport const YoutubeTranscriptReader: core.serialization.ObjectSchema<\n    serializers.YoutubeTranscriptReader.Raw,\n    PlatformApi.YoutubeTranscriptReader\n> = core.serialization.object({\n    isRemote: core.serialization.property(\"is_remote\", core.serialization.boolean().optional()),\n    className: core.serialization.property(\"class_name\", core.serialization.string().optional()),\n});\n\nexport declare namespace YoutubeTranscriptReader {\n    interface Raw {\n        is_remote?: boolean | null;\n        class_name?: string | null;\n    }\n}\n"],"mappings":"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","names":["body","transform","date","object","object","property","value","value","opts","transform","discriminant","union","Response","Response","Response","Response","health_exports","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response","Response"]}