"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }




var _chunkUL3T4TSLcjs = require('./chunk-UL3T4TSL.cjs');













































var _chunk4YKI7CCBcjs = require('./chunk-4YKI7CCB.cjs');
require('./chunk-J54M5MSR.cjs');

// ../../node_modules/.pnpm/url-join@5.0.0/node_modules/url-join/lib/url-join.js
function normalize(strArray) {
  var resultArray = [];
  if (strArray.length === 0) {
    return "";
  }
  if (typeof strArray[0] !== "string") {
    throw new TypeError("Url must be a string. Received " + strArray[0]);
  }
  if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
    var first = strArray.shift();
    strArray[0] = first + strArray[0];
  }
  if (strArray[0].match(/^file:\/\/\//)) {
    strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, "$1:///");
  } else {
    strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, "$1://");
  }
  for (var i = 0; i < strArray.length; i++) {
    var component = strArray[i];
    if (typeof component !== "string") {
      throw new TypeError("Url must be a string. Received " + component);
    }
    if (component === "") {
      continue;
    }
    if (i > 0) {
      component = component.replace(/^[\/]+/, "");
    }
    if (i < strArray.length - 1) {
      component = component.replace(/[\/]+$/, "");
    } else {
      component = component.replace(/[\/]+$/, "/");
    }
    resultArray.push(component);
  }
  var str = resultArray.join("/");
  str = str.replace(/\/(\?|&|#[^!])/g, "$1");
  var parts = str.split("?");
  str = parts.shift() + (parts.length > 0 ? "?" : "") + parts.join("&");
  return str;
}
function urlJoin() {
  var input;
  if (typeof arguments[0] === "object") {
    input = arguments[0];
  } else {
    input = [].slice.call(arguments);
  }
  return normalize(input);
}

// src/api/resources/health/client/Client.ts
var Health = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * Health check endpoint.
   *
   * @example
   *     await platformApi.health.health()
   */
  async health(requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/health"),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _ => _.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _2 => _2.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.health_exports.health.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
        statusCode: _response.error.statusCode,
        body: _response.error.body
      });
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/api/resources/apiKey/client/Client.ts
var ApiKey2 = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * Get all API Keys for a user.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.apiKey.getKeys()
   */
  async getKeys(requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/api_key"),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _3 => _3.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _4 => _4.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.apiKey_exports.getKeys.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Generate a new API Key.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async generateKey(request = {}, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/api_key"),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.ApiKeyCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _5 => _5.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _6 => _6.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.ApiKey.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Update name of an existing API Key.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async updateExistingApiKey(apiKeyId, request = {}, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/api_key/${apiKeyId}`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.ApiKeyUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _7 => _7.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _8 => _8.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.ApiKey.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Delete an API Key by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.apiKey.deleteApiKey("api-key-id")
   */
  async deleteApiKey(apiKeyId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/api_key/${apiKeyId}`),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _9 => _9.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _10 => _10.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return;
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/api/resources/dataSink/client/Client.ts
var DataSink2 = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * Create a new data sink.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async createDataSink(request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/data_sink"),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.DataSinkCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _11 => _11.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _12 => _12.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSink.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Upserts a data sink.
   * Updates if a data sink with the same name and user_id already exists. Otherwise, creates a new data sink.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async upsertDataSink(request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/data_sink"),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.DataSinkCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _13 => _13.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _14 => _14.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSink.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a data sink by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getDataSink(dataSinkId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/data_sink/${dataSinkId}`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _15 => _15.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _16 => _16.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSink.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Update a data sink by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async updateDataSink(dataSinkId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/data_sink/${dataSinkId}`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.DataSinkUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _17 => _17.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _18 => _18.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSink.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Delete a data sink by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.dataSink.deleteDataSink("data-sink-id")
   */
  async deleteDataSink(dataSinkId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/data_sink/${dataSinkId}`),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _19 => _19.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _20 => _20.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return;
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/api/resources/dataSource/client/Client.ts
var DataSource2 = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * Create a new data source.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async createDataSource(request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/data_source"),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.DataSourceCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _21 => _21.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _22 => _22.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSource.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Upserts a data source.
   * Updates if a data source with the same name and user_id already exists.Otherwise, creates a new data source.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async upsertDataSource(request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/data_source"),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.DataSourceCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _23 => _23.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _24 => _24.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSource.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Upserts a data source.
   * Updates if a data source with the same name and user_id already exists.Otherwise, creates a new data source.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async upsertDataSourceFromFiles(request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/data_source/file_upload"),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.BodyUpsertDataSourceFromFilesApiDataSourceFileUploadPut.jsonOrThrow(request, {
        unrecognizedObjectKeys: "strip"
      }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _25 => _25.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _26 => _26.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.dataSource_exports.upsertDataSourceFromFiles.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a data source by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getDataSource(dataSourceId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/data_source/${dataSourceId}`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _27 => _27.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _28 => _28.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSource.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Update a data source by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async updateDataSource(dataSourceId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/data_source/${dataSourceId}`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.DataSourceUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _29 => _29.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _30 => _30.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSource.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Delete a data source by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.dataSource.deleteDataSource("data-source-id")
   */
  async deleteDataSource(dataSourceId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/data_source/${dataSourceId}`),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _31 => _31.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _32 => _32.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return;
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get loaded files for a data source by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.dataSource.getDataSourceFiles("data-source-id")
   */
  async getDataSourceFiles(dataSourceId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/data_source/${dataSourceId}/file`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _33 => _33.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _34 => _34.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.dataSource_exports.getDataSourceFiles.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get loaded files for a data source by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getDataSourceFileContent(dataSourceId, loadedFileId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/data_source/${dataSourceId}/file/${loadedFileId}/content`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _35 => _35.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _36 => _36.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.LoadedFilePayload.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all data source executions for a given data source.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.dataSource.getDataSourceExecutions("data-source-id")
   */
  async getDataSourceExecutions(dataSourceId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/data_source/${dataSourceId}/execution`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _37 => _37.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _38 => _38.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.dataSource_exports.getDataSourceExecutions.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Create a new data source execution.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.dataSource.createDataSourceExecution("data-source-id")
   */
  async createDataSourceExecution(dataSourceId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/data_source/${dataSourceId}/execution`
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _39 => _39.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _40 => _40.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSourceLoadJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a data source execution by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.dataSource.getDataSourceExecution("data-source-id", "data-source-load-execution-id")
   */
  async getDataSourceExecution(dataSourceId, dataSourceLoadExecutionId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/data_source/${dataSourceId}/execution/${dataSourceLoadExecutionId}`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _41 => _41.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _42 => _42.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSourceLoadJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/api/resources/project/client/Client.ts
var Project2 = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * List projects or get one by name
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.project.listProjects({})
   */
  async listProjects(request = {}, requestOptions) {
    const { projectName } = request;
    const _queryParams = {};
    if (projectName != null) {
      _queryParams["project_name"] = projectName;
    }
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/project"),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _43 => _43.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _44 => _44.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.project_exports.listProjects.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Create a new project.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async createProject(request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/project"),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.ProjectCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _45 => _45.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _46 => _46.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Project.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Upsert a project.
   * Updates if a project with the same name already exists. Otherwise, creates a new project.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async upsertProject(request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/project"),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.ProjectCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _47 => _47.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _48 => _48.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Project.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a project by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getProject(projectId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/project/${projectId}`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _49 => _49.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _50 => _50.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Project.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Update an existing project.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async updateExistingProject(projectId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/project/${projectId}`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.ProjectUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _51 => _51.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _52 => _52.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Project.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Create a new pipeline for a project.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async createPipelineForProject(projectId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/project/${projectId}/pipeline`),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.PipelineCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _53 => _53.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _54 => _54.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Pipeline.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Upsert a pipeline for a project.
   * Updates if a pipeline with the same name and project_id already exists. Otherwise, creates a new pipeline.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async upsertPipelineForProject(projectId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/project/${projectId}/pipeline`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.PipelineCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _55 => _55.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _56 => _56.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Pipeline.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all eval datasets for a project.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.project.getDatasetsForProject("project-id")
   */
  async getDatasetsForProject(projectId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/project/${projectId}/eval/dataset`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _57 => _57.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _58 => _58.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.project_exports.getDatasetsForProject.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Create a new eval dataset for a project.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async createEvalDatasetForProject(projectId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/project/${projectId}/eval/dataset`),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.EvalDatasetCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _59 => _59.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _60 => _60.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.EvalDataset.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/api/resources/pipeline/client/Client.ts
var Pipeline2 = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * Search for pipelines by various parameters.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.searchPipelines({
   *         projectName: "project-name",
   *         pipelineType: PlatformApi.PipelineType.Playground
   *     })
   */
  async searchPipelines(request, requestOptions) {
    const { projectName, pipelineName, pipelineType } = request;
    const _queryParams = {};
    _queryParams["project_name"] = projectName;
    if (pipelineName != null) {
      _queryParams["pipeline_name"] = pipelineName;
    }
    if (pipelineType != null) {
      _queryParams["pipeline_type"] = pipelineType;
    }
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/pipeline"),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _61 => _61.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _62 => _62.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.searchPipelines.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a pipeline by ID for a given project.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getPipelineForProject(pipelineId, request = {}, requestOptions) {
    const { withManagedIngestionStatus } = request;
    const _queryParams = {};
    if (withManagedIngestionStatus != null) {
      _queryParams["with_managed_ingestion_status"] = withManagedIngestionStatus.toString();
    }
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/pipeline/${pipelineId}`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _63 => _63.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _64 => _64.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Pipeline.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Update an existing pipeline for a project.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async updateExistingPipeline(pipelineId, request = {}, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/pipeline/${pipelineId}`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.PipelineUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _65 => _65.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _66 => _66.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Pipeline.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Delete a pipeline by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.deletePipeline("pipeline-id")
   */
  async deletePipeline(pipelineId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/pipeline/${pipelineId}`),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _67 => _67.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _68 => _68.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return;
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get loaded files for a pipeline by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getLoadedFilesForPipeline("pipeline-id")
   */
  async getLoadedFilesForPipeline(pipelineId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/pipeline/${pipelineId}/file`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _69 => _69.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _70 => _70.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.getLoadedFilesForPipeline.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Deploy a playground pipeline to a managed pipeline.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async deployPlaygroundPipeline(pipelineId, request = {}, requestOptions) {
    const { managedPipelineName } = request;
    const _queryParams = {};
    if (managedPipelineName != null) {
      _queryParams["managed_pipeline_name"] = managedPipelineName;
    }
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/pipeline/${pipelineId}/deploy`),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _71 => _71.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _72 => _72.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Pipeline.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Deploy a playground pipeline to the managed pipeline it is already associated with.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async deployPlaygroundPipelineWithExistingManagedPipeline(pipelineId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/pipeline/${pipelineId}/deploy`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _73 => _73.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _74 => _74.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Pipeline.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Create a playground pipeline from a managed pipeline.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async createPlaygroundPipeline(pipelineId, request = {}, requestOptions) {
    const { playgroundPipelineName } = request;
    const _queryParams = {};
    if (playgroundPipelineName != null) {
      _queryParams["playground_pipeline_name"] = playgroundPipelineName;
    }
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/pipeline/${pipelineId}/playground`),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _75 => _75.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _76 => _76.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.Pipeline.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all PlaygroundJobRecords for a given pipeline.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getAllPlaygroundJobs("pipeline-id")
   */
  async getAllPlaygroundJobs(pipelineId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/playground_job`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _77 => _77.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _78 => _78.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.getAllPlaygroundJobs.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Kick off a new Playground execution.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.createPlaygroundJob("pipeline-id", {})
   */
  async createPlaygroundJob(pipelineId, request = {}, requestOptions) {
    const { loadedFileIds } = request;
    const _queryParams = {};
    if (loadedFileIds != null) {
      if (Array.isArray(loadedFileIds)) {
        _queryParams["loaded_file_ids"] = loadedFileIds.map((item) => item);
      } else {
        _queryParams["loaded_file_ids"] = loadedFileIds;
      }
    }
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/playground_job`
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _79 => _79.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _80 => _80.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.PlaygroundJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get the result of the latest Playground job.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getPlaygroundJobResult("pipeline-id", {})
   */
  async getPlaygroundJobResult(pipelineId, request = {}, requestOptions) {
    const { configuredTransformationId, loadedFileId, offset, limit } = request;
    const _queryParams = {};
    if (configuredTransformationId != null) {
      _queryParams["configured_transformation_id"] = configuredTransformationId;
    }
    if (loadedFileId != null) {
      _queryParams["loaded_file_id"] = loadedFileId;
    }
    if (offset != null) {
      _queryParams["offset"] = offset.toString();
    }
    if (limit != null) {
      _queryParams["limit"] = limit.toString();
    }
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/playground_job/result`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _81 => _81.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _82 => _82.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.getPlaygroundJobResult.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get status of a single pipeline PlaygroundJob for a given pipeline.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getPlaygroundJob("pipeline-id", "playground-job-id")
   */
  async getPlaygroundJob(pipelineId, playgroundJobId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/playground_job/${playgroundJobId}`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _83 => _83.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _84 => _84.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.PlaygroundJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get the status of an EvalDatasetExecution.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getEvalDatasetExecutions("pipeline-id", "eval-dataset-id")
   */
  async getEvalDatasetExecutions(pipelineId, evalDatasetId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/eval_dataset/${evalDatasetId}/execute`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _85 => _85.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _86 => _86.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.getEvalDatasetExecutions.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Execute a dataset.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.executeEvalDataset("pipeline-id", "eval-dataset-id", {
   *         evalQuestionIds: [],
   *         params: {
   *             llmModel: PlatformApi.SupportedEvalLlmModelNames.Gpt35Turbo
   *         }
   *     })
   */
  async executeEvalDataset(pipelineId, evalDatasetId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/eval_dataset/${evalDatasetId}/execute`
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.EvalExecutionCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _87 => _87.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _88 => _88.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.EvalDatasetJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get the result of an EvalDatasetExecution.
   * If eval_question_ids is specified, only the results for the specified
   * questions will be returned.
   * If any of the specified questions do not have a result, they will be ignored.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getEvalDatasetExecutionResult("pipeline-id", "eval-dataset-id")
   */
  async getEvalDatasetExecutionResult(pipelineId, evalDatasetId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/eval_dataset/${evalDatasetId}/execute/result`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _89 => _89.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _90 => _90.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.getEvalDatasetExecutionResult.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get the status of an EvalDatasetExecution.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getEvalDatasetExecution("pipeline-id", "eval-dataset-id", "eval-dataset-execution-id")
   */
  async getEvalDatasetExecution(pipelineId, evalDatasetId, evalDatasetExecutionId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/eval_dataset/${evalDatasetId}/execute/${evalDatasetExecutionId}`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _91 => _91.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _92 => _92.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.EvalDatasetJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Execute a ManagedFileIngestion for raw files for a given pipeline.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async runManagedRawFilesIngestion(pipelineId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/managed_ingest_raw_files`
      ),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.BodyRunManagedRawFilesIngestionApiPipelinePipelineIdManagedIngestRawFilesPut.jsonOrThrow(
        request,
        { unrecognizedObjectKeys: "strip" }
      ),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _93 => _93.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _94 => _94.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.runManagedRawFilesIngestion.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all ManagedDataSourceIngestionExecution for a given pipeline and data source.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getManagedDataSourceIngestionExecutions("pipeline-id", "data-source-id")
   */
  async getManagedDataSourceIngestionExecutions(pipelineId, dataSourceId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/data_source/${dataSourceId}/managed_ingest`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _95 => _95.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _96 => _96.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.getManagedDataSourceIngestionExecutions.Response.parseOrThrow(
        _response.body,
        {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"]
        }
      );
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Execute a ManagedDataSourceIngestion.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.runManagedDataSourceIngestion("pipeline-id", "data-source-id")
   */
  async runManagedDataSourceIngestion(pipelineId, dataSourceId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/data_source/${dataSourceId}/managed_ingest`
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _97 => _97.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _98 => _98.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSourceManagedIngestionJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a single ManagedDataSourceIngestionExecution for a given pipeline and data source.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getManagedDataSourceIngestionExecution("pipeline-id", "data-source-id", "managed-data-source-ingestion-id")
   */
  async getManagedDataSourceIngestionExecution(pipelineId, dataSourceId, managedDataSourceIngestionId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/data_source/${dataSourceId}/managed_ingest/${managedDataSourceIngestionId}`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _99 => _99.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _100 => _100.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.DataSourceManagedIngestionJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all ManagedPipelineIngestionExecution for a given pipeline.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getManagedPipelineIngestionExecutions("pipeline-id")
   */
  async getManagedPipelineIngestionExecutions(pipelineId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/managed_ingest`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _101 => _101.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _102 => _102.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.pipeline_exports.getManagedPipelineIngestionExecutions.Response.parseOrThrow(
        _response.body,
        {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"]
        }
      );
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Execute a ManagedPipelineIngestion.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.runManagedPipelineIngestion("pipeline-id")
   */
  async runManagedPipelineIngestion(pipelineId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/managed_ingest`
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _103 => _103.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _104 => _104.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.PipelineManagedIngestionJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.pipeline.getManagedIngestionExecution("pipeline-id", "managed-pipeline-ingestion-id")
   */
  async getManagedIngestionExecution(pipelineId, managedPipelineIngestionId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/pipeline/${pipelineId}/managed_ingest/${managedPipelineIngestionId}`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _105 => _105.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _106 => _106.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.PipelineManagedIngestionJobRecord.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get retrieval results for a managed pipeline and a query
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async runSearch(pipelineId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/pipeline/${pipelineId}/retrieve`),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.RetrievalParams.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _107 => _107.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _108 => _108.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.RetrieveResults.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/api/resources/eval/client/Client.ts
var Eval = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * Get a dataset by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getDataset(datasetId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/dataset/${datasetId}`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _109 => _109.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _110 => _110.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.EvalDataset.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Update a dataset.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async updateDataset(datasetId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/dataset/${datasetId}`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.EvalDatasetUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _111 => _111.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _112 => _112.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.EvalDataset.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Delete a dataset.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.eval.deleteDataset("dataset-id")
   */
  async deleteDataset(datasetId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/dataset/${datasetId}`),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _113 => _113.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _114 => _114.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return;
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all questions for a dataset.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.eval.getQuestions("dataset-id")
   */
  async getQuestions(datasetId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/dataset/${datasetId}/question`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _115 => _115.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _116 => _116.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.eval_exports.getQuestions.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Create a new question.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async createQuestion(datasetId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/dataset/${datasetId}/question`),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.EvalQuestionCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _117 => _117.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _118 => _118.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.EvalQuestion.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Create a new question.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.eval.createQuestions("dataset-id", [])
   */
  async createQuestions(datasetId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/dataset/${datasetId}/questions`),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.eval_exports.createQuestions.Request.jsonOrThrow(request, {
        unrecognizedObjectKeys: "strip"
      }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _119 => _119.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _120 => _120.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.eval_exports.createQuestions.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a question by ID.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getQuestion(questionId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/question/${questionId}`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _121 => _121.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _122 => _122.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.EvalQuestion.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Replace a question.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async replaceQuestion(questionId, request, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/question/${questionId}`),
      method: "PUT",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      body: await _chunk4YKI7CCBcjs.EvalQuestionCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _123 => _123.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _124 => _124.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.EvalQuestion.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Delete a question.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.eval.deleteQuestion("question-id")
   */
  async deleteQuestion(questionId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/eval/question/${questionId}`),
      method: "DELETE",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _125 => _125.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _126 => _126.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return;
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all supported models.
   * @throws {@link PlatformApi.UnprocessableEntityError}
   *
   * @example
   *     await platformApi.eval.getSupportedModels()
   */
  async getSupportedModels(requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/eval/models"),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _127 => _127.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _128 => _128.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.eval_exports.getSupportedModels.Response.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/api/resources/parsing/client/Client.ts
var _formdata = require('form-data'); var _formdata2 = _interopRequireDefault(_formdata);
var Parsing = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * Upload a file to s3 and create a job. return a job id
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async uploadFile(file, requestOptions) {
    const _request = new (0, _formdata2.default)();
    _request.append("file", file);
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/parsing/upload"),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
      body: _request,
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _129 => _129.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _130 => _130.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.ParsingJob.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get parsing usage for user
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async usage(requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/parsing/usage"),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _131 => _131.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _132 => _132.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.ParsingUsage.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a job by id
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getJob(jobId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), `api/parsing/job/${jobId}`),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _133 => _133.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _134 => _134.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.ParsingJob.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get a job by id
   * @throws {@link PlatformApi.UnprocessableEntityError}
   */
  async getJobResult(jobId, requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        `api/parsing/job/${jobId}/result/markdown`
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _135 => _135.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _136 => _136.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.ParsingJobMarkdownResult.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ["response"]
      });
    }
    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          throw new (0, _chunkUL3T4TSLcjs.UnprocessableEntityError)(
            await _chunk4YKI7CCBcjs.HttpValidationError.parseOrThrow(_response.error.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              breadcrumbsPrefix: ["response"]
            })
          );
        default:
          throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
            statusCode: _response.error.statusCode,
            body: _response.error.body
          });
      }
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/api/resources/componentDefinition/client/Client.ts
var ComponentDefinition = class {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * Get all configurable transformation component definitions.
   *
   * @example
   *     await platformApi.componentDefinition.getAllTransformationDefinitions()
   */
  async getAllTransformationDefinitions(requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(
        await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment),
        "api/component_definition/configurable_transformation"
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _137 => _137.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _138 => _138.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.componentDefinition_exports.getAllTransformationDefinitions.Response.parseOrThrow(
        _response.body,
        {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"]
        }
      );
    }
    if (_response.error.reason === "status-code") {
      throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
        statusCode: _response.error.statusCode,
        body: _response.error.body
      });
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all data source component definitions.
   *
   * @example
   *     await platformApi.componentDefinition.getAllDataSourceDefinitions()
   */
  async getAllDataSourceDefinitions(requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/component_definition/data_source"),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _139 => _139.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _140 => _140.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.componentDefinition_exports.getAllDataSourceDefinitions.Response.parseOrThrow(
        _response.body,
        {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"]
        }
      );
    }
    if (_response.error.reason === "status-code") {
      throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
        statusCode: _response.error.statusCode,
        body: _response.error.body
      });
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  /**
   * Get all data sink component definitions.
   *
   * @example
   *     await platformApi.componentDefinition.getAllDataSinkDefinitions()
   */
  async getAllDataSinkDefinitions(requestOptions) {
    const _response = await _chunk4YKI7CCBcjs.fetcher.call(void 0, {
      url: urlJoin(await _chunk4YKI7CCBcjs.Supplier.get(this._options.environment), "api/component_definition/data_sink"),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript"
      },
      contentType: "application/json",
      timeoutMs: _optionalChain([requestOptions, 'optionalAccess', _141 => _141.timeoutInSeconds]) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
      maxRetries: _optionalChain([requestOptions, 'optionalAccess', _142 => _142.maxRetries]),
      withCredentials: true
    });
    if (_response.ok) {
      return await _chunk4YKI7CCBcjs.componentDefinition_exports.getAllDataSinkDefinitions.Response.parseOrThrow(
        _response.body,
        {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"]
        }
      );
    }
    if (_response.error.reason === "status-code") {
      throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
        statusCode: _response.error.statusCode,
        body: _response.error.body
      });
    }
    switch (_response.error.reason) {
      case "non-json":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody
        });
      case "timeout":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiTimeoutError)();
      case "unknown":
        throw new (0, _chunkUL3T4TSLcjs.PlatformApiError)({
          message: _response.error.errorMessage
        });
    }
  }
  async _getAuthorizationHeader() {
    const bearer = await _chunk4YKI7CCBcjs.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }
    return void 0;
  }
};

// src/Client.ts
var PlatformApiClient = class {
  constructor(_options) {
    this._options = _options;
  }
  
  get health() {
    return this._health ??= new Health(this._options);
  }
  
  get apiKey() {
    return this._apiKey ??= new ApiKey2(this._options);
  }
  
  get dataSink() {
    return this._dataSink ??= new DataSink2(this._options);
  }
  
  get dataSource() {
    return this._dataSource ??= new DataSource2(this._options);
  }
  
  get project() {
    return this._project ??= new Project2(this._options);
  }
  
  get pipeline() {
    return this._pipeline ??= new Pipeline2(this._options);
  }
  
  get eval() {
    return this._eval ??= new Eval(this._options);
  }
  
  get parsing() {
    return this._parsing ??= new Parsing(this._options);
  }
  
  get componentDefinition() {
    return this._componentDefinition ??= new ComponentDefinition(this._options);
  }
};





exports.PlatformApi = _chunkUL3T4TSLcjs.api_exports; exports.PlatformApiClient = PlatformApiClient; exports.PlatformApiError = _chunkUL3T4TSLcjs.PlatformApiError; exports.PlatformApiTimeoutError = _chunkUL3T4TSLcjs.PlatformApiTimeoutError;
//# sourceMappingURL=index.cjs.map