"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunkJ54M5MSRcjs = require('./chunk-J54M5MSR.cjs');

// src/api/index.ts
var api_exports = {};
_chunkJ54M5MSRcjs.__export.call(void 0, api_exports, {
  ConfigurableDataSinkNames: () => ConfigurableDataSinkNames,
  ConfigurableDataSourceNames: () => ConfigurableDataSourceNames,
  ConfigurableTransformationNames: () => ConfigurableTransformationNames,
  JobNames: () => JobNames,
  ManagedIngestionStatus: () => ManagedIngestionStatus,
  ObjectType: () => ObjectType,
  ParserLanguages: () => ParserLanguages,
  PipelineType: () => PipelineType,
  StatusEnum: () => StatusEnum,
  SupportedEvalLlmModelNames: () => SupportedEvalLlmModelNames,
  TransformationCategoryNames: () => TransformationCategoryNames,
  UnprocessableEntityError: () => UnprocessableEntityError,
  apiKey: () => apiKey_exports,
  componentDefinition: () => componentDefinition_exports,
  dataSink: () => dataSink_exports,
  dataSource: () => dataSource_exports,
  eval: () => eval_exports,
  health: () => health_exports,
  parsing: () => parsing_exports,
  pipeline: () => pipeline_exports,
  project: () => project_exports
});

// src/api/resources/dataSink/index.ts
var dataSink_exports = {};

// src/api/resources/dataSource/index.ts
var dataSource_exports = {};

// src/api/resources/health/index.ts
var health_exports = {};

// src/api/resources/apiKey/index.ts
var apiKey_exports = {};

// src/api/resources/project/index.ts
var project_exports = {};

// src/api/resources/pipeline/index.ts
var pipeline_exports = {};

// src/api/resources/eval/index.ts
var eval_exports = {};

// src/api/resources/parsing/index.ts
var parsing_exports = {};

// src/api/resources/componentDefinition/index.ts
var componentDefinition_exports = {};

// src/api/types/ConfigurableDataSinkNames.ts
var ConfigurableDataSinkNames = {
  Chroma: "CHROMA",
  Pinecone: "PINECONE",
  Postgres: "POSTGRES",
  Qdrant: "QDRANT",
  Weaviate: "WEAVIATE"
};

// src/api/types/ConfigurableDataSourceNames.ts
var ConfigurableDataSourceNames = {
  Discord: "DISCORD",
  NotionPage: "NOTION_PAGE",
  Slack: "SLACK",
  SimpleWebPage: "SIMPLE_WEB_PAGE",
  TrafilaturaWebPage: "TRAFILATURA_WEB_PAGE",
  BeautifulSoupWebPage: "BEAUTIFUL_SOUP_WEB_PAGE",
  Rss: "RSS",
  YoutubeTranscript: "YOUTUBE_TRANSCRIPT",
  GoogleDocs: "GOOGLE_DOCS",
  GoogleSheets: "GOOGLE_SHEETS",
  Reader: "READER",
  DocumentGroup: "DOCUMENT_GROUP",
  TextNode: "TEXT_NODE",
  Document: "DOCUMENT"
};

// src/api/types/ConfigurableTransformationNames.ts
var ConfigurableTransformationNames = {
  CodeNodeParser: "CODE_NODE_PARSER",
  SentenceAwareNodeParser: "SENTENCE_AWARE_NODE_PARSER",
  TokenAwareNodeParser: "TOKEN_AWARE_NODE_PARSER",
  HtmlNodeParser: "HTML_NODE_PARSER",
  MarkdownNodeParser: "MARKDOWN_NODE_PARSER",
  JsonNodeParser: "JSON_NODE_PARSER",
  SimpleFileNodeParser: "SIMPLE_FILE_NODE_PARSER",
  OpenaiEmbedding: "OPENAI_EMBEDDING",
  AzureEmbedding: "AZURE_EMBEDDING"
};

// src/api/types/JobNames.ts
var JobNames = {
  LoadDocumentsJob: "load_documents_job",
  PlaygroundJob: "playground_job",
  EvalDatasetJob: "eval_dataset_job",
  PipelineManagedIngestionJob: "pipeline_managed_ingestion_job",
  DataSourceManagedIngestionJob: "data_source_managed_ingestion_job",
  LoadedFileManagedIngestionJob: "loaded_file_managed_ingestion_job"
};

// src/api/types/ManagedIngestionStatus.ts
var ManagedIngestionStatus = {
  NotStarted: "NOT_STARTED",
  Creating: "CREATING",
  InProgress: "IN_PROGRESS",
  Success: "SUCCESS",
  Error: "ERROR"
};

// src/api/types/ObjectType.ts
var ObjectType = {
  One: "1",
  Two: "2",
  Three: "3",
  Four: "4"
};

// src/api/types/ParserLanguages.ts
var ParserLanguages = {
  Af: "af",
  Az: "az",
  Bs: "bs",
  Cs: "cs",
  Cy: "cy",
  Da: "da",
  De: "de",
  En: "en",
  Es: "es",
  Et: "et",
  Fr: "fr",
  Ga: "ga",
  Hr: "hr",
  Hu: "hu",
  Id: "id",
  Is: "is",
  It: "it",
  Ku: "ku",
  La: "la",
  Lt: "lt",
  Lv: "lv",
  Mi: "mi",
  Ms: "ms",
  Mt: "mt",
  Nl: "nl",
  No: "no",
  Oc: "oc",
  Pi: "pi",
  Pl: "pl",
  Pt: "pt",
  Ro: "ro",
  RsLatin: "rs_latin",
  Sk: "sk",
  Sl: "sl",
  Sq: "sq",
  Sv: "sv",
  Sw: "sw",
  Tl: "tl",
  Tr: "tr",
  Uz: "uz",
  Vi: "vi",
  Ar: "ar",
  Fa: "fa",
  Ug: "ug",
  Ur: "ur",
  Bn: "bn",
  As: "as",
  Mni: "mni",
  Ru: "ru",
  RsCyrillic: "rs_cyrillic",
  Be: "be",
  Bg: "bg",
  Uk: "uk",
  Mn: "mn",
  Abq: "abq",
  Ady: "ady",
  Kbd: "kbd",
  Ava: "ava",
  Dar: "dar",
  Inh: "inh",
  Che: "che",
  Lbe: "lbe",
  Lez: "lez",
  Tab: "tab",
  Tjk: "tjk",
  Hi: "hi",
  Mr: "mr",
  Ne: "ne",
  Bh: "bh",
  Mai: "mai",
  Ang: "ang",
  Bho: "bho",
  Mah: "mah",
  Sck: "sck",
  New: "new",
  Gom: "gom",
  Sa: "sa",
  Bgc: "bgc",
  Th: "th",
  ChSim: "ch_sim",
  ChTra: "ch_tra",
  Ja: "ja",
  Ko: "ko",
  Ta: "ta",
  Te: "te",
  Kn: "kn"
};

// src/api/types/PipelineType.ts
var PipelineType = {
  Playground: "PLAYGROUND",
  Managed: "MANAGED"
};

// src/api/types/StatusEnum.ts
var StatusEnum = {
  Pending: "PENDING",
  Success: "SUCCESS",
  Error: "ERROR",
  Canceled: "CANCELED"
};

// src/api/types/SupportedEvalLlmModelNames.ts
var SupportedEvalLlmModelNames = {
  Gpt35Turbo: "GPT_3_5_TURBO",
  Gpt4: "GPT_4",
  Gpt4Turbo: "GPT_4_TURBO"
};

// src/api/types/TransformationCategoryNames.ts
var TransformationCategoryNames = {
  NodeParser: "NODE_PARSER",
  Embedding: "EMBEDDING"
};

// src/errors/PlatformApiError.ts
var PlatformApiError = class _PlatformApiError extends Error {
  
  
  constructor({ message, statusCode, body }) {
    super(buildMessage({ message, statusCode, body }));
    Object.setPrototypeOf(this, _PlatformApiError.prototype);
    if (statusCode != null) {
      this.statusCode = statusCode;
    }
    if (body !== void 0) {
      this.body = body;
    }
  }
};
function buildMessage({
  message,
  statusCode,
  body
}) {
  let lines = [];
  if (message != null) {
    lines.push(message);
  }
  if (statusCode != null) {
    lines.push(`Status code: ${statusCode.toString()}`);
  }
  if (body != null) {
    lines.push(`Body: ${JSON.stringify(body, void 0, 2)}`);
  }
  return lines.join("\n");
}

// src/errors/PlatformApiTimeoutError.ts
var PlatformApiTimeoutError = class _PlatformApiTimeoutError extends Error {
  constructor() {
    super("Timeout");
    Object.setPrototypeOf(this, _PlatformApiTimeoutError.prototype);
  }
};

// src/api/errors/UnprocessableEntityError.ts
var UnprocessableEntityError = class _UnprocessableEntityError extends PlatformApiError {
  constructor(body) {
    super({
      message: "UnprocessableEntityError",
      statusCode: 422,
      body
    });
    Object.setPrototypeOf(this, _UnprocessableEntityError.prototype);
  }
};


























exports.dataSink_exports = dataSink_exports; exports.dataSource_exports = dataSource_exports; exports.health_exports = health_exports; exports.apiKey_exports = apiKey_exports; exports.project_exports = project_exports; exports.pipeline_exports = pipeline_exports; exports.eval_exports = eval_exports; exports.parsing_exports = parsing_exports; exports.componentDefinition_exports = componentDefinition_exports; exports.ConfigurableDataSinkNames = ConfigurableDataSinkNames; exports.ConfigurableDataSourceNames = ConfigurableDataSourceNames; exports.ConfigurableTransformationNames = ConfigurableTransformationNames; exports.JobNames = JobNames; exports.ManagedIngestionStatus = ManagedIngestionStatus; exports.ObjectType = ObjectType; exports.ParserLanguages = ParserLanguages; exports.PipelineType = PipelineType; exports.StatusEnum = StatusEnum; exports.SupportedEvalLlmModelNames = SupportedEvalLlmModelNames; exports.TransformationCategoryNames = TransformationCategoryNames; exports.PlatformApiError = PlatformApiError; exports.PlatformApiTimeoutError = PlatformApiTimeoutError; exports.UnprocessableEntityError = UnprocessableEntityError; exports.api_exports = api_exports;
//# sourceMappingURL=chunk-UL3T4TSL.cjs.map