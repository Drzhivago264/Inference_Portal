"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GAuthClient = void 0;
const google_common_1 = require("@langchain/google-common");
const google_auth_library_1 = require("google-auth-library");
class NodeJsonStream extends google_common_1.JsonStream {
    constructor(data) {
        super();
        data.on("data", (data) => this.appendBuffer(data.toString()));
        data.on("end", () => this.closeBuffer());
    }
}
class GAuthClient {
    constructor(fields) {
        Object.defineProperty(this, "gauth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const options = (0, google_common_1.ensureAuthOptionScopes)(fields?.authOptions, "scopes", fields?.platformType);
        this.gauth = new google_auth_library_1.GoogleAuth(options);
    }
    get clientType() {
        return "gauth";
    }
    async getProjectId() {
        return this.gauth.getProjectId();
    }
    async request(opts) {
        try {
            const ret = await this.gauth.request(opts);
            return opts.responseType !== "stream"
                ? ret
                : {
                    ...ret,
                    data: new NodeJsonStream(ret.data),
                };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (xx) {
            console.error("call to gauth.request", JSON.stringify(xx, null, 2));
            console.error("call to gauth.request opts=", JSON.stringify(opts, null, 2));
            console.error("call to gauth.request message:", xx?.message);
            throw xx;
        }
    }
}
exports.GAuthClient = GAuthClient;
