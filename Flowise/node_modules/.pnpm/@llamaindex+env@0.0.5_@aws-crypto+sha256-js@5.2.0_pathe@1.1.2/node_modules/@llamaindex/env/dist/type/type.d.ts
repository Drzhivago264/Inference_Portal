/// <reference types="node" resolution-mode="require"/>
/**
 * A filesystem interface that is meant to be compatible with
 * the 'fs' module from Node.js.
 * Allows for the use of similar inteface implementation on
 * browsers.
 */
export type GenericFileSystem = {
    writeFile(path: string, content: string): Promise<void>;
    /**
     * Reads a file and returns its content as a raw buffer.
     */
    readRawFile(path: string): Promise<Buffer>;
    /**
     * Reads a file and returns its content as an utf-8 string.
     */
    readFile(path: string): Promise<string>;
    access(path: string): Promise<void>;
    mkdir(path: string, options: {
        recursive: boolean;
    }): Promise<string | undefined>;
    mkdir(path: string): Promise<void>;
};
export type WalkableFileSystem = {
    readdir(path: string): Promise<string[]>;
    stat(path: string): Promise<any>;
};
export type CompleteFileSystem = GenericFileSystem & WalkableFileSystem;
/**
 * A filesystem implementation that stores files in memory.
 */
export declare class InMemoryFileSystem implements CompleteFileSystem {
    private files;
    writeFile(path: string, content: string, options?: unknown): Promise<void>;
    readFile(path: string): Promise<string>;
    access(path: string): Promise<void>;
    mkdir(path: string): Promise<undefined>;
    readdir(path: string): Promise<string[]>;
    stat(path: string): Promise<any>;
    readRawFile(path: string): Promise<Buffer>;
}
