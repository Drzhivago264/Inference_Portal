/**
 * Make the text bold.
 * @param text - The input text.
 * @returns The input text wrapped in double asterisks.
 */
declare const bold: (text: string) => string;
/**
 * Make the text italic.
 * @param text - The input text.
 * @returns The input text wrapped in underscores.
 */
declare const italic: (text: string) => string;
/**
 * Add strike-through to the text.
 * @param text - The input text.
 * @returns The input text wrapped in double tildes.
 */
declare const del: (text: string) => string;
/**
 * Add underline to the text.
 * @param text - The input text.
 * @returns The input text wrapped in <u> tags.
 */
declare const underline: (text: string) => string;
/**
 * Create an anchor link.
 * @param text - The anchor text.
 * @param href - The URL to link to.
 * @returns An anchor link in markdown format.
 */
declare const anchor: (text: string, href: string) => string;
/**
 * Create a code block or inline code.
 * @param inline - Whether the code should be inline or in a block.
 * @param language - The code language for syntax highlighting.
 * @param text - The code content.
 * @returns A code block or inline code in markdown format.
 */
declare const code: (inline?: boolean) => (language?: string) => (text: string) => string;
/**
 * Create inline code with optional syntax highlighting.
 * @param text - The code content.
 * @returns Inline code in markdown format.
 */
declare const inlineCode: (text: string) => string;
/**
 * Create a code block with optional syntax highlighting.
 * @param language - The code language for syntax highlighting (optional).
 * @param text - The code content.
 * @returns A code block in markdown format.
 */
declare const codeBlock: (language?: string) => (text: string) => string;
/**
 * Create an equation block or inline equation.
 * @param inline - Whether the equation should be inline or in a block.
 * @param text - The equation content.
 * @returns An equation block or inline equation in markdown format.
 */
declare const equation: (inline?: boolean) => (text: string) => string;
/**
 * Create an inline equation in markdown format.
 * @param text - The equation content.
 * @returns An inline equation enclosed in '$' delimiters.
 */
declare const inlineEquation: (text: string) => string;
/**
 * Create an equation block in markdown format.
 * @param text - The equation content.
 * @returns An equation block enclosed in '$$' delimiters.
 */
declare const equationBlock: (text: string) => string;
/**
 * Create a heading with the specified level.
 * @param level - The level of the heading (1 to 6).
 * @param text - The heading text.
 * @returns A heading in markdown format.
 */
declare const h: (level?: number) => (text: string) => string;
/**
 * Create a level 1 heading.
 */
declare const h1: (text: string) => string;
/**
 * Create a level 2 heading.
 */
declare const h2: (text: string) => string;
/**
 * Create a level 3 heading.
 */
declare const h3: (text: string) => string;
/**
 * Create a level 4 heading.
 */
declare const h4: (text: string) => string;
/**
 * Create a level 5 heading.
 */
declare const h5: (text: string) => string;
/**
 * Create a level 6 heading.
 */
declare const h6: (text: string) => string;
/**
 * Alias for creating headings.
 */
declare const heading: (level?: number) => (text: string) => string;
/**
 * Convert text to a blockquote.
 * @param text - The input text.
 * @returns The input text indented and prefixed with ">".
 */
declare const quote: (text: string) => string;
/**
 * Create a bullet point list item.
 * @param text - The content of the bullet point.
 * @param count - The optional index/count of the bullet point.
 * @returns A bullet point item in markdown format.
 */
declare const bullet: (text: string, count?: number) => string;
/**
 * Create a todo list item.
 * @param text - The content of the todo item.
 * @param checked - Whether the todo item is checked or not.
 * @returns A todo list item in markdown format.
 */
declare const todo: (text: string, checked: boolean) => string;
/**
 * Create an image element.
 * @param alt - The alt text for the image.
 * @param href - The URL of the image.
 * @returns An image element in markdown format.
 */
declare const image: (alt: string, href: string) => string;
/**
 * Create a horizontal divider.
 * @returns A horizontal divider in markdown format.
 */
declare const hr: () => string;
/**
 * Create a collapsible details element.
 * @param summary - The summary text for the details element.
 * @param details - The details/content of the details element.
 * @returns A details element in markdown format.
 */
declare const details: (summary: string, details: string) => string;
/**
 * Create a superscript text.
 * @param text - The input text.
 * @returns The input text wrapped in <sup> tags.
 */
declare const sup: (text: string) => string;
/**
 * Create a subscript text.
 * @param text - The input text.
 * @returns The input text wrapped in <sub> tags.
 */
declare const sub: (text: string) => string;
/**
 * Indent the text with a specified number of spaces.
 * @param space - The number of spaces to indent with.
 * @param text - The input text.
 * @param level - The level of indentation.
 * @returns The input text with added indentation.
 */
declare const indent: (space?: number) => (text: string, level?: number) => string;

export { anchor, bold, bullet, code, codeBlock, del, details, equation, equationBlock, h, h1, h2, h3, h4, h5, h6, heading, hr, image, indent, inlineCode, inlineEquation, italic, quote, sub, sup, todo, underline };
