/**
 * @license
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
import { escape, unescape } from './helpers';
export var TokenType;
(function (TokenType) {
    TokenType[TokenType["space"] = 1] = "space";
    TokenType[TokenType["text"] = 2] = "text";
    TokenType[TokenType["paragraph"] = 3] = "paragraph";
    TokenType[TokenType["heading"] = 4] = "heading";
    TokenType[TokenType["listStart"] = 5] = "listStart";
    TokenType[TokenType["listEnd"] = 6] = "listEnd";
    TokenType[TokenType["looseItemStart"] = 7] = "looseItemStart";
    TokenType[TokenType["looseItemEnd"] = 8] = "looseItemEnd";
    TokenType[TokenType["listItemStart"] = 9] = "listItemStart";
    TokenType[TokenType["listItemEnd"] = 10] = "listItemEnd";
    TokenType[TokenType["blockquoteStart"] = 11] = "blockquoteStart";
    TokenType[TokenType["blockquoteEnd"] = 12] = "blockquoteEnd";
    TokenType[TokenType["code"] = 13] = "code";
    TokenType[TokenType["table"] = 14] = "table";
    TokenType[TokenType["html"] = 15] = "html";
    TokenType[TokenType["hr"] = 16] = "hr";
})(TokenType || (TokenType = {}));
export class MarkedOptions {
    gfm = true;
    tables = true;
    breaks = false;
    pedantic = false;
    sanitize = false;
    sanitizer;
    mangle = true;
    smartLists = false;
    silent = false;
    /**
     * @param code The section of code to pass to the highlighter.
     * @param lang The programming language specified in the code block.
     */
    highlight;
    langPrefix = 'lang-';
    smartypants = false;
    headerPrefix = '';
    /**
     * An object containing functions to render tokens to HTML. Default: `new Renderer()`
     */
    renderer;
    /**
     * Self-close the tags for void elements (&lt;br/&gt;, &lt;img/&gt;, etc.)
     * with a "/" as required by XHTML.
     */
    xhtml = false;
    /**
     * The function that will be using to escape HTML entities.
     * By default using inner helper.
     */
    escape = escape;
    /**
     * The function that will be using to unescape HTML entities.
     * By default using inner helper.
     */
    unescape = unescape;
    /**
     * If set to `true`, an inline text will not be taken in paragraph.
     *
     * ```ts
     * // isNoP == false
     * Marked.parse('some text'); // returns '<p>some text</p>'
     *
     * Marked.setOptions({isNoP: true});
     *
     * Marked.parse('some text'); // returns 'some text'
     * ```
     */
    isNoP;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3BhY2thZ2VzL21hcmtkb3duL3NyYy9pbnRlcmZhY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUE0QzdDLE1BQU0sQ0FBTixJQUFZLFNBaUJYO0FBakJELFdBQVksU0FBUztJQUNuQiwyQ0FBUyxDQUFBO0lBQ1QseUNBQUksQ0FBQTtJQUNKLG1EQUFTLENBQUE7SUFDVCwrQ0FBTyxDQUFBO0lBQ1AsbURBQVMsQ0FBQTtJQUNULCtDQUFPLENBQUE7SUFDUCw2REFBYyxDQUFBO0lBQ2QseURBQVksQ0FBQTtJQUNaLDJEQUFhLENBQUE7SUFDYix3REFBVyxDQUFBO0lBQ1gsZ0VBQWUsQ0FBQTtJQUNmLDREQUFhLENBQUE7SUFDYiwwQ0FBSSxDQUFBO0lBQ0osNENBQUssQ0FBQTtJQUNMLDBDQUFJLENBQUE7SUFDSixzQ0FBRSxDQUFBO0FBQ0osQ0FBQyxFQWpCVyxTQUFTLEtBQVQsU0FBUyxRQWlCcEI7QUFzREQsTUFBTSxPQUFPLGFBQWE7SUFDeEIsR0FBRyxHQUFhLElBQUksQ0FBQztJQUNyQixNQUFNLEdBQWEsSUFBSSxDQUFDO0lBQ3hCLE1BQU0sR0FBYSxLQUFLLENBQUM7SUFDekIsUUFBUSxHQUFhLEtBQUssQ0FBQztJQUMzQixRQUFRLEdBQWEsS0FBSyxDQUFDO0lBQzNCLFNBQVMsQ0FBNEI7SUFDckMsTUFBTSxHQUFhLElBQUksQ0FBQztJQUN4QixVQUFVLEdBQWEsS0FBSyxDQUFDO0lBQzdCLE1BQU0sR0FBYSxLQUFLLENBQUM7SUFDekI7OztPQUdHO0lBQ0gsU0FBUyxDQUEyQztJQUNwRCxVQUFVLEdBQVksT0FBTyxDQUFDO0lBQzlCLFdBQVcsR0FBYSxLQUFLLENBQUM7SUFDOUIsWUFBWSxHQUFZLEVBQUUsQ0FBQztJQUMzQjs7T0FFRztJQUNILFFBQVEsQ0FBWTtJQUNwQjs7O09BR0c7SUFDSCxLQUFLLEdBQWEsS0FBSyxDQUFDO0lBQ3hCOzs7T0FHRztJQUNILE1BQU0sR0FBZ0QsTUFBTSxDQUFDO0lBQzdEOzs7T0FHRztJQUNILFFBQVEsR0FBOEIsUUFBUSxDQUFDO0lBQy9DOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsS0FBSyxDQUFXO0NBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxOC0yMDIxLCDQmtC+0YHRgtGPINCi0YDQtdGC0Y/Qui4gKE1JVCBMaWNlbnNlZClcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90cy1zdGFjay9tYXJrZG93blxuICovXG5cbmltcG9ydCB7IGVzY2FwZSwgdW5lc2NhcGUgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmVyJztcblxuZXhwb3J0IGludGVyZmFjZSBPYmoge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVsZXNCbG9ja0Jhc2Uge1xuICBuZXdsaW5lOiBSZWdFeHA7XG4gIGNvZGU6IFJlZ0V4cDtcbiAgaHI6IFJlZ0V4cDtcbiAgaGVhZGluZzogUmVnRXhwO1xuICBsaGVhZGluZzogUmVnRXhwO1xuICBibG9ja3F1b3RlOiBSZWdFeHA7XG4gIGxpc3Q6IFJlZ0V4cDtcbiAgaHRtbDogUmVnRXhwO1xuICBkZWY6IFJlZ0V4cDtcbiAgcGFyYWdyYXBoOiBSZWdFeHA7XG4gIHRleHQ6IFJlZ0V4cDtcbiAgYnVsbGV0OiBSZWdFeHA7XG4gIC8qKlxuICAgKiBMaXN0IGl0ZW0gKDxsaT4pLlxuICAgKi9cbiAgaXRlbTogUmVnRXhwO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bGVzQmxvY2tHZm0gZXh0ZW5kcyBSdWxlc0Jsb2NrQmFzZSB7XG4gIGZlbmNlczogUmVnRXhwO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bGVzQmxvY2tUYWJsZXMgZXh0ZW5kcyBSdWxlc0Jsb2NrR2ZtIHtcbiAgbnB0YWJsZTogUmVnRXhwO1xuICB0YWJsZTogUmVnRXhwO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpbmsge1xuICBocmVmOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua3Mge1xuICBba2V5OiBzdHJpbmddOiBMaW5rO1xufVxuXG5leHBvcnQgZW51bSBUb2tlblR5cGUge1xuICBzcGFjZSA9IDEsXG4gIHRleHQsXG4gIHBhcmFncmFwaCxcbiAgaGVhZGluZyxcbiAgbGlzdFN0YXJ0LFxuICBsaXN0RW5kLFxuICBsb29zZUl0ZW1TdGFydCxcbiAgbG9vc2VJdGVtRW5kLFxuICBsaXN0SXRlbVN0YXJ0LFxuICBsaXN0SXRlbUVuZCxcbiAgYmxvY2txdW90ZVN0YXJ0LFxuICBibG9ja3F1b3RlRW5kLFxuICBjb2RlLFxuICB0YWJsZSxcbiAgaHRtbCxcbiAgaHJcbn1cblxuZXhwb3J0IHR5cGUgQWxpZ24gPSAnY2VudGVyJyB8ICdsZWZ0JyB8ICdyaWdodCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9rZW4ge1xuICB0eXBlOiBudW1iZXIgfCBzdHJpbmc7XG4gIHRleHQ/OiBzdHJpbmc7XG4gIGxhbmc/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBNZXRhZGF0YSBvZiBnZm0gY29kZS5cbiAgICovXG4gIG1ldGE/OiBzdHJpbmc7XG4gIGRlcHRoPzogbnVtYmVyO1xuICBoZWFkZXI/OiBzdHJpbmdbXTtcbiAgYWxpZ24/OiBBbGlnbltdO1xuICBjZWxscz86IHN0cmluZ1tdW107XG4gIG9yZGVyZWQ/OiBib29sZWFuO1xuICBwcmU/OiBib29sZWFuO1xuICBlc2NhcGVkPzogYm9vbGVhbjtcbiAgZXhlY0Fycj86IFJlZ0V4cEV4ZWNBcnJheTtcbiAgLyoqXG4gICAqIFVzZWQgZm9yIGRlYnVnZ2luZy4gSWRlbnRpZmllcyB0aGUgbGluZSBudW1iZXIgaW4gdGhlIHJlc3VsdGluZyBIVE1MIGZpbGUuXG4gICAqL1xuICBsaW5lPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bGVzSW5saW5lQmFzZSB7XG4gIGVzY2FwZTogUmVnRXhwO1xuICBhdXRvbGluazogUmVnRXhwO1xuICB0YWc6IFJlZ0V4cDtcbiAgbGluazogUmVnRXhwO1xuICByZWZsaW5rOiBSZWdFeHA7XG4gIG5vbGluazogUmVnRXhwO1xuICBzdHJvbmc6IFJlZ0V4cDtcbiAgZW06IFJlZ0V4cDtcbiAgY29kZTogUmVnRXhwO1xuICBicjogUmVnRXhwO1xuICB0ZXh0OiBSZWdFeHA7XG4gIF9pbnNpZGU6IFJlZ0V4cDtcbiAgX2hyZWY6IFJlZ0V4cDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdWxlc0lubGluZVBlZGFudGljIGV4dGVuZHMgUnVsZXNJbmxpbmVCYXNlIHt9XG5cbi8qKlxuICogR0ZNIElubGluZSBHcmFtbWFyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUnVsZXNJbmxpbmVHZm0gZXh0ZW5kcyBSdWxlc0lubGluZUJhc2Uge1xuICB1cmw6IFJlZ0V4cDtcbiAgZGVsOiBSZWdFeHA7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVsZXNJbmxpbmVCcmVha3MgZXh0ZW5kcyBSdWxlc0lubGluZUdmbSB7fVxuXG5leHBvcnQgY2xhc3MgTWFya2VkT3B0aW9ucyB7XG4gIGdmbT86IGJvb2xlYW4gPSB0cnVlO1xuICB0YWJsZXM/OiBib29sZWFuID0gdHJ1ZTtcbiAgYnJlYWtzPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwZWRhbnRpYz86IGJvb2xlYW4gPSBmYWxzZTtcbiAgc2FuaXRpemU/OiBib29sZWFuID0gZmFsc2U7XG4gIHNhbml0aXplcj86ICh0ZXh0OiBzdHJpbmcpID0+IHN0cmluZztcbiAgbWFuZ2xlPzogYm9vbGVhbiA9IHRydWU7XG4gIHNtYXJ0TGlzdHM/OiBib29sZWFuID0gZmFsc2U7XG4gIHNpbGVudD86IGJvb2xlYW4gPSBmYWxzZTtcbiAgLyoqXG4gICAqIEBwYXJhbSBjb2RlIFRoZSBzZWN0aW9uIG9mIGNvZGUgdG8gcGFzcyB0byB0aGUgaGlnaGxpZ2h0ZXIuXG4gICAqIEBwYXJhbSBsYW5nIFRoZSBwcm9ncmFtbWluZyBsYW5ndWFnZSBzcGVjaWZpZWQgaW4gdGhlIGNvZGUgYmxvY2suXG4gICAqL1xuICBoaWdobGlnaHQ/OiAoY29kZTogc3RyaW5nLCBsYW5nPzogc3RyaW5nKSA9PiBzdHJpbmc7XG4gIGxhbmdQcmVmaXg/OiBzdHJpbmcgPSAnbGFuZy0nO1xuICBzbWFydHlwYW50cz86IGJvb2xlYW4gPSBmYWxzZTtcbiAgaGVhZGVyUHJlZml4Pzogc3RyaW5nID0gJyc7XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBmdW5jdGlvbnMgdG8gcmVuZGVyIHRva2VucyB0byBIVE1MLiBEZWZhdWx0OiBgbmV3IFJlbmRlcmVyKClgXG4gICAqL1xuICByZW5kZXJlcj86IFJlbmRlcmVyO1xuICAvKipcbiAgICogU2VsZi1jbG9zZSB0aGUgdGFncyBmb3Igdm9pZCBlbGVtZW50cyAoJmx0O2JyLyZndDssICZsdDtpbWcvJmd0OywgZXRjLilcbiAgICogd2l0aCBhIFwiL1wiIGFzIHJlcXVpcmVkIGJ5IFhIVE1MLlxuICAgKi9cbiAgeGh0bWw/OiBib29sZWFuID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzaW5nIHRvIGVzY2FwZSBIVE1MIGVudGl0aWVzLlxuICAgKiBCeSBkZWZhdWx0IHVzaW5nIGlubmVyIGhlbHBlci5cbiAgICovXG4gIGVzY2FwZT86IChodG1sOiBzdHJpbmcsIGVuY29kZT86IGJvb2xlYW4pID0+IHN0cmluZyA9IGVzY2FwZTtcbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNpbmcgdG8gdW5lc2NhcGUgSFRNTCBlbnRpdGllcy5cbiAgICogQnkgZGVmYXVsdCB1c2luZyBpbm5lciBoZWxwZXIuXG4gICAqL1xuICB1bmVzY2FwZT86IChodG1sOiBzdHJpbmcpID0+IHN0cmluZyA9IHVuZXNjYXBlO1xuICAvKipcbiAgICogSWYgc2V0IHRvIGB0cnVlYCwgYW4gaW5saW5lIHRleHQgd2lsbCBub3QgYmUgdGFrZW4gaW4gcGFyYWdyYXBoLlxuICAgKlxuICAgKiBgYGB0c1xuICAgKiAvLyBpc05vUCA9PSBmYWxzZVxuICAgKiBNYXJrZWQucGFyc2UoJ3NvbWUgdGV4dCcpOyAvLyByZXR1cm5zICc8cD5zb21lIHRleHQ8L3A+J1xuICAgKlxuICAgKiBNYXJrZWQuc2V0T3B0aW9ucyh7aXNOb1A6IHRydWV9KTtcbiAgICpcbiAgICogTWFya2VkLnBhcnNlKCdzb21lIHRleHQnKTsgLy8gcmV0dXJucyAnc29tZSB0ZXh0J1xuICAgKiBgYGBcbiAgICovXG4gIGlzTm9QPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMZXhlclJldHVybnMge1xuICB0b2tlbnM6IFRva2VuW107XG4gIGxpbmtzOiBMaW5rcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWJ1Z1JldHVybnMgZXh0ZW5kcyBMZXhlclJldHVybnMge1xuICByZXN1bHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXBsYWNlbWVudHMge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVsZXNJbmxpbmVDYWxsYmFjayB7XG4gIHJlZ2V4cD86IFJlZ0V4cDtcbiAgY29uZGl0aW9uKCk6IFJlZ0V4cDtcbiAgdG9rZW5pemUoZXhlY0FycjogUmVnRXhwRXhlY0FycmF5KTogdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgU2ltcGxlUmVuZGVyZXIgPSAoZXhlY0Fycj86IFJlZ0V4cEV4ZWNBcnJheSkgPT4gc3RyaW5nO1xuIl19