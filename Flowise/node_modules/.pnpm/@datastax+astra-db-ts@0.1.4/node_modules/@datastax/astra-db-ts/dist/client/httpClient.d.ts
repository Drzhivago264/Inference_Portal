import { AxiosRequestConfig } from "axios";
export declare const AUTH_API_PATH = "/v1/auth";
interface APIClientOptions {
    applicationToken?: string;
    baseApiPath?: string;
    baseUrl?: string;
    authHeaderName?: string;
    logLevel?: string;
    username?: string;
    password?: string;
    authUrl?: string;
    isAstra?: boolean;
    logSkippedOptions?: boolean;
}
export interface APIResponse {
    status?: any;
    data?: any;
    errors?: any;
}
export declare class HTTPClient {
    baseUrl: string;
    applicationToken: string;
    authHeaderName: string;
    username: string;
    password: string;
    authUrl: string;
    isAstra: boolean;
    logSkippedOptions: boolean;
    constructor(options: APIClientOptions);
    _request(requestInfo: AxiosRequestConfig): Promise<APIResponse>;
    executeCommand(data: Record<string, any>, optionsToRetain: Set<string> | null): Promise<APIResponse>;
}
export declare class StargateServerError extends Error {
    errors: any[];
    command: Record<string, any>;
    status: any;
    constructor(response: any, command: Record<string, any>);
}
export declare const handleIfErrorResponse: (response: any, data: Record<string, any>) => void;
export {};
