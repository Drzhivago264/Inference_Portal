"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.StargateAstraError = exports.Db = void 0;
const client_1 = require("../client");
const options_1 = require("./options");
const collection_1 = require("./collection");
const utils_1 = require("./utils");
class Db {
    constructor(httpClient, name) {
        if (!name) {
            throw new Error("Db: name is required");
        }
        this.rootHttpClient = httpClient;
        // use a clone of the underlying http client to support multiple db's from a single connection
        this.httpClient = new client_1.HTTPClient({
            baseUrl: httpClient.baseUrl,
            username: httpClient.username,
            password: httpClient.password,
            authUrl: httpClient.authUrl,
            applicationToken: httpClient.applicationToken,
            authHeaderName: httpClient.authHeaderName,
            isAstra: httpClient.isAstra,
            logSkippedOptions: httpClient.logSkippedOptions,
        });
        this.name = name;
    }
    /**
     *
     * @param collectionName
     * @returns Collection
     */
    collection(collectionName) {
        if (!collectionName) {
            throw new Error("Db: collection name is required");
        }
        return new collection_1.Collection(this.httpClient, collectionName);
    }
    /**
     *
     * @param collectionName
     * @param options
     * @returns Promise
     */
    async createCollection(collectionName, options) {
        return (0, utils_1.executeOperation)(async () => {
            const command = {
                createCollection: {
                    name: collectionName,
                },
            };
            if (options != null) {
                command.createCollection.options = options;
            }
            return await this.httpClient.executeCommand(command, options_1.createCollectionOptionsKeys);
        });
    }
    /**
     *
     * @param collectionName
     * @returns APIResponse
     */
    async dropCollection(collectionName) {
        const command = {
            deleteCollection: {
                name: collectionName,
            },
        };
        return await this.httpClient.executeCommand(command, null);
    }
    /**
     *
     * @returns Promise
     */
    async dropDatabase() {
        if (this.rootHttpClient.isAstra) {
            throw new StargateAstraError("Cannot drop database in Astra. Please use the Astra UI to drop the database.");
        }
        return await (0, utils_1.dropNamespace)(this.rootHttpClient, this.name);
    }
    /**
     *
     * @returns Promise
     */
    async createDatabase() {
        return await (0, utils_1.createNamespace)(this.rootHttpClient, this.name);
    }
}
exports.Db = Db;
class StargateAstraError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
    }
}
exports.StargateAstraError = StargateAstraError;
//# sourceMappingURL=db.js.map