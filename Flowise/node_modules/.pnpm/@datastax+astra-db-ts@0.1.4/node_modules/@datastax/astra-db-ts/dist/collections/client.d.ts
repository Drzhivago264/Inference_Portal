import { Db } from "./db";
import { HTTPClient } from "../client";
import { Collection } from "./collection";
import { CreateCollectionOptions } from "./options";
export interface ClientOptions {
    applicationToken?: string;
    baseApiPath?: string;
    logLevel?: string;
    authHeaderName?: string;
    createNamespaceOnConnect?: boolean;
    username?: string;
    password?: string;
    authUrl?: string;
    isAstra?: boolean;
    logSkippedOptions?: boolean;
}
export declare class Client {
    httpClient: HTTPClient;
    keyspaceName?: string;
    createNamespaceOnConnect?: boolean;
    constructor(baseUrl: string, keyspaceName: string, options: ClientOptions);
    /**
     * Setup a connection to the Astra/Stargate JSON API
     * @param uri an Stargate JSON API uri (Eg. http://localhost:8181/v1/testks1) where testks1 is the name of the keyspace/Namespace which should always be the last part of the URL
     * @returns Client
     */
    static connect(uri: string, options?: ClientOptions | null): Promise<Client>;
    collection(name: string): Promise<Collection>;
    createCollection(collectionName: string, options?: CreateCollectionOptions): Promise<any>;
    dropCollection(collectionName: string): Promise<import("../client/httpClient").APIResponse>;
    /**
     * Connect the Client instance to JSON API (create Namespace automatically when the 'createNamespaceOnConnect' flag is set to true)
     * @returns a Client instance
     */
    connect(): Promise<Client>;
    /**
     * Use a JSON API keyspace
     * @param dbName the JSON API keyspace to connect to
     * @returns Db
     */
    db(dbName?: string): Db;
    /**
     *
     * @param maxListeners
     * @returns number
     */
    setMaxListeners(maxListeners: number): number;
    /**
     *
     * @returns Client
     */
    close(): this;
    startSession(): void;
}
export declare class AstraDB extends Client {
    constructor(...args: any[]);
}
