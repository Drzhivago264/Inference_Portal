import { FindCursor } from "./cursor";
import { HTTPClient } from "../client";
import { DeleteOneOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, FindOneOptions, InsertManyOptions, UpdateManyOptions, UpdateOneOptions, FindOptions, SortOption } from "./options";
export interface JSONAPIUpdateResult {
    matchedCount: number;
    modifiedCount: number;
    acknowledged: boolean;
    upsertedId?: any;
    upsertedCount?: number;
}
export interface JSONAPIDeleteResult {
    acknowledged: boolean;
    deletedCount: number;
}
export interface JSONAPIInsertOneResult {
    acknowledged: boolean;
    insertedId: any;
}
export interface JSONAPIModifyResult {
    ok: number;
    value: Record<string, any> | null;
}
export type FindOneAndUpdateCommand = {
    findOneAndUpdate: {
        filter?: Record<string, any>;
        update?: Record<string, any>;
        options?: FindOneAndUpdateOptions;
        sort?: SortOption;
    };
};
export type FindOneAndDeleteCommand = {
    findOneAndDelete: {
        filter?: Record<string, any>;
        sort?: SortOption;
    };
};
export type FindOneCommand = {
    findOne: {
        filter?: Record<string, any>;
        options?: FindOneOptions;
        sort?: SortOption;
        projection?: Record<string, any>;
    };
};
export type DeleteOneCommand = {
    deleteOne: {
        filter?: Record<string, any>;
        sort?: SortOption;
    };
};
export type UpdateOneCommand = {
    updateOne: {
        filter?: Record<string, any>;
        sort?: SortOption;
        update?: Record<string, any>;
        options?: UpdateOneOptions;
    };
};
export declare class Collection {
    httpClient: any;
    name: string;
    collectionName: string;
    constructor(httpClient: HTTPClient, name: string);
    insertOne(document: Record<string, any>): Promise<any>;
    insertMany(documents: Record<string, any>[], options?: InsertManyOptions): Promise<any>;
    updateOne(filter: Record<string, any>, update: Record<string, any>, options?: UpdateOneOptions): Promise<any>;
    updateMany(filter: Record<string, any>, update: Record<string, any>, options?: UpdateManyOptions): Promise<any>;
    deleteOne(filter: Record<string, any>, options?: DeleteOneOptions): Promise<JSONAPIDeleteResult>;
    deleteMany(filter: Record<string, any>): Promise<JSONAPIDeleteResult>;
    find(filter: Record<string, any>, options?: FindOptions): FindCursor;
    findOne(filter: Record<string, any>, options?: FindOneOptions): Promise<Record<string, any> | null>;
    findOneAndReplace(filter: Record<string, any>, replacement: Record<string, any>, options?: FindOneAndReplaceOptions): Promise<JSONAPIModifyResult>;
    distinct(_key: any, _filter: any, _options?: any): Promise<void>;
    countDocuments(filter?: Record<string, any>): Promise<number>;
    findOneAndDelete(filter: Record<string, any>, options?: FindOneAndDeleteOptions): Promise<JSONAPIModifyResult>;
    /**
     * @deprecated
     */
    count(filter?: Record<string, any>): Promise<number>;
    findOneAndUpdate(filter: Record<string, any>, update: Record<string, any>, options?: FindOneAndUpdateOptions): Promise<JSONAPIModifyResult>;
}
export declare class AstraTsClientError extends Error {
    command: Record<string, any>;
    constructor(message: any, command: Record<string, any>);
}
