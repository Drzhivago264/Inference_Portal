{"version":3,"sources":["../src/crawler.ts","../src/libs.ts","../src/serializer/block/defaults.ts","../src/serializer/utils.ts","../src/serializer/block/strategy.ts","../src/serializer/block/index.ts","../src/serializer/property/defaults.ts","../src/serializer/property/strategy.ts","../src/serializer/property/index.ts","../src/serializer/index.ts","../src/utils.ts"],"sourcesContent":["import { Client, collectPaginatedAPI } from \"@notionhq/client\";\nimport { indent as _indent } from \"md-utils-ts\";\nimport { has } from \"./libs.js\";\nimport {\n  BlockSerializers,\n  PropertySerializers,\n  Serializers,\n  serializer,\n} from \"./serializer/index.js\";\nimport { propertiesSerializer } from \"./serializer/property/index.js\";\nimport {\n  NotionBlock,\n  NotionBlockObjectResponse,\n  NotionPage,\n  Page,\n  Pages,\n} from \"./types.js\";\n\nconst fetchNotionBlocks = (client: Client) => async (blockId: string) =>\n  collectPaginatedAPI(client.blocks.children.list, {\n    block_id: blockId,\n  }).catch((err) => {\n    console.error(`Fetching Notion block failed. [blockId: ${blockId}]`);\n    console.error(err);\n\n    return [];\n  });\n\nconst fetchNotionPage = (client: Client) => (pageId: string) =>\n  client.pages.retrieve({ page_id: pageId });\n\nconst fetchNotionDatabase = (client: Client) => (databaseId: string) =>\n  client.databases\n    .query({ database_id: databaseId })\n    .then(({ results }) => results)\n    .catch(() => []);\n\nconst blockIs = <T extends NotionBlock[\"type\"]>(\n  block: NotionBlock,\n  type: T,\n): block is Extract<NotionBlock, { type: T }> => block.type === type;\n\ntype PageLike = {\n  id: string;\n  created_time: string;\n  last_edited_time: string;\n};\nconst initPage = (\n  page: PageLike,\n  title: string,\n  parentId?: string,\n  properties?: string[],\n): Page => ({\n  metadata: {\n    id: page.id,\n    title,\n    createdTime: page.created_time,\n    lastEditedTime: page.last_edited_time,\n    parentId,\n  },\n  properties: properties || [],\n  lines: [],\n});\n\n/**\n * List of block types that do not need to be nested.\n * Avoid nesting when serializing due to the Notion Block structure.\n */\nconst IGNORE_NEST_LIST = [\"table\", \"table_row\", \"column_list\", \"column\"];\n\nconst indent = _indent();\n\nconst walking =\n  (client: Client) =>\n  (serializers: Serializers) =>\n  async (\n    parent: Page,\n    blocks: NotionBlockObjectResponse[],\n    pages: Pages = {},\n    depth = 0,\n  ): Promise<Pages> => {\n    const walk = walking(client)(serializers);\n    pages[parent.metadata.id] = pages[parent.metadata.id] || parent;\n\n    for (const block of blocks) {\n      if (!has(block, \"type\")) continue;\n\n      const serializeBlock = serializers.block[block.type];\n      const text = await serializeBlock(block as any);\n\n      if (text !== false) {\n        const line = indent(text, depth);\n        parent.lines.push(line);\n      }\n\n      if (blockIs(block, \"synced_block\")) {\n        // Specify the sync destination block id\n        const blockId = block.synced_block.synced_from?.block_id || block.id;\n        const blocks = await fetchNotionBlocks(client)(blockId);\n        const _pages = await walk(parent, blocks, pages, depth);\n\n        pages = { ...pages, ..._pages };\n\n        continue;\n      }\n\n      if (blockIs(block, \"child_page\")) {\n        const { title } = block.child_page;\n        const _parent = initPage(block, title, parent.metadata.id);\n        const _blocks = await fetchNotionBlocks(client)(block.id);\n        const _pages = await walk(_parent, _blocks, pages, 0);\n\n        pages = { ...pages, ..._pages };\n\n        continue;\n      }\n\n      if (blockIs(block, \"child_database\")) {\n        const { title } = block.child_database;\n        pages[block.id] = initPage(block, title, parent.metadata.id);\n        const crawlDB = dbCrawler({ client, serializers });\n        const _pages = await crawlDB(block.id);\n\n        pages = { ...pages, ..._pages };\n\n        continue;\n      }\n\n      if (block.has_children) {\n        const _blocks = await fetchNotionBlocks(client)(block.id);\n        const { type } = block;\n        const _depth = IGNORE_NEST_LIST.includes(type) ? depth : depth + 1;\n        const _pages = await walk(parent, _blocks, pages, _depth);\n\n        pages = { ...pages, ..._pages };\n\n        continue;\n      }\n    }\n\n    return pages;\n  };\n\nconst extractPageTitle = (page: NotionPage) => {\n  if (!has(page, \"properties\")) return \"\";\n\n  let title = \"\";\n\n  for (const prop of Object.values(page.properties)) {\n    if (prop.type !== \"title\") continue;\n\n    const text = serializer.property.defaults.title(\"\", prop) as string;\n    title = text.replace(\"[] \", \"\");\n  }\n\n  return title;\n};\n\nconst mergeSerializers = (serializers?: OptionalSerializers): Serializers => ({\n  block: { ...serializer.block.strategy, ...serializers?.block },\n  property: { ...serializer.property.strategy, ...serializers?.property },\n});\n\ntype OptionalSerializers = {\n  block?: Partial<BlockSerializers>;\n  property?: Partial<PropertySerializers>;\n};\nexport type CrawlerOptions = {\n  client: Client;\n  serializers?: OptionalSerializers;\n  parentId?: string;\n};\nexport type Crawler = (\n  options: CrawlerOptions,\n) => (rootPageId: string) => Promise<Pages>;\n\n/**\n * `crawler` is a higher-order function that returns a function designed to crawl through Notion pages.\n * It utilizes given client, optional serializers, and an optional parentId to customize its operation.\n *\n * @param {CrawlerOptions} options - The crawler options which contains:\n *  - client: An instance of the Notion client.\n *  - serializers?: An optional object that can be used to define custom serializers for blocks and properties.\n *  - parentId?: An optional parent ID which, if provided, associates the resulting pages with the given parent.\n *\n * @returns {Function} A function that takes a rootPageId (the ID of the main Notion page to start crawling from) and returns a Promise resolving to the crawled Pages.\n *\n * @example\n * // Initialize the crawler with options.\n * const crawl = crawler({ client: myClient });\n *\n * // Use the initialized crawler.\n * crawl(\"someRootPageId\")\n *   .then((pages) => {\n *     console.log(\"Crawled pages:\", pages);\n *   })\n *   .catch((error) => {\n *     console.error(\"Error during crawling:\", error);\n *   });\n */\nexport const crawler: Crawler =\n  ({ client, serializers, parentId }) =>\n  async (rootPageId: string) => {\n    const notionPage = await fetchNotionPage(client)(rootPageId);\n    if (!has(notionPage, \"parent\")) {\n      console.error(\"Unintended Notion Page object.\");\n      return {};\n    }\n\n    const _serializers = mergeSerializers(serializers);\n\n    const title = extractPageTitle(notionPage);\n    const serializeProps = propertiesSerializer(_serializers.property);\n    const props = await serializeProps(notionPage.properties);\n    const blocks = await fetchNotionBlocks(client)(notionPage.id);\n    const rootPage: Page = initPage(notionPage, title, parentId, props);\n\n    const walk = walking(client)(_serializers);\n    return walk(rootPage, blocks);\n  };\n\n/**\n * `dbCrawler` is specifically designed to crawl Notion databases. This function retrieves all records in a database and then\n * utilizes the `crawler` function for each individual record.\n *\n * Note: When working with a root page that is a database, use `dbCrawler` instead of the regular `crawler`.\n *\n * @param {CrawlerOptions} options - The options necessary for the crawl operation, which includes:\n *   - client: The Notion client used for making requests.\n *   - serializers: Optional serializers for block and property.\n *   - parentId: Optional parent ID.\n *\n * @returns {Function} A function that takes a `databaseId` and returns a promise that resolves to a `Pages` object, which is a collection of\n * all the pages found within the specified Notion database.\n */\nexport type DatabaseCrawler = (\n  options: CrawlerOptions,\n) => (databaseId: string) => Promise<Pages>;\nexport const dbCrawler: DatabaseCrawler = (options) => async (databaseId) => {\n  const crawl = crawler({ ...options, parentId: databaseId });\n  const records = await fetchNotionDatabase(options.client)(databaseId);\n\n  let context: Pages = {};\n\n  for (const record of records) {\n    const pages = await crawl(record.id);\n    context = { ...context, ...pages };\n  }\n\n  return context;\n};\n","export const has = <T extends Object, K extends string>(\n  obj: T,\n  key: K,\n): obj is Extract<T, { [k in K]: any }> => key in obj;\n","import * as md from \"md-utils-ts\";\nimport { fromLink, fromRichText } from \"../utils.js\";\nimport { Serializer } from \"./types.js\";\n\ntype Audio = Serializer<\"audio\">;\nexport const audio: Audio = (block) => {\n  const { title, href } = fromLink(block.audio);\n  return md.anchor(title, href);\n};\n\ntype Bookmark = Serializer<\"bookmark\">;\nexport const bookmark: Bookmark = (block) =>\n  md.anchor(fromRichText(block.bookmark.caption), block.bookmark.url);\n\ntype Breadcrumb = Serializer<\"breadcrumb\">;\nexport const breadcrumb: Breadcrumb = () => false;\n\ntype BulletedListItem = Serializer<\"bulleted_list_item\">;\nexport const bulletedListItem: BulletedListItem = (block) =>\n  md.bullet(fromRichText(block.bulleted_list_item.rich_text));\n\ntype Callout = Serializer<\"callout\">;\nexport const callout: Callout = (block) =>\n  md.quote(fromRichText(block.callout.rich_text));\n\ntype ChildPage = Serializer<\"child_page\">;\nexport const childPage: ChildPage = (block) => `[${block.child_page.title}]`;\n\ntype ChildDatabase = Serializer<\"child_database\">;\nexport const childDatabase: ChildDatabase = (block) =>\n  `[${block.child_database.title}]`;\n\ntype Code = Serializer<\"code\">;\nexport const code: Code = (block) =>\n  md.codeBlock(block.code.language)(fromRichText(block.code.rich_text));\n\ntype Column = Serializer<\"column\">;\nexport const column: Column = () => false;\n\ntype ColumnList = Serializer<\"column_list\">;\nexport const columnList: ColumnList = () => false;\n\ntype Divider = Serializer<\"divider\">;\nexport const divider: Divider = () => md.hr();\n\ntype Embed = Serializer<\"embed\">;\nexport const embed: Embed = (block) => {\n  const caption = fromRichText(block.embed.caption);\n  return md.anchor(caption, block.embed.url);\n};\n\ntype Equation = Serializer<\"equation\">;\nexport const equation: Equation = (block) =>\n  md.equationBlock(block.equation.expression);\n\ntype File = Serializer<\"file\">;\nexport const file: File = (block) => {\n  const { title, href } = fromLink(block.file);\n  return md.anchor(title, href);\n};\n\ntype Heading1 = Serializer<\"heading_1\">;\nexport const heading1: Heading1 = (block) =>\n  md.h1(fromRichText(block.heading_1.rich_text));\n\ntype Heading2 = Serializer<\"heading_2\">;\nexport const heading2: Heading2 = (block) =>\n  md.h2(fromRichText(block.heading_2.rich_text));\n\ntype Heading3 = Serializer<\"heading_3\">;\nexport const heading3: Heading3 = (block) =>\n  md.h3(fromRichText(block.heading_3.rich_text));\n\ntype Image = Serializer<\"image\">;\nexport const image: Image = (block) => {\n  const { title, href } = fromLink(block.image);\n  return md.image(title, href);\n};\n\ntype LinkPreview = Serializer<\"link_preview\">;\nexport const linkPreview: LinkPreview = (block) =>\n  md.anchor(block.type, block.link_preview.url);\n\ntype LinkToPage = Serializer<\"link_to_page\">;\nexport const linkToPage: LinkToPage = (block) => {\n  const href =\n    block.link_to_page.type === \"page_id\" ? block.link_to_page.page_id : \"\";\n  return md.anchor(block.type, href);\n};\n\ntype NumberedListItem = Serializer<\"numbered_list_item\">;\nexport const numberedListItem: NumberedListItem = (block) =>\n  md.bullet(fromRichText(block.numbered_list_item.rich_text), 1);\n\ntype Paragraph = Serializer<\"paragraph\">;\nexport const paragraph: Paragraph = (block) =>\n  fromRichText(block.paragraph.rich_text);\n\ntype PDF = Serializer<\"pdf\">;\nexport const pdf: PDF = (block) => {\n  const { title, href } = fromLink(block.pdf);\n  return md.anchor(title, href);\n};\n\ntype Quote = Serializer<\"quote\">;\nexport const quote: Quote = (block) =>\n  md.quote(fromRichText(block.quote.rich_text));\n\ntype SyncedBlock = Serializer<\"synced_block\">;\nexport const syncedBlock: SyncedBlock = () => false;\n\ntype Table = Serializer<\"table\">;\nexport const table: Table = () => false;\n\ntype TableOfContents = Serializer<\"table_of_contents\">;\nexport const tableOfContents: TableOfContents = () => false;\n\ntype TableRow = Serializer<\"table_row\">;\nexport const tableRow: TableRow = (block) =>\n  `| ${block.table_row.cells\n    .flatMap((row) => row.map((column) => fromRichText([column])))\n    .join(\" | \")} |`;\n\ntype Template = Serializer<\"template\">;\nexport const template: Template = (block) =>\n  fromRichText(block.template.rich_text);\n\ntype ToDo = Serializer<\"to_do\">;\nexport const toDo: ToDo = (block) =>\n  md.todo(fromRichText(block.to_do.rich_text), block.to_do.checked);\n\ntype Toggle = Serializer<\"toggle\">;\nexport const toggle: Toggle = (block) => fromRichText(block.toggle.rich_text);\n\ntype Unsupported = Serializer<\"unsupported\">;\nexport const unsupported: Unsupported = () => false;\n\ntype Video = Serializer<\"video\">;\nexport const video: Video = (block) => {\n  const { title, href } = fromLink(block.video);\n  return md.anchor(title, href);\n};\n\nexport const defaults = {\n  audio,\n  bookmark,\n  breadcrumb,\n  bulletedListItem,\n  callout,\n  childDatabase,\n  childPage,\n  code,\n  column,\n  columnList,\n  divider,\n  embed,\n  equation,\n  file,\n  heading1,\n  heading2,\n  heading3,\n  image,\n  linkPreview,\n  linkToPage,\n  numberedListItem,\n  paragraph,\n  pdf,\n  quote,\n  syncedBlock,\n  table,\n  tableOfContents,\n  tableRow,\n  template,\n  toDo,\n  toggle,\n  unsupported,\n  video,\n};\n","import * as md from \"md-utils-ts\";\nimport { has } from \"../libs.js\";\nimport { ExtractBlock, ExtractProperty } from \"../types.js\";\n\ntype NotionParagraphBlock = ExtractBlock<\"paragraph\">;\ntype NotionRichText = NotionParagraphBlock[\"paragraph\"][\"rich_text\"];\ntype NotionAnnotations = NotionRichText[number][\"annotations\"];\ntype NotionImageBlock = ExtractBlock<\"image\">;\ntype NotionLinkObject = NotionImageBlock[\"image\"];\n\nexport type Annotate = (text: string, annotations: NotionAnnotations) => string;\n\n/**\n * `annotate` is a function designed to apply various annotations to a given text. It transforms the text based on the `NotionAnnotations` provided.\n *\n * Annotations include: code, bold, italic, strikethrough, and underline.\n * Multiple annotations can be applied to the text at once.\n *\n * @param {string} text - The original text to which annotations should be applied.\n * @param {NotionAnnotations} annotations - An object that specifies which annotations to apply to the text.\n * The object can have properties such as `code`, `bold`, `italic`, `strikethrough`, and `underline` set to `true` to apply the corresponding annotation.\n *\n * @returns {string} The annotated text.\n */\nexport const annotate: Annotate = (text, annotations) => {\n  if (annotations.code) text = md.inlineCode(text);\n  if (annotations.bold) text = md.bold(text);\n  if (annotations.italic) text = md.italic(text);\n  if (annotations.strikethrough) text = md.del(text);\n  if (annotations.underline) text = md.underline(text);\n\n  return text;\n};\n\nexport type FromRichText = (richText: NotionRichText) => string;\n\n/**\n * `fromRichText` transforms a Notion-rich text object into a plain string representation, preserving annotations such as bold, italic, etc., and links (hrefs).\n *\n * The function first determines if the provided text is whitespace only. If true, it just returns the whitespace.\n * Otherwise, it preserves the leading and trailing spaces, trims the main content, applies annotations, and embeds links if present.\n *\n * @param {NotionRichText} richTextObject - An array of Notion rich text objects. Each object has a `plain_text` field with the raw text,\n * `annotations` detailing style attributes, and an optional `href` for links.\n *\n * @returns {string} A transformed string representation of the provided Notion-rich text object.\n */\nexport const fromRichText: FromRichText = (richTextObject) =>\n  richTextObject\n    .map(({ plain_text, annotations, href }) => {\n      if (plain_text.match(/^\\s*$/)) return plain_text;\n\n      const leadingSpaceMatch = plain_text.match(/^(\\s*)/);\n      const trailingSpaceMatch = plain_text.match(/(\\s*)$/);\n\n      const leading_space = leadingSpaceMatch ? leadingSpaceMatch[0] : \"\";\n      const trailing_space = trailingSpaceMatch ? trailingSpaceMatch[0] : \"\";\n\n      const text = plain_text.trim();\n\n      if (text === \"\") return leading_space + trailing_space;\n\n      const annotatedText = annotate(text, annotations);\n      const linkedText = href ? md.anchor(annotatedText, href) : annotatedText;\n\n      return leading_space + linkedText + trailing_space;\n    })\n    .join(\"\");\n\nexport type fromLink = (linkObject: NotionLinkObject) => {\n  title: string;\n  href: string;\n};\n\n/**\n * `fromLink` transforms a Notion link object into a simpler representation with a title and href.\n *\n * @param {NotionLinkObject} linkObject - The Notion link object to be transformed.\n *\n * @returns {Object} An object with a `title` which is either the caption of the link, the file name, or a default \"link\" string,\n * and `href` which is the URL of the link.\n */\nexport const fromLink: fromLink = (linkObject) => {\n  const caption = fromRichText(linkObject.caption);\n  const href =\n    linkObject.type === \"external\"\n      ? linkObject.external.url\n      : linkObject.file.url;\n  const fileName = href.match(/[^\\/\\\\&\\?]+\\.\\w{3,4}(?=([\\?&].*$|$))/);\n  const title = caption.trim() ? caption : fileName ? fileName[0] : \"link\";\n  return { title, href };\n};\n\ntype NotionUserObject = ExtractProperty<\"created_by\">[\"created_by\"];\ntype FromUser = (_user: NotionUserObject) => string;\n\n/**\n * `fromUser` transforms a Notion user object into a string representation of the user's name.\n * If the user is a bot, \"[bot]\" is appended to the name.\n *\n * @param {NotionUserObject} _user - The Notion user object to be transformed.\n *\n * @returns {string} A string representation of the user's name.\n */\nexport const fromUser: FromUser = (_user) => {\n  if (!has(_user, \"type\")) return \"<empty>\";\n\n  const name = _user.name ?? \"<empty>\";\n  return _user.type === \"person\" ? `${name}` : `${name}[bot]`;\n};\n\ntype NotionDateObject = ExtractProperty<\"date\">[\"date\"];\ntype FromDate = (date: NotionDateObject) => string;\n\n/**\n * `fromDate` transforms a Notion date object into a string representation.\n * If the date object contains both a start and end date, both dates are returned. Otherwise, only the start date is returned.\n *\n * @param {NotionDateObject} date - The Notion date object to be transformed.\n *\n * @returns {string} A string representation of the date or dates.\n */\nexport const fromDate: FromDate = (date) => {\n  if (!date) return \"<empty>\";\n\n  return date.end ? `(start)${date.start}, (end): ${date.end}` : date.start;\n};\n","import { defaults } from \"./defaults.js\";\nimport { Serializers } from \"./types.js\";\n\nexport const strategy: Serializers = {\n  audio: defaults.audio,\n  bookmark: defaults.bookmark,\n  breadcrumb: defaults.breadcrumb,\n  bulleted_list_item: defaults.bulletedListItem,\n  callout: defaults.callout,\n  child_database: defaults.childDatabase,\n  child_page: defaults.childPage,\n  code: defaults.code,\n  column: defaults.column,\n  column_list: defaults.columnList,\n  divider: defaults.divider,\n  embed: defaults.embed,\n  equation: defaults.equation,\n  file: defaults.file,\n  heading_1: defaults.heading1,\n  heading_2: defaults.heading2,\n  heading_3: defaults.heading3,\n  image: defaults.image,\n  link_preview: defaults.linkPreview,\n  link_to_page: defaults.linkToPage,\n  numbered_list_item: defaults.numberedListItem,\n  paragraph: defaults.paragraph,\n  pdf: defaults.pdf,\n  quote: defaults.quote,\n  synced_block: defaults.syncedBlock,\n  table: defaults.table,\n  table_of_contents: defaults.tableOfContents,\n  table_row: defaults.tableRow,\n  template: defaults.template,\n  to_do: defaults.toDo,\n  toggle: defaults.toggle,\n  unsupported: defaults.unsupported,\n  video: defaults.video,\n};\n","import { defaults } from \"./defaults.js\";\nimport { strategy } from \"./strategy.js\";\n\nexport default { defaults, strategy };\n","import { anchor } from \"md-utils-ts\";\nimport { has } from \"../../libs.js\";\nimport { NotionProperty } from \"../../types.js\";\nimport { fromDate, fromRichText, fromUser } from \"../utils.js\";\nimport { Serializer } from \"./types.js\";\n\nconst DELIMITER = \", \";\nconst EMPTY_STR = \"<empty>\";\n\ntype Checkbox = Serializer<\"checkbox\">;\nexport const checkbox: Checkbox = (name, prop) => `[${name}] ${prop.checkbox}`;\n\ntype CreatedBy = Serializer<\"created_by\">;\nexport const createdBy: CreatedBy = (name, prop) =>\n  `[${name}] ${fromUser(prop.created_by)}`;\n\ntype CreatedTime = Serializer<\"created_time\">;\nexport const createdTime: CreatedTime = (name, prop) =>\n  `[${name}] ${prop.created_time}`;\n\ntype _Date = Serializer<\"date\">;\nexport const date: _Date = (name, prop) => `[${name}] ${fromDate(prop.date)}`;\n\ntype Email = Serializer<\"email\">;\nexport const email: Email = (name, prop) =>\n  `[${name}] ${prop.email ?? EMPTY_STR}`;\n\ntype Files = Serializer<\"files\">;\nexport const files: Files = (name, prop) =>\n  `[${name}] ` +\n  prop.files\n    .map((file) => {\n      const href = has(file, \"external\") ? file.external.url : file.file.url;\n      return anchor(file.name, href);\n    })\n    .join(DELIMITER);\n\ntype Formula = Serializer<\"formula\">;\nexport const formula: Formula = (name, prop) => {\n  switch (prop.formula.type) {\n    case \"string\":\n      return `[${name}] ${prop.formula.string ?? EMPTY_STR}`;\n    case \"boolean\":\n      return `[${name}] ${prop.formula.boolean ?? EMPTY_STR}`;\n    case \"date\":\n      return `[${name}] ${fromDate(prop.formula.date)}`;\n    case \"number\":\n      return `[${name}] ${prop.formula.number}`;\n  }\n};\n\ntype LastEditedBy = Serializer<\"last_edited_by\">;\nexport const lastEditedBy: LastEditedBy = (name, prop) =>\n  `[${name}] ${fromUser(prop.last_edited_by)}`;\n\ntype LastEditedTime = Serializer<\"last_edited_time\">;\nexport const lastEditedTime: LastEditedTime = (name, prop) =>\n  `[${name}] ${prop.last_edited_time}`;\n\ntype MultiSelect = Serializer<\"multi_select\">;\nexport const multiSelect: MultiSelect = (name, prop) =>\n  `[${name}] ` + prop.multi_select.map((select) => select.name).join(DELIMITER);\n\ntype _Number = Serializer<\"number\">;\nexport const number: _Number = (name, prop) =>\n  `[${name}] ${prop.number ?? EMPTY_STR}`;\n\ntype People = Serializer<\"people\">;\nexport const people: People = (name, prop) =>\n  `[${name}] ` + prop.people.map((person) => fromUser(person)).join(DELIMITER);\n\ntype PhoneNumber = Serializer<\"phone_number\">;\nexport const phoneNumber: PhoneNumber = (name, prop) =>\n  `[${name}] ${prop.phone_number ?? EMPTY_STR}`;\n\ntype Relation = Serializer<\"relation\">;\nexport const relation: Relation = (name, prop) =>\n  `[${name}] ` + prop.relation.map((item) => `${item.id}`).join(DELIMITER);\n\ntype RichText = Serializer<\"rich_text\">;\nexport const richText: RichText = (name, prop) =>\n  `[${name}] ${fromRichText(prop.rich_text)}`;\n\ntype Select = Serializer<\"select\">;\nexport const select: Select = (name, prop) =>\n  `[${name}] ${prop.select?.name ?? EMPTY_STR}`;\n\ntype Status = Serializer<\"status\">;\nexport const status: Status = (name, prop) =>\n  `[${name}] ${prop.status?.name ?? EMPTY_STR}`;\n\ntype Title = Serializer<\"title\">;\nexport const title: Title = (name, prop) =>\n  `[${name}] ${fromRichText(prop.title)}`;\n\ntype UniqueId = Serializer<\"unique_id\">;\nexport const uniqueId: UniqueId = (name, prop) => {\n  const prefix = prop.unique_id.prefix ?? \"\";\n  const _number = prop.unique_id.number ?? \"\";\n  const id = prefix + _number;\n  return `[${name}] ${id || EMPTY_STR}`;\n};\n\ntype Url = Serializer<\"url\">;\nexport const url: Url = (name, prop) => `[${name}] ${prop.url ?? EMPTY_STR}`;\n\ntype Verification = Serializer<\"verification\">;\nexport const verification: Verification = () => false;\n\ntype OmitFromUnion<T, U extends T> = T extends U ? never : T;\ntype RollupStrategy = {\n  [K in OmitFromUnion<NotionProperty[\"type\"], \"rollup\">]: Serializer<K>;\n};\nconst rollupStrategy: RollupStrategy = {\n  checkbox,\n  created_by: createdBy,\n  created_time: createdTime,\n  date,\n  email,\n  files,\n  formula,\n  last_edited_by: lastEditedBy,\n  last_edited_time: lastEditedTime,\n  multi_select: multiSelect,\n  number,\n  people,\n  phone_number: phoneNumber,\n  relation,\n  rich_text: richText,\n  select,\n  status,\n  title,\n  unique_id: uniqueId,\n  url,\n  verification,\n};\n\ntype Rollup = Serializer<\"rollup\">;\nexport const rollup: Rollup = (name, prop) => {\n  switch (prop.rollup.type) {\n    case \"number\":\n      return number(name, prop.rollup);\n    case \"date\":\n      return date(name, prop.rollup);\n    case \"array\":\n      return Promise.all(\n        prop.rollup.array.map((item) =>\n          rollupStrategy[item.type](name, item as any),\n        ),\n      ).then(\n        (items) =>\n          `[${name}] ` +\n          items\n            .map((item) => item as string)\n            .map((text) => text.replace(`[${name}] `, \"\"))\n            .join(DELIMITER),\n      );\n  }\n};\n\nexport const defaults = {\n  checkbox,\n  createdBy,\n  createdTime,\n  date,\n  email,\n  files,\n  formula,\n  lastEditedBy,\n  lastEditedTime,\n  multiSelect,\n  number,\n  people,\n  phoneNumber,\n  relation,\n  richText,\n  rollup,\n  select,\n  status,\n  title,\n  uniqueId,\n  url,\n  verification,\n};\n","import { defaults } from \"./defaults.js\";\nimport { Serializers } from \"./types.js\";\n\nexport const strategy: Serializers = {\n  checkbox: defaults.checkbox,\n  created_by: defaults.createdBy,\n  created_time: defaults.createdTime,\n  date: defaults.date,\n  email: defaults.email,\n  files: defaults.files,\n  formula: defaults.formula,\n  last_edited_by: defaults.lastEditedBy,\n  last_edited_time: defaults.lastEditedTime,\n  multi_select: defaults.multiSelect,\n  number: defaults.number,\n  people: defaults.people,\n  phone_number: defaults.phoneNumber,\n  relation: defaults.relation,\n  rich_text: defaults.richText,\n  rollup: defaults.rollup,\n  select: defaults.select,\n  status: defaults.status,\n  title: defaults.title,\n  unique_id: defaults.uniqueId,\n  url: defaults.url,\n  verification: defaults.verification,\n};\n","import { NotionProperties } from \"../../notion.types.js\";\nimport { defaults } from \"./defaults.js\";\nimport { strategy } from \"./strategy.js\";\nimport { Serializers } from \"./types.js\";\n\nexport default { defaults, strategy };\n\nexport const propertiesSerializer =\n  (serializers: Serializers) => (props: NotionProperties) =>\n    Promise.all(\n      Object.entries(props).map(([key, prop]) =>\n        serializers[prop.type](key, prop as any),\n      ),\n    ).then((texts) => texts.filter((text): text is string => text !== false));\n","import block from \"./block/index.js\";\nimport { Serializers as BlockSerializers } from \"./block/types.js\";\nimport property from \"./property/index.js\";\nimport { Serializers as PropertySerializers } from \"./property/types.js\";\nimport * as utils from \"./utils.js\";\n\nexport {\n  Serializer as BlockSerializer,\n  Serializers as BlockSerializers,\n} from \"./block/types.js\";\n\nexport {\n  Serializer as PropertySerializer,\n  Serializers as PropertySerializers,\n} from \"./property/types.js\";\n\nexport type Serializers = {\n  block: BlockSerializers;\n  property: PropertySerializers;\n};\n\nexport const serializer = { block, property, utils };\n","import { h1 } from \"md-utils-ts\";\nimport { Page, Pages } from \"./types.js\";\n\nconst nestHeading = (text: string) => (text.match(/^#+\\s/) ? \"#\" + text : text);\n\n/**\n * `pageToString` transforms a `Page` object into a string representation. It formats the metadata, properties, and lines\n * into a unified string, with the metadata as an H1 heading and the properties nested between triple-dashes.\n *\n * @param {Page} params - An object containing:\n *   - metadata: The metadata of the page which includes the title.\n *   - properties: An array of property strings.\n *   - lines: An array of line strings.\n *\n * @returns {string} A string representation of the provided page.\n */\nexport const pageToString = ({ metadata, properties, lines }: Page): string => {\n  const title = h1(metadata.title);\n  const data = [\"---\", properties.join(\"\\n\"), \"---\"].join(\"\\n\");\n  const body = lines.map(nestHeading);\n  return [title, data, ...body].join(\"\\n\");\n};\n\n/**\n * `pagesToString` transforms a `Pages` object (a record of page IDs to `Page` objects) into a record of strings.\n * Each page is transformed into its string representation using the `pageToString` function.\n *\n * @param {Pages} pages - A record of page IDs to `Page` objects.\n *\n * @returns {Record<string, string>} A record where each key is a page ID and each value is the string representation of the corresponding page.\n */\nexport const pagesToString = (pages: Pages): Record<string, string> =>\n  Object.fromEntries(\n    Object.entries(pages).map(([pageId, page]) => [pageId, pageToString(page)]),\n  );\n"],"mappings":"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","names":["collectPaginatedAPI","_indent","has","obj","key","md","utils_exports","__export","annotate","fromDate","fromLink","fromRichText","fromUser","md","annotate","text","annotations","fromRichText","richTextObject","plain_text","href","leadingSpaceMatch","trailingSpaceMatch","leading_space","trailing_space","annotatedText","linkedText","fromLink","linkObject","caption","fileName","fromUser","_user","_a","has","name","fromDate","date","audio","block","title","href","fromLink","bookmark","fromRichText","breadcrumb","bulletedListItem","callout","childPage","childDatabase","code","column","columnList","divider","embed","caption","equation","file","heading1","heading2","heading3","image","linkPreview","linkToPage","numberedListItem","paragraph","pdf","quote","syncedBlock","table","tableOfContents","tableRow","row","template","toDo","toggle","unsupported","video","defaults","strategy","defaults","block_default","defaults","strategy","anchor","DELIMITER","EMPTY_STR","checkbox","name","prop","createdBy","fromUser","createdTime","date","fromDate","email","_a","files","file","href","has","anchor","formula","_b","lastEditedBy","lastEditedTime","multiSelect","select","number","people","person","phoneNumber","relation","item","richText","fromRichText","status","title","uniqueId","prefix","_number","id","url","verification","rollupStrategy","rollup","items","text","defaults","strategy","defaults","property_default","defaults","strategy","propertiesSerializer","serializers","props","key","prop","texts","text","serializer","block_default","property_default","utils_exports","fetchNotionBlocks","client","blockId","collectPaginatedAPI","err","fetchNotionPage","pageId","fetchNotionDatabase","databaseId","results","blockIs","block","type","initPage","page","title","parentId","properties","IGNORE_NEST_LIST","indent","_indent","walking","serializers","parent","blocks","pages","depth","_a","walk","has","serializeBlock","text","line","_pages","_parent","_blocks","dbCrawler","_depth","extractPageTitle","prop","serializer","mergeSerializers","crawler","rootPageId","notionPage","_serializers","props","propertiesSerializer","rootPage","options","crawl","records","context","record","h1","nestHeading","text","pageToString","metadata","properties","lines","title","data","body","pagesToString","pages","pageId","page"]}