"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const document_manager_1 = __importDefault(require("./document_manager"));
const utils_1 = require("./utils");
const memory_manager_1 = __importDefault(require("./memory_manager"));
const message_manager_1 = __importDefault(require("./message_manager"));
const user_manager_1 = __importDefault(require("./user_manager"));
/**
 * ZepClient is a Typescript class for interacting with the Zep.
 */
class ZepClient {
    /**
     * Constructs a new ZepClient instance.
     * @param {string} [projectApiKey] - The project API key to use for authentication.
     * @param {string} baseURL - Optional. The base URL of the Zep API.
     */
    constructor(projectApiKey, baseURL) {
        this.baseURL = "https://api.getzep.com";
        this.cloud = false;
        if (!ZepClient.constructing) {
            (0, utils_1.warnDeprecation)("Please use ZepClient.init(). Calling the ZepClient constructor directly is deprecated.");
        }
        if (!projectApiKey && !baseURL) {
            throw new Error("You need to provide either a projectApiKey (if using cloud) or a baseURL (if using open source) to initialize the ZepClient.");
        }
        if (projectApiKey && !baseURL) {
            if (!projectApiKey.startsWith("z_")) {
                throw new Error("Invalid projectApiKey. Project API keys should start with 'z_'.");
            }
        }
        if (baseURL) {
            this.baseURL = baseURL;
        }
        this.projectApiKey = projectApiKey;
        if (projectApiKey === null || projectApiKey === void 0 ? void 0 : projectApiKey.startsWith("z_")) {
            this.cloud = true;
        }
        if (this.cloud) {
            this.headers = {
                Authorization: `Api-Key ${projectApiKey}`,
            };
        }
        else if (!this.cloud && projectApiKey) {
            this.headers = {
                Authorization: `Bearer ${projectApiKey}`,
            };
        }
        this.memory = new memory_manager_1.default(this);
        this.message = new message_manager_1.default(this);
        this.document = new document_manager_1.default(this);
        this.user = new user_manager_1.default(this);
    }
    /**
     * Asynchronously initializes a new instance of the ZepClient class.
     *
     * @param {string} [projectApiKey] Optional. The project API key to use for authentication.
     * @param {string} [baseUrl] Optional. The base URL of the Zep API. Only user for open source
     * @returns {Promise<ZepClient>} A promise that resolves to a new ZepClient instance.
     * @throws {Error} Throws an error if the server is not running.
     */
    static init(projectApiKey, baseUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            ZepClient.constructing = true;
            const client = new ZepClient(projectApiKey, baseUrl);
            ZepClient.constructing = false;
            const isRunning = yield client.checkServer();
            if (!isRunning) {
                throw new Error(utils_1.SERVER_ERROR_MESSAGE);
            }
            return client;
        });
    }
    /**
     * Constructs the full URL for an API endpoint.
     * @param {string} endpoint - The endpoint of the API.
     * @returns {string} The full URL.
     */
    getFullUrl(endpoint) {
        const url = new URL(this.baseURL);
        url.pathname = (0, utils_1.joinPaths)(utils_1.API_BASEPATH, `/${utils_1.API_VERSION}`, endpoint);
        return url.toString();
    }
    checkServer() {
        return __awaiter(this, void 0, void 0, function* () {
            const healthCheck = "/healthz";
            const healthCheckURL = `${this.baseURL}${healthCheck}`;
            const response = yield fetch(healthCheckURL, { headers: this.headers });
            const zepServerVersion = response.headers.get("X-Zep-Version");
            if (!(0, utils_1.isVersionGreaterOrEqual)(zepServerVersion) && !this.projectApiKey) {
                console.warn(utils_1.MIN_SERVER_WARNING_MESSAGE);
            }
            return response.status === 200;
        });
    }
}
ZepClient.constructing = false;
exports.default = ZepClient;
