import { IMessage, Message } from "./message_models";
/**
 * Interface for Session data.
 */
export interface ISession {
    uuid?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
    session_id: string;
    metadata: Record<string, any>;
    user_id?: string;
}
/**
 * Represents a session object with a unique identifier, metadata, and other attributes.
 */
export declare class Session {
    uuid?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
    session_id: string;
    metadata: Record<string, any>;
    user_id?: string;
    /**
     * Constructs a new Session instance.
     * @param {ISession} data - The data to create a Session instance.
     */
    constructor(data: ISession);
    /**
     * Converts the Session instance to a dictionary.
     * @returns {ISession} A dictionary representation of Session instance.
     */
    toDict(): ISession;
}
/**
 * ISummary interface for providing input to create a Summary instance.
 */
export interface ISummary {
    uuid: string;
    created_at: string;
    content: string;
    metadata?: Record<string, any>;
    recent_message_uuid: string;
    token_count: number;
}
/**
 * Represents a summary of a memory.
 */
export declare class Summary {
    uuid: string;
    created_at: string;
    content: string;
    metadata?: Record<string, any>;
    recent_message_uuid: string;
    token_count: number;
    /**
     * Constructs a new Summary instance.
     * @param {ISummary} data - The data to create a summary instance.
     */
    constructor(data: ISummary);
    /**
     * Converts the Summary instance to a dictionary.
     * @returns {ISummary} A dictionary representation of Summary instance.
     */
    toDict(): ISummary;
}
/**
 * IMemory interface for providing input to create a Memory instance.
 */
export interface IMemory {
    messages?: IMessage[];
    metadata?: Record<string, any>;
    summary?: ISummary;
    facts?: string[];
    uuid?: string;
    created_at?: string;
    token_count?: number;
}
/**
 * Represents a memory containing messages, metadata, and a summary.
 */
export declare class Memory {
    messages: Message[];
    metadata: Record<string, any>;
    summary?: Summary;
    facts: string[];
    uuid?: string;
    created_at?: string;
    token_count?: number;
    /**
     * Constructs a new Memory instance.
     * @param {IMemory} data - The data to create a memory instance.
     */
    constructor(data?: IMemory);
    /**
     * Converts the Memory instance to a dictionary.
     * @returns {IMemory} A dictionary representation of the Memory instance.
     */
    toDict(): IMemory;
}
/**
 * SearchPayloadData interface for providing input to create SearchPayload.
 */
export interface IMemorySearchPayload {
    text?: string;
    metadata?: Record<string, any>;
    search_scope?: "messages" | "summary";
    search_type?: "similarity" | "mmr";
    mmr_lambda?: number;
}
/**
 * Represents the payload for a memory search.
 *
 * @property {string} text - The text to search for.
 * @property {Record<string, any>} metadata - The metadata to filter the search by.
 * @property {string} search_type - The type of search to perform. Either "similarity" or "mmr".
 * @property {number} mmr_lambda - The lambda value to use for MMR reranking.
 */
export declare class MemorySearchPayload {
    metadata?: Record<string, any>;
    text?: string;
    search_scope?: "messages" | "summary";
    search_type?: "similarity" | "mmr";
    mmr_lambda?: number;
    /**
     * Constructs a new SearchPayload instance.
     * @param {IMemorySearchPayload} data - The data to create a Search Payload.
     */
    constructor(data: IMemorySearchPayload);
}
/**
 * SearchResultData interface for providing input to create a SearchResult.
 */
export interface IMemorySearchResult {
    message?: IMessage;
    summary?: Summary;
    metadata?: Record<string, any>;
    score?: number;
}
/**
 * Represents a search result from a memory search.
 */
export declare class MemorySearchResult {
    message?: Message;
    summary?: Summary;
    metadata: Record<string, any>;
    score?: number;
    /**
     * Constructs a new SearchResult instance.
     * @param {IMemorySearchResult} data - The data to create a search result instance.
     *
     * @property {Message} message - The message that was found.
     * @property {Summary} summary - The summary that was found.
     * @property {Record<string, any>} metadata - The metadata of the result, if any.
     * @property {string} summary - The summary of the message.
     * @property {number} score - The score of the result.
     */
    constructor(data?: IMemorySearchResult);
}
export interface Question {
    question: string;
}
export interface ClassifySessionRequest {
    /** Unique identifier of the session */
    sessionId: string;
    /** Name of the classifier (e.g. "emotion" or "intent") */
    name: string;
    /** List of classes to classify the session into */
    classes: string[];
    /** Number of session messages to consider for classification (default is 4) */
    lastN?: number;
    /** Whether to persist the classification to session metadata (default is true) */
    persist?: boolean;
    /** Custom instruction for classification */
    instruction?: string;
}
/** Response after classifying a session */
export interface ClassifySessionResponse {
    /** Name of the classification algorithm or rule set used */
    name: string;
    /** Class the session is classified into */
    class: string;
}
