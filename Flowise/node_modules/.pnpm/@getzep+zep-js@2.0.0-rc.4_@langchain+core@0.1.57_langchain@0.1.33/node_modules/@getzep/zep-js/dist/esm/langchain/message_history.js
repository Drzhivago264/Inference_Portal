/* eslint import/no-extraneous-dependencies: 0 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AIMessage, HumanMessage, SystemMessage, } from "@langchain/core/messages";
import { BaseChatMessageHistory } from "@langchain/core/chat_history";
import { Memory } from "../memory_models";
import { NotFoundError } from "../errors";
import { getZepMessageRoleType, Message } from "../message_models";
/**
 * Class used to manage the memory of a chat session, including loading
 * and saving the chat history, and clearing the memory when needed. It
 * uses the ZepClient to interact with the Zep service for managing the
 * chat session's memory.
 *
 */
export class ZepChatMessageHistory extends BaseChatMessageHistory {
    constructor(fields) {
        super();
        this.lc_namespace = [];
        this.humanPrefix = "human";
        this.aiPrefix = "ai";
        this.sessionId = fields.sessionId;
        this.memoryType = fields.memoryType;
        this.client = fields.client;
        if (fields.humanPrefix) {
            this.humanPrefix = fields.humanPrefix;
        }
        if (fields.aiPrefix) {
            this.aiPrefix = fields.aiPrefix;
        }
    }
    getMemory() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.client.memory.getMemory(this.sessionId, this.memoryType);
            }
            catch (error) {
                if (error instanceof NotFoundError) {
                    console.warn(`Session ${this.sessionId} not found in Zep. Returning None`);
                }
                else {
                    console.error("Error getting memory: ", error);
                }
                return null;
            }
        });
    }
    getMessages() {
        return __awaiter(this, void 0, void 0, function* () {
            const memory = yield this.getMemory();
            if (!memory) {
                return [];
            }
            const messages = [];
            // Extract facts
            messages.push(new SystemMessage(memory.facts.join("\n")));
            // Extract summary, if present, and messages
            if (memory.summary && memory.summary.content.length > 0) {
                messages.push(new SystemMessage(memory.summary.content));
            }
            if (memory.messages) {
                messages.push(...memory.messages.map((msg) => {
                    const metadata = {
                        uuid: msg.uuid,
                        created_at: msg.created_at,
                        token_count: msg.token_count,
                        metadata: msg.metadata,
                    };
                    if (msg.role_type === "assistant") {
                        return new AIMessage(msg.content, metadata);
                    }
                    return new HumanMessage(msg.content, metadata);
                }));
            }
            return messages;
        });
    }
    addAIChatMessage(message, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.addMessage(new AIMessage({ content: message }), metadata);
        });
    }
    addMessage(message, metadata) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const messageToSave = message;
            if (message._getType() === "ai") {
                messageToSave.name = this.aiPrefix;
            }
            else if (message._getType() === "human") {
                messageToSave.name = this.humanPrefix;
            }
            if (message.content === null) {
                throw new Error("Message content cannot be null");
            }
            if (Array.isArray(message.content)) {
                throw new Error("Message content cannot be a list");
            }
            const zepMessage = new Message({
                content: message.content,
                role: (_a = message.name) !== null && _a !== void 0 ? _a : message._getType(),
                role_type: getZepMessageRoleType(message._getType()),
                metadata,
            });
            const zepMemory = new Memory({ messages: [zepMessage] });
            yield this.client.memory.addMemory(this.sessionId, zepMemory);
        });
    }
    addUserMessage(message, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.addMessage(new HumanMessage({ content: message }, metadata));
        });
    }
    clear() {
        console.warn("Clearing memory", this.sessionId);
        return Promise.resolve(undefined);
    }
}
