var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Message } from "./message_models";
import { handleRequest } from "./utils";
export default class MessageManager {
    constructor(client) {
        this.client = client;
    }
    getSessionMessages(sessionId, limit, cursor) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!sessionId || sessionId.trim() === "") {
                throw new Error("sessionId must be provided");
            }
            let url = this.client.getFullUrl(`/sessions/${sessionId}/messages`);
            const params = new URLSearchParams();
            if (limit)
                params.append("limit", limit.toString());
            if (cursor)
                params.append("cursor", cursor.toString());
            if (params.toString())
                url += `?${params.toString()}`;
            const response = yield handleRequest(fetch(url, {
                method: "GET",
                headers: Object.assign(Object.assign({}, this.client.headers), { "Content-Type": "application/json" }),
            }), `No session found for session ${sessionId}`);
            const responseData = yield response.json();
            return responseData.messages.map((message) => new Message(message));
        });
    }
    getSessionMessage(sessionId, messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!sessionId || sessionId.trim() === "") {
                throw new Error("sessionId must be provided");
            }
            if (!messageId || messageId.trim() === "") {
                throw new Error("messageId must be provided");
            }
            const response = yield handleRequest(fetch(this.client.getFullUrl(`/sessions/${sessionId}/messages/${messageId}`), {
                headers: this.client.headers,
            }), `No session found for session ${sessionId}, or message ${messageId}`);
            const responseData = yield response.json();
            return new Message(responseData);
        });
    }
    updateSessionMessageMetadata(sessionId, messageId, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!sessionId || sessionId.trim() === "") {
                throw new Error("sessionId must be provided");
            }
            if (!messageId || messageId.trim() === "") {
                throw new Error("messageId must be provided");
            }
            const response = yield handleRequest(fetch(this.client.getFullUrl(`/sessions/${sessionId}/messages/${messageId}`), {
                method: "PATCH",
                headers: this.client.headers,
                body: JSON.stringify({
                    metadata,
                }),
            }), `No session found for session ${sessionId}, or message ${messageId}`);
            const responseData = yield response.json();
            return new Message(responseData);
        });
    }
}
