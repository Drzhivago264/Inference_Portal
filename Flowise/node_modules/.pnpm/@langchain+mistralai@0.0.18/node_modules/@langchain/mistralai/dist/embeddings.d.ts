import { Embeddings, type EmbeddingsParams } from "@langchain/core/embeddings";
/**
 * Interface for MistralAIEmbeddings parameters. Extends EmbeddingsParams and
 * defines additional parameters specific to the MistralAIEmbeddings class.
 */
export interface MistralAIEmbeddingsParams extends EmbeddingsParams {
    /**
     * The API key to use.
     * @default {process.env.MISTRAL_API_KEY}
     */
    apiKey?: string;
    /**
     * The name of the model to use.
     * Alias for `model`.
     * @default {"mistral-embed"}
     */
    modelName?: string;
    /**
     * The name of the model to use.
     * @default {"mistral-embed"}
     */
    model?: string;
    /**
     * The format of the output data.
     * @default {"float"}
     */
    encodingFormat?: string;
    /**
     * Override the default endpoint.
     */
    endpoint?: string;
    /**
     * The maximum number of documents to embed in a single request.
     * @default {512}
     */
    batchSize?: number;
    /**
     * Whether to strip new lines from the input text. This is recommended,
     * but may not be suitable for all use cases.
     * @default {true}
     */
    stripNewLines?: boolean;
}
/**
 * Class for generating embeddings using the MistralAI API.
 */
export declare class MistralAIEmbeddings extends Embeddings implements MistralAIEmbeddingsParams {
    modelName: string;
    model: string;
    encodingFormat: string;
    batchSize: number;
    stripNewLines: boolean;
    apiKey: string;
    endpoint?: string;
    constructor(fields?: Partial<MistralAIEmbeddingsParams>);
    /**
     * Method to generate embeddings for an array of documents. Splits the
     * documents into batches and makes requests to the MistralAI API to generate
     * embeddings.
     * @param {Array<string>} texts Array of documents to generate embeddings for.
     * @returns {Promise<number[][]>} Promise that resolves to a 2D array of embeddings for each document.
     */
    embedDocuments(texts: string[]): Promise<number[][]>;
    /**
     * Method to generate an embedding for a single document. Calls the
     * embeddingWithRetry method with the document as the input.
     * @param {string} text Document to generate an embedding for.
     * @returns {Promise<number[]>} Promise that resolves to an embedding for the document.
     */
    embedQuery(text: string): Promise<number[]>;
    /**
     * Private method to make a request to the MistralAI API to generate
     * embeddings. Handles the retry logic and returns the response from the
     * API.
     * @param {string | Array<string>} input Text to send to the MistralAI API.
     * @returns {Promise<MistralAIEmbeddingsResult>} Promise that resolves to the response from the API.
     */
    private embeddingWithRetry;
    /** @ignore */
    private imports;
}
