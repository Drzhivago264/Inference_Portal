import { ReadableJsonStream } from "./utils/stream.js";
export class GoogleAbstractedFetchClient {
    async _request(url, opts, additionalHeaders) {
        if (url == null)
            throw new Error("Missing URL");
        const fetchOptions = {
            method: opts.method,
            headers: {
                "Content-Type": "application/json",
                ...(opts.headers ?? {}),
                ...(additionalHeaders ?? {}),
            },
        };
        if (opts.data !== undefined) {
            fetchOptions.body = JSON.stringify(opts.data);
        }
        const res = await fetch(url, fetchOptions);
        if (!res.ok) {
            const resText = await res.text();
            const error = new Error(`Google request failed with status code ${res.status}: ${resText}`);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            error.response = res;
            throw error;
        }
        return {
            data: opts.responseType === "json"
                ? await res.json()
                : new ReadableJsonStream(res.body),
            config: {},
            status: res.status,
            statusText: res.statusText,
            headers: res.headers,
            request: { responseURL: res.url },
        };
    }
}
export class ApiKeyGoogleAuth extends GoogleAbstractedFetchClient {
    constructor(apiKey) {
        super();
        Object.defineProperty(this, "apiKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.apiKey = apiKey;
    }
    get clientType() {
        return "apiKey";
    }
    getProjectId() {
        throw new Error("APIs that require a project ID cannot use an API key");
        // Perhaps we could implement this if needed:
        // https://cloud.google.com/docs/authentication/api-keys#get-info
    }
    request(opts) {
        const authHeader = {
            "X-Goog-Api-Key": this.apiKey,
        };
        return this._request(opts.url, opts, authHeader);
    }
}
export function aiPlatformScope(platform) {
    switch (platform) {
        case "gai":
            return ["https://www.googleapis.com/auth/generative-language"];
        default:
            return ["https://www.googleapis.com/auth/cloud-platform"];
    }
}
export function ensureAuthOptionScopes(authOption, scopeProperty, scopesOrPlatform) {
    // If the property is already set, return it
    if (authOption && Object.hasOwn(authOption, scopeProperty)) {
        return authOption;
    }
    // Otherwise add it
    const scopes = Array.isArray(scopesOrPlatform)
        ? scopesOrPlatform
        : aiPlatformScope(scopesOrPlatform ?? "gcp");
    return {
        [scopeProperty]: scopes,
        ...(authOption ?? {}),
    };
}
