import { BaseLanguageModelCallOptions } from "@langchain/core/language_models/base";
import { AsyncCaller, AsyncCallerCallOptions } from "@langchain/core/utils/async_caller";
import { StructuredToolInterface } from "@langchain/core/tools";
import type { GoogleAIBaseLLMInput, GoogleConnectionParams, GoogleLLMModelFamily, GooglePlatformType, GoogleResponse, GoogleLLMResponse, GeminiContent, GeminiGenerationConfig, GeminiRequest, GeminiSafetySetting, GeminiTool, GeminiFunctionDeclaration, GoogleAIModelRequestParams } from "./types.js";
import { GoogleAbstractedClient, GoogleAbstractedClientOpsMethod } from "./auth.js";
export declare abstract class GoogleConnection<CallOptions extends AsyncCallerCallOptions, ResponseType extends GoogleResponse> {
    caller: AsyncCaller;
    client: GoogleAbstractedClient;
    streaming: boolean;
    constructor(caller: AsyncCaller, client: GoogleAbstractedClient, streaming?: boolean);
    abstract buildUrl(): Promise<string>;
    abstract buildMethod(): GoogleAbstractedClientOpsMethod;
    _clientInfoHeaders(): Promise<Record<string, string>>;
    _clientLibraryVersion(): Promise<string>;
    _moduleName(): Promise<string>;
    _request(data: unknown | undefined, options: CallOptions): Promise<ResponseType>;
}
export declare abstract class GoogleHostConnection<CallOptions extends AsyncCallerCallOptions, ResponseType extends GoogleResponse, AuthOptions> extends GoogleConnection<CallOptions, ResponseType> implements GoogleConnectionParams<AuthOptions> {
    platformType: GooglePlatformType | undefined;
    endpoint: string;
    location: string;
    apiVersion: string;
    constructor(fields: GoogleConnectionParams<AuthOptions> | undefined, caller: AsyncCaller, client: GoogleAbstractedClient, streaming?: boolean);
    get platform(): GooglePlatformType;
    get computedPlatformType(): GooglePlatformType;
    buildMethod(): GoogleAbstractedClientOpsMethod;
}
export declare abstract class GoogleAIConnection<CallOptions extends BaseLanguageModelCallOptions, MessageType, AuthOptions> extends GoogleHostConnection<CallOptions, GoogleLLMResponse, AuthOptions> implements GoogleAIBaseLLMInput<AuthOptions> {
    model: string;
    modelName: string;
    client: GoogleAbstractedClient;
    constructor(fields: GoogleAIBaseLLMInput<AuthOptions> | undefined, caller: AsyncCaller, client: GoogleAbstractedClient, streaming?: boolean);
    get modelFamily(): GoogleLLMModelFamily;
    get computedPlatformType(): GooglePlatformType;
    abstract buildUrlMethod(): Promise<string>;
    buildUrlGenerativeLanguage(): Promise<string>;
    buildUrlVertex(): Promise<string>;
    buildUrl(): Promise<string>;
    abstract formatData(input: MessageType, parameters: GoogleAIModelRequestParams): unknown;
    request(input: MessageType, parameters: GoogleAIModelRequestParams, options: CallOptions): Promise<GoogleLLMResponse>;
}
export declare abstract class AbstractGoogleLLMConnection<MessageType, AuthOptions> extends GoogleAIConnection<BaseLanguageModelCallOptions, MessageType, AuthOptions> {
    buildUrlMethodGemini(): Promise<string>;
    buildUrlMethod(): Promise<string>;
    abstract formatContents(input: MessageType, parameters: GoogleAIModelRequestParams): GeminiContent[];
    formatGenerationConfig(_input: MessageType, parameters: GoogleAIModelRequestParams): GeminiGenerationConfig;
    formatSafetySettings(_input: MessageType, parameters: GoogleAIModelRequestParams): GeminiSafetySetting[];
    isStructuredToolArray(tools?: unknown[]): tools is StructuredToolInterface[];
    structuredToolToFunctionDeclaration(tool: StructuredToolInterface): GeminiFunctionDeclaration;
    structuredToolsToGeminiTools(tools: StructuredToolInterface[]): GeminiTool[];
    formatTools(_input: MessageType, parameters: GoogleAIModelRequestParams): GeminiTool[];
    formatData(input: MessageType, parameters: GoogleAIModelRequestParams): GeminiRequest;
}
