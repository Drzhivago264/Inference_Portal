import { AIMessageFields, BaseMessage, BaseMessageChunk, BaseMessageFields, MessageContent } from "@langchain/core/messages";
import { ChatGeneration, ChatGenerationChunk, ChatResult, Generation } from "@langchain/core/outputs";
import type { GoogleLLMResponse, GoogleAIModelParams, GeminiPart, GeminiContent, GenerateContentResponseData, GoogleAISafetyHandler } from "../types.js";
export declare function messageContentToParts(content: MessageContent): GeminiPart[];
export declare function baseMessageToContent(message: BaseMessage, prevMessage?: BaseMessage): GeminiContent[];
export declare function partsToMessageContent(parts: GeminiPart[]): MessageContent;
interface FunctionCall {
    name: string;
    arguments: string;
}
interface ToolCall {
    id: string;
    type: "function";
    function: FunctionCall;
}
interface FunctionCallRaw {
    name: string;
    arguments: object;
}
interface ToolCallRaw {
    id: string;
    type: "function";
    function: FunctionCallRaw;
}
export declare function partsToToolsRaw(parts: GeminiPart[]): ToolCallRaw[];
export declare function toolsRawToTools(raws: ToolCallRaw[]): ToolCall[];
export declare function responseToGenerateContentResponseData(response: GoogleLLMResponse): GenerateContentResponseData;
export declare function responseToParts(response: GoogleLLMResponse): GeminiPart[];
export declare function partToText(part: GeminiPart): string;
export declare function responseToString(response: GoogleLLMResponse): string;
export declare function safeResponseToString(response: GoogleLLMResponse, safetyHandler: GoogleAISafetyHandler): string;
export declare function responseToGeneration(response: GoogleLLMResponse): Generation;
export declare function safeResponseToGeneration(response: GoogleLLMResponse, safetyHandler: GoogleAISafetyHandler): Generation;
export declare function responseToChatGeneration(response: GoogleLLMResponse): ChatGenerationChunk;
export declare function safeResponseToChatGeneration(response: GoogleLLMResponse, safetyHandler: GoogleAISafetyHandler): ChatGenerationChunk;
export declare function chunkToString(chunk: BaseMessageChunk): string;
export declare function partToMessageChunk(part: GeminiPart): BaseMessageChunk;
export declare function partToChatGeneration(part: GeminiPart): ChatGeneration;
export declare function responseToChatGenerations(response: GoogleLLMResponse): ChatGeneration[];
export declare function responseToBaseMessageFields(response: GoogleLLMResponse): BaseMessageFields;
export declare function partsToBaseMessageFields(parts: GeminiPart[]): AIMessageFields;
export declare function responseToBaseMessage(response: GoogleLLMResponse): BaseMessage;
export declare function safeResponseToBaseMessage(response: GoogleLLMResponse, safetyHandler: GoogleAISafetyHandler): BaseMessage;
export declare function responseToChatResult(response: GoogleLLMResponse): ChatResult;
export declare function safeResponseToChatResult(response: GoogleLLMResponse, safetyHandler: GoogleAISafetyHandler): ChatResult;
export declare function validateGeminiParams(params: GoogleAIModelParams): void;
export declare function isModelGemini(modelName: string): boolean;
export interface DefaultGeminiSafetySettings {
    errorFinish?: string[];
}
export declare class DefaultGeminiSafetyHandler implements GoogleAISafetyHandler {
    errorFinish: string[];
    constructor(settings?: DefaultGeminiSafetySettings);
    handleDataPromptFeedback(response: GoogleLLMResponse, data: GenerateContentResponseData): GenerateContentResponseData;
    handleDataFinishReason(response: GoogleLLMResponse, data: GenerateContentResponseData): GenerateContentResponseData;
    handleData(response: GoogleLLMResponse, data: GenerateContentResponseData): GenerateContentResponseData;
    handle(response: GoogleLLMResponse): GoogleLLMResponse;
}
export interface MessageGeminiSafetySettings extends DefaultGeminiSafetySettings {
    msg?: string;
    forceNewMessage?: boolean;
}
export declare class MessageGeminiSafetyHandler extends DefaultGeminiSafetyHandler {
    msg: string;
    forceNewMessage: boolean;
    constructor(settings?: MessageGeminiSafetySettings);
    setMessage(data: GenerateContentResponseData): GenerateContentResponseData;
    handleData(response: GoogleLLMResponse, data: GenerateContentResponseData): GenerateContentResponseData;
}
export {};
