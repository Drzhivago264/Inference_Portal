"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyAndValidateModelParamsInto = exports.validateModelParams = exports.modelToFamily = exports.copyAIModelParamsInto = exports.copyAIModelParams = void 0;
const gemini_js_1 = require("./gemini.cjs");
function copyAIModelParams(params, options) {
    return copyAIModelParamsInto(params, options, {});
}
exports.copyAIModelParams = copyAIModelParams;
function copyAIModelParamsInto(params, options, target) {
    const ret = target || {};
    const model = options?.model ?? params?.model ?? target.model;
    ret.modelName =
        model ?? options?.modelName ?? params?.modelName ?? target.modelName;
    ret.model = model;
    ret.temperature =
        options?.temperature ?? params?.temperature ?? target.temperature;
    ret.maxOutputTokens =
        options?.maxOutputTokens ??
            params?.maxOutputTokens ??
            target.maxOutputTokens;
    ret.topP = options?.topP ?? params?.topP ?? target.topP;
    ret.topK = options?.topK ?? params?.topK ?? target.topK;
    ret.stopSequences =
        options?.stopSequences ?? params?.stopSequences ?? target.stopSequences;
    ret.safetySettings =
        options?.safetySettings ?? params?.safetySettings ?? target.safetySettings;
    ret.tools = options?.tools;
    // Ensure tools are formatted properly for Gemini
    const geminiTools = options?.tools
        ?.map((tool) => {
        if ("function" in tool &&
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            "parameters" in tool.function) {
            // Tool is in OpenAI format. Convert to Gemini then return.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const castTool = tool.function;
            const cleanedParameters = castTool.parameters;
            if ("$schema" in cleanedParameters) {
                delete cleanedParameters.$schema;
            }
            if ("additionalProperties" in cleanedParameters) {
                delete cleanedParameters.additionalProperties;
            }
            const toolInGeminiFormat = {
                functionDeclarations: [
                    {
                        name: castTool.name,
                        description: castTool.description,
                        parameters: cleanedParameters,
                    },
                ],
            };
            return toolInGeminiFormat;
        }
        else if ("functionDeclarations" in tool) {
            return tool;
        }
        else {
            return null;
        }
    })
        .filter((tool) => tool !== null);
    const structuredOutputTools = options?.tools
        ?.map((tool) => {
        if ("lc_namespace" in tool) {
            return tool;
        }
        else {
            return null;
        }
    })
        .filter((tool) => tool !== null);
    if (structuredOutputTools &&
        structuredOutputTools.length > 0 &&
        geminiTools &&
        geminiTools.length > 0) {
        throw new Error(`Cannot mix structured tools with Gemini tools.\nReceived ${structuredOutputTools.length} structured tools and ${geminiTools.length} Gemini tools.`);
    }
    ret.tools = geminiTools ?? structuredOutputTools;
    return ret;
}
exports.copyAIModelParamsInto = copyAIModelParamsInto;
function modelToFamily(modelName) {
    if (!modelName) {
        return null;
    }
    else if ((0, gemini_js_1.isModelGemini)(modelName)) {
        return "gemini";
    }
    else {
        return null;
    }
}
exports.modelToFamily = modelToFamily;
function validateModelParams(params) {
    const testParams = params ?? {};
    const model = testParams.model ?? testParams.modelName;
    switch (modelToFamily(model)) {
        case "gemini":
            return (0, gemini_js_1.validateGeminiParams)(testParams);
        default:
            throw new Error(`Unable to verify model params: ${JSON.stringify(params)}`);
    }
}
exports.validateModelParams = validateModelParams;
function copyAndValidateModelParamsInto(params, target) {
    copyAIModelParamsInto(params, undefined, target);
    validateModelParams(target);
    return target;
}
exports.copyAndValidateModelParamsInto = copyAndValidateModelParamsInto;
