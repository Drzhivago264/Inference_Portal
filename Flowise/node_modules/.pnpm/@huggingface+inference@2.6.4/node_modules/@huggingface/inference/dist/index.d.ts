export interface Options {
	/**
	 * (Default: true) Boolean. If a request 503s and wait_for_model is set to false, the request will be retried with the same parameters but with wait_for_model set to true.
	 */
	retry_on_error?: boolean;
	/**
	 * (Default: true). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query.
	 */
	use_cache?: boolean;
	/**
	 * (Default: false). Boolean. Do not load the model if it's not already available.
	 */
	dont_load_model?: boolean;
	/**
	 * (Default: false). Boolean to use GPU instead of CPU for inference (requires Startup plan at least).
	 */
	use_gpu?: boolean;

	/**
	 * (Default: false) Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places.
	 */
	wait_for_model?: boolean;
	/**
	 * Custom fetch function to use instead of the default one, for example to use a proxy or edit headers.
	 */
	fetch?: typeof fetch;
	/**
	 * Abort Controller signal to use for request interruption.
	 */
	signal?: AbortSignal;

	/**
	 * (Default: "same-origin"). String | Boolean. Credentials to use for the request. If this is a string, it will be passed straight on. If it's a boolean, true will be "include" and false will not send credentials at all.
	 */
	includeCredentials?: string | boolean;
}

export type InferenceTask =
	| "audio-classification"
	| "audio-to-audio"
	| "automatic-speech-recognition"
	| "conversational"
	| "depth-estimation"
	| "document-question-answering"
	| "feature-extraction"
	| "fill-mask"
	| "image-classification"
	| "image-segmentation"
	| "image-to-image"
	| "image-to-text"
	| "object-detection"
	| "video-classification"
	| "question-answering"
	| "reinforcement-learning"
	| "sentence-similarity"
	| "summarization"
	| "table-question-answering"
	| "tabular-classification"
	| "tabular-regression"
	| "text-classification"
	| "text-generation"
	| "text-to-image"
	| "text-to-speech"
	| "text-to-video"
	| "token-classification"
	| "translation"
	| "unconditional-image-generation"
	| "visual-question-answering"
	| "zero-shot-classification"
	| "zero-shot-image-classification";

export interface BaseArgs {
	/**
	 * The access token to use. Without it, you'll get rate-limited quickly.
	 *
	 * Can be created for free in hf.co/settings/token
	 */
	accessToken?: string;
	/**
	 * The model to use. Can be a full URL for HF inference endpoints.
	 *
	 * If not specified, will call huggingface.co/api/tasks to get the default model for the task.
	 */
	model?: string;
}

export type RequestArgs = BaseArgs &
	({ data: Blob | ArrayBuffer } | { inputs: unknown }) & {
		parameters?: Record<string, unknown>;
		accessToken?: string;
	};

export class InferenceOutputError extends TypeError {}
export type AudioClassificationArgs = BaseArgs & {
	/**
	 * Binary audio data
	 */
	data: Blob | ArrayBuffer;
};
export type AudioClassificationReturn = AudioClassificationOutputValue[];
export interface AudioClassificationOutputValue {
	/**
	 * The label for the class (model specific)
	 */
	label: string;

	/**
	 * A float that represents how likely it is that the audio file belongs to this class.
	 */
	score: number;
}
/**
 * This task reads some audio input and outputs the likelihood of classes.
 * Recommended model:  superb/hubert-large-superb-er
 */
export function audioClassification(
	args: AudioClassificationArgs,
	options?: Options
): Promise<AudioClassificationReturn>;
export type AudioToAudioArgs = BaseArgs & {
	/**
	 * Binary audio data
	 */
	data: Blob | ArrayBuffer;
};
export type AudioToAudioReturn = AudioToAudioOutputValue[];
export interface AudioToAudioOutputValue {
	/**
	 * The label for the audio output (model specific)
	 */
	label: string;

	/**
	 * Base64 encoded audio output.
	 */
	blob: string;

	/**
	 * Content-type for blob, e.g. audio/flac
	 */
	"content-type": string;
}
/**
 * This task reads some audio input and outputs one or multiple audio files.
 * Example model: speechbrain/sepformer-wham does audio source separation.
 */
export function audioToAudio(args: AudioToAudioArgs, options?: Options): Promise<AudioToAudioReturn>;
export type AutomaticSpeechRecognitionArgs = BaseArgs & {
	/**
	 * Binary audio data
	 */
	data: Blob | ArrayBuffer;
};
export interface AutomaticSpeechRecognitionOutput {
	/**
	 * The text that was recognized from the audio
	 */
	text: string;
}
/**
 * This task reads some audio input and outputs the said words within the audio files.
 * Recommended model (english language): facebook/wav2vec2-large-960h-lv60-self
 */
export function automaticSpeechRecognition(
	args: AutomaticSpeechRecognitionArgs,
	options?: Options
): Promise<AutomaticSpeechRecognitionOutput>;
export type TextToSpeechArgs = BaseArgs & {
	/**
	 * The text to generate an audio from
	 */
	inputs: string;
};
export type TextToSpeechOutput = Blob;
/**
 * This task synthesize an audio of a voice pronouncing a given text.
 * Recommended model: espnet/kan-bayashi_ljspeech_vits
 */
export function textToSpeech(args: TextToSpeechArgs, options?: Options): Promise<TextToSpeechOutput>;
/**
 * Primitive to make custom calls to the inference API
 */
export function request<T>(
	args: RequestArgs,
	options?: Options & {
		/** When a model can be used for multiple tasks, and we want to run a non-default task */
		task?: string | InferenceTask;
		/** To load default model if needed */
		taskHint?: InferenceTask;
	}
): Promise<T>;
/**
 * Primitive to make custom inference calls that expect server-sent events, and returns the response through a generator
 */
export function streamingRequest<T>(
	args: RequestArgs,
	options?: Options & {
		/** When a model can be used for multiple tasks, and we want to run a non-default task */
		task?: string | InferenceTask;
		/** To load default model if needed */
		taskHint?: InferenceTask;
	}
): AsyncGenerator<T>;
export type ImageClassificationArgs = BaseArgs & {
	/**
	 * Binary image data
	 */
	data: Blob | ArrayBuffer;
};
export type ImageClassificationOutput = ImageClassificationOutputValue[];
export interface ImageClassificationOutputValue {
	/**
	 * The label for the class (model specific)
	 */
	label: string;
	/**
	 * A float that represents how likely it is that the image file belongs to this class.
	 */
	score: number;
}
/**
 * This task reads some image input and outputs the likelihood of classes.
 * Recommended model: google/vit-base-patch16-224
 */
export function imageClassification(
	args: ImageClassificationArgs,
	options?: Options
): Promise<ImageClassificationOutput>;
export type ImageSegmentationArgs = BaseArgs & {
	/**
	 * Binary image data
	 */
	data: Blob | ArrayBuffer;
};
export type ImageSegmentationOutput = ImageSegmentationOutputValue[];
export interface ImageSegmentationOutputValue {
	/**
	 * The label for the class (model specific) of a segment.
	 */
	label: string;
	/**
	 * A str (base64 str of a single channel black-and-white img) representing the mask of a segment.
	 */
	mask: string;
	/**
	 * A float that represents how likely it is that the detected object belongs to the given class.
	 */
	score: number;
}
/**
 * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.
 * Recommended model: facebook/detr-resnet-50-panoptic
 */
export function imageSegmentation(
	args: ImageSegmentationArgs,
	options?: Options
): Promise<ImageSegmentationOutput>;
export type ImageToImageArgs = BaseArgs & {
	/**
	 * The initial image condition
	 *
	 **/
	inputs: Blob | ArrayBuffer;

	parameters?: {
		/**
		 * The text prompt to guide the image generation.
		 */
		prompt?: string;
		/**
		 * strengh param only works for SD img2img and alt diffusion img2img models
		 * Conceptually, indicates how much to transform the reference `image`. Must be between 0 and 1. `image`
		 * will be used as a starting point, adding more noise to it the larger the `strength`. The number of
		 * denoising steps depends on the amount of noise initially added. When `strength` is 1, added noise will
		 * be maximum and the denoising process will run for the full number of iterations specified in
		 * `num_inference_steps`. A value of 1, therefore, essentially ignores `image`.
		 **/
		strength?: number;
		/**
		 * An optional negative prompt for the image generation
		 */
		negative_prompt?: string;
		/**
		 * The height in pixels of the generated image
		 */
		height?: number;
		/**
		 * The width in pixels of the generated image
		 */
		width?: number;
		/**
		 * The number of denoising steps. More denoising steps usually lead to a higher quality image at the expense of slower inference.
		 */
		num_inference_steps?: number;
		/**
		 * Guidance scale: Higher guidance scale encourages to generate images that are closely linked to the text `prompt`, usually at the expense of lower image quality.
		 */
		guidance_scale?: number;
		/**
		 * guess_mode only works for ControlNet models, defaults to False In this mode, the ControlNet encoder will try best to recognize the content of the input image even if
		 * you remove all prompts. The `guidance_scale` between 3.0 and 5.0 is recommended.
		 */
		guess_mode?: boolean;
	};
};
export type ImageToImageOutput = Blob;
/**
 * This task reads some text input and outputs an image.
 * Recommended model: lllyasviel/sd-controlnet-depth
 */
export function imageToImage(args: ImageToImageArgs, options?: Options): Promise<ImageToImageOutput>;
export type ImageToTextArgs = BaseArgs & {
	/**
	 * Binary image data
	 */
	data: Blob | ArrayBuffer;
};
export interface ImageToTextOutput {
	/**
	 * The generated caption
	 */
	generated_text: string;
}
/**
 * This task reads some image input and outputs the text caption.
 */
export function imageToText(args: ImageToTextArgs, options?: Options): Promise<ImageToTextOutput>;
export type ObjectDetectionArgs = BaseArgs & {
	/**
	 * Binary image data
	 */
	data: Blob | ArrayBuffer;
};
export type ObjectDetectionOutput = ObjectDetectionOutputValue[];
export interface ObjectDetectionOutputValue {
	/**
	 * A dict (with keys [xmin,ymin,xmax,ymax]) representing the bounding box of a detected object.
	 */
	box: {
		xmax: number;
		xmin: number;
		ymax: number;
		ymin: number;
	};
	/**
	 * The label for the class (model specific) of a detected object.
	 */
	label: string;

	/**
	 * A float that represents how likely it is that the detected object belongs to the given class.
	 */
	score: number;
}
/**
 * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.
 * Recommended model: facebook/detr-resnet-50
 */
export function objectDetection(args: ObjectDetectionArgs, options?: Options): Promise<ObjectDetectionOutput>;
export type TextToImageArgs = BaseArgs & {
	/**
	 * The text to generate an image from
	 */
	inputs: string;

	parameters?: {
		/**
		 * An optional negative prompt for the image generation
		 */
		negative_prompt?: string;
		/**
		 * The height in pixels of the generated image
		 */
		height?: number;
		/**
		 * The width in pixels of the generated image
		 */
		width?: number;
		/**
		 * The number of denoising steps. More denoising steps usually lead to a higher quality image at the expense of slower inference.
		 */
		num_inference_steps?: number;
		/**
		 * Guidance scale: Higher guidance scale encourages to generate images that are closely linked to the text `prompt`, usually at the expense of lower image quality.
		 */
		guidance_scale?: number;
	};
};
export type TextToImageOutput = Blob;
/**
 * This task reads some text input and outputs an image.
 * Recommended model: stabilityai/stable-diffusion-2
 */
export function textToImage(args: TextToImageArgs, options?: Options): Promise<TextToImageOutput>;
export type ZeroShotImageClassificationArgs = BaseArgs & {
	inputs: {
		/**
		 * Binary image data
		 */
		image: Blob | ArrayBuffer;
	};
	parameters: {
		/**
		 * A list of strings that are potential classes for inputs. (max 10)
		 */
		candidate_labels: string[];
	};
};
export type ZeroShotImageClassificationOutput = ZeroShotImageClassificationOutputValue[];
export interface ZeroShotImageClassificationOutputValue {
	label: string;
	score: number;
}
/**
 * Classify an image to specified classes.
 * Recommended model: openai/clip-vit-large-patch14-336
 */
export function zeroShotImageClassification(
	args: ZeroShotImageClassificationArgs,
	options?: Options
): Promise<ZeroShotImageClassificationOutput>;
export type DocumentQuestionAnsweringArgs = BaseArgs & {
	inputs: {
		/**
		 * Raw image
		 *
		 * You can use native `File` in browsers, or `new Blob([buffer])` in node, or for a base64 image `new Blob([btoa(base64String)])`, or even `await (await fetch('...)).blob()`
		 **/
		image: Blob | ArrayBuffer;
		question: string;
	};
};
export interface DocumentQuestionAnsweringOutput {
	/**
	 * A string that’s the answer within the document.
	 */
	answer: string;
	/**
	 * ?
	 */
	end?: number;
	/**
	 * A float that represents how likely that the answer is correct
	 */
	score?: number;
	/**
	 * ?
	 */
	start?: number;
}
/**
 * Answers a question on a document image. Recommended model: impira/layoutlm-document-qa.
 */
export function documentQuestionAnswering(
	args: DocumentQuestionAnsweringArgs,
	options?: Options
): Promise<DocumentQuestionAnsweringOutput>;
export type VisualQuestionAnsweringArgs = BaseArgs & {
	inputs: {
		/**
		 * Raw image
		 *
		 * You can use native `File` in browsers, or `new Blob([buffer])` in node, or for a base64 image `new Blob([btoa(base64String)])`, or even `await (await fetch('...)).blob()`
		 **/
		image: Blob | ArrayBuffer;
		question: string;
	};
};
export interface VisualQuestionAnsweringOutput {
	/**
	 * A string that’s the answer to a visual question.
	 */
	answer: string;
	/**
	 * Answer correctness score.
	 */
	score: number;
}
/**
 * Answers a question on an image. Recommended model: dandelin/vilt-b32-finetuned-vqa.
 */
export function visualQuestionAnswering(
	args: VisualQuestionAnsweringArgs,
	options?: Options
): Promise<VisualQuestionAnsweringOutput>;
export type ConversationalArgs = BaseArgs & {
	inputs: {
		/**
		 * A list of strings corresponding to the earlier replies from the model.
		 */
		generated_responses?: string[];
		/**
		 * A list of strings corresponding to the earlier replies from the user. Should be of the same length of generated_responses.
		 */
		past_user_inputs?: string[];
		/**
		 * The last input from the user in the conversation.
		 */
		text: string;
	};
	parameters?: {
		/**
		 * (Default: None). Integer to define the maximum length in tokens of the output summary.
		 */
		max_length?: number;
		/**
		 * (Default: None). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit.
		 */
		max_time?: number;
		/**
		 * (Default: None). Integer to define the minimum length in tokens of the output summary.
		 */
		min_length?: number;
		/**
		 * (Default: None). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes.
		 */
		repetition_penalty?: number;
		/**
		 * (Default: 1.0). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means always take the highest score, 100.0 is getting closer to uniform probability.
		 */
		temperature?: number;
		/**
		 * (Default: None). Integer to define the top tokens considered within the sample operation to create new text.
		 */
		top_k?: number;
		/**
		 * (Default: None). Float to define the tokens that are within the sample operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than top_p.
		 */
		top_p?: number;
	};
};
export interface ConversationalOutput {
	conversation: {
		generated_responses: string[];
		past_user_inputs: string[];
	};
	generated_text: string;
	warnings: string[];
}
/**
 * This task corresponds to any chatbot like structure. Models tend to have shorter max_length, so please check with caution when using a given model if you need long range dependency or not. Recommended model: microsoft/DialoGPT-large.
 *
 */
export function conversational(args: ConversationalArgs, options?: Options): Promise<ConversationalOutput>;
export type FeatureExtractionArgs = BaseArgs & {
	/**
	 *  The inputs is a string or a list of strings to get the features from.
	 *
	 *  inputs: "That is a happy person",
	 *
	 */
	inputs: string | string[];
};
/**
 * Returned values are a multidimensional array of floats (dimension depending on if you sent a string or a list of string, and if the automatic reduction, usually mean_pooling for instance was applied for you or not. This should be explained on the model's README).
 */
export type FeatureExtractionOutput = (number | number[] | number[][])[];
/**
 * This task reads some text and outputs raw float values, that are usually consumed as part of a semantic database/semantic search.
 */
export function featureExtraction(
	args: FeatureExtractionArgs,
	options?: Options
): Promise<FeatureExtractionOutput>;
export type FillMaskArgs = BaseArgs & {
	inputs: string;
};
export type FillMaskOutput = {
	/**
	 * The probability for this token.
	 */
	score: number;
	/**
	 * The actual sequence of tokens that ran against the model (may contain special tokens)
	 */
	sequence: string;
	/**
	 * The id of the token
	 */
	token: number;
	/**
	 * The string representation of the token
	 */
	token_str: string;
}[];
/**
 * Tries to fill in a hole with a missing word (token to be precise). That’s the base task for BERT models.
 */
export function fillMask(args: FillMaskArgs, options?: Options): Promise<FillMaskOutput>;
export type QuestionAnsweringArgs = BaseArgs & {
	inputs: {
		context: string;
		question: string;
	};
};
export interface QuestionAnsweringOutput {
	/**
	 * A string that’s the answer within the text.
	 */
	answer: string;
	/**
	 * The index (string wise) of the stop of the answer within context.
	 */
	end: number;
	/**
	 * A float that represents how likely that the answer is correct
	 */
	score: number;
	/**
	 * The index (string wise) of the start of the answer within context.
	 */
	start: number;
}
/**
 * Want to have a nice know-it-all bot that can answer any question?. Recommended model: deepset/roberta-base-squad2
 */
export function questionAnswering(
	args: QuestionAnsweringArgs,
	options?: Options
): Promise<QuestionAnsweringOutput>;
export type SentenceSimilarityArgs = BaseArgs & {
	/**
	 * The inputs vary based on the model.
	 *
	 * For example when using sentence-transformers/paraphrase-xlm-r-multilingual-v1 the inputs will have a `source_sentence` string and
	 * a `sentences` array of strings
	 */
	inputs: Record<string, unknown> | Record<string, unknown>[];
};
/**
 * Returned values are a list of floats
 */
export type SentenceSimilarityOutput = number[];
/**
 * Calculate the semantic similarity between one text and a list of other sentences by comparing their embeddings.
 */
export function sentenceSimilarity(
	args: SentenceSimilarityArgs,
	options?: Options
): Promise<SentenceSimilarityOutput>;
export type SummarizationArgs = BaseArgs & {
	/**
	 * A string to be summarized
	 */
	inputs: string;
	parameters?: {
		/**
		 * (Default: None). Integer to define the maximum length in tokens of the output summary.
		 */
		max_length?: number;
		/**
		 * (Default: None). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit.
		 */
		max_time?: number;
		/**
		 * (Default: None). Integer to define the minimum length in tokens of the output summary.
		 */
		min_length?: number;
		/**
		 * (Default: None). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes.
		 */
		repetition_penalty?: number;
		/**
		 * (Default: 1.0). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means always take the highest score, 100.0 is getting closer to uniform probability.
		 */
		temperature?: number;
		/**
		 * (Default: None). Integer to define the top tokens considered within the sample operation to create new text.
		 */
		top_k?: number;
		/**
		 * (Default: None). Float to define the tokens that are within the sample operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than top_p.
		 */
		top_p?: number;
	};
};
export interface SummarizationOutput {
	/**
	 * The string after translation
	 */
	summary_text: string;
}
/**
 * This task is well known to summarize longer text into shorter text. Be careful, some models have a maximum length of input. That means that the summary cannot handle full books for instance. Be careful when choosing your model.
 */
export function summarization(args: SummarizationArgs, options?: Options): Promise<SummarizationOutput>;
export type TableQuestionAnsweringArgs = BaseArgs & {
	inputs: {
		/**
		 * The query in plain text that you want to ask the table
		 */
		query: string;
		/**
		 * A table of data represented as a dict of list where entries are headers and the lists are all the values, all lists must have the same size.
		 */
		table: Record<string, string[]>;
	};
};
export interface TableQuestionAnsweringOutput {
	/**
	 * The aggregator used to get the answer
	 */
	aggregator: string;
	/**
	 * The plaintext answer
	 */
	answer: string;
	/**
	 * A list of coordinates of the cells contents
	 */
	cells: string[];
	/**
	 * a list of coordinates of the cells referenced in the answer
	 */
	coordinates: number[][];
}
/**
 * Don’t know SQL? Don’t want to dive into a large spreadsheet? Ask questions in plain english! Recommended model: google/tapas-base-finetuned-wtq.
 */
export function tableQuestionAnswering(
	args: TableQuestionAnsweringArgs,
	options?: Options
): Promise<TableQuestionAnsweringOutput>;
export type TextClassificationArgs = BaseArgs & {
	/**
	 * A string to be classified
	 */
	inputs: string;
};
export type TextClassificationOutput = {
	/**
	 * The label for the class (model specific)
	 */
	label: string;
	/**
	 * A floats that represents how likely is that the text belongs to this class.
	 */
	score: number;
}[];
/**
 * Usually used for sentiment-analysis this will output the likelihood of classes of an input. Recommended model: distilbert-base-uncased-finetuned-sst-2-english
 */
export function textClassification(
	args: TextClassificationArgs,
	options?: Options
): Promise<TextClassificationOutput>;
export type TextGenerationArgs = BaseArgs & {
	/**
	 * A string to be generated from
	 */
	inputs: string;
	parameters?: {
		/**
		 * (Optional: True). Bool. Whether or not to use sampling, use greedy decoding otherwise.
		 */
		do_sample?: boolean;
		/**
		 * (Default: None). Int (0-250). The amount of new tokens to be generated, this does not include the input length it is a estimate of the size of generated text you want. Each new tokens slows down the request, so look for balance between response times and length of text generated.
		 */
		max_new_tokens?: number;
		/**
		 * (Default: None). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit. Use that in combination with max_new_tokens for best results.
		 */
		max_time?: number;
		/**
		 * (Default: 1). Integer. The number of proposition you want to be returned.
		 */
		num_return_sequences?: number;
		/**
		 * (Default: None). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes.
		 */
		repetition_penalty?: number;
		/**
		 * (Default: True). Bool. If set to False, the return results will not contain the original query making it easier for prompting.
		 */
		return_full_text?: boolean;
		/**
		 * (Default: 1.0). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means always take the highest score, 100.0 is getting closer to uniform probability.
		 */
		temperature?: number;
		/**
		 * (Default: None). Integer to define the top tokens considered within the sample operation to create new text.
		 */
		top_k?: number;
		/**
		 * (Default: None). Float to define the tokens that are within the sample operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than top_p.
		 */
		top_p?: number;
		/**
		 * (Default: None). Integer. The maximum number of tokens from the input.
		 */
		truncate?: number;
		/**
		 * (Default: []) List of strings. The model will stop generating text when one of the strings in the list is generated.
		 * **/
		stop_sequences?: string[];
	};
};
export interface TextGenerationOutput {
	/**
	 * The continuated string
	 */
	generated_text: string;
}
/**
 * Use to continue text from a prompt. This is a very generic task. Recommended model: gpt2 (it’s a simple model, but fun to play with).
 */
export function textGeneration(args: TextGenerationArgs, options?: Options): Promise<TextGenerationOutput>;
export type TextGenerationStreamFinishReason =
	/** number of generated tokens == `max_new_tokens` */
	| "length"
	/** the model generated its end of sequence token */
	| "eos_token"
	/** the model generated a text included in `stop_sequences` */
	| "stop_sequence";
export interface TextGenerationStreamToken {
	/** Token ID from the model tokenizer */
	id: number;
	/** Token text */
	text: string;
	/** Logprob */
	logprob: number;
	/**
	 * Is the token a special token
	 * Can be used to ignore tokens when concatenating
	 */
	special: boolean;
}
export interface TextGenerationStreamPrefillToken {
	/** Token ID from the model tokenizer */
	id: number;
	/** Token text */
	text: string;
	/**
	 * Logprob
	 * Optional since the logprob of the first token cannot be computed
	 */
	logprob?: number;
}
export interface TextGenerationStreamBestOfSequence {
	/** Generated text */
	generated_text: string;
	/** Generation finish reason */
	finish_reason: TextGenerationStreamFinishReason;
	/** Number of generated tokens */
	generated_tokens: number;
	/** Sampling seed if sampling was activated */
	seed?: number;
	/** Prompt tokens */
	prefill: TextGenerationStreamPrefillToken[];
	/** Generated tokens */
	tokens: TextGenerationStreamToken[];
}
export interface TextGenerationStreamDetails {
	/** Generation finish reason */
	finish_reason: TextGenerationStreamFinishReason;
	/** Number of generated tokens */
	generated_tokens: number;
	/** Sampling seed if sampling was activated */
	seed?: number;
	/** Prompt tokens */
	prefill: TextGenerationStreamPrefillToken[];
	/** */
	tokens: TextGenerationStreamToken[];
	/** Additional sequences when using the `best_of` parameter */
	best_of_sequences?: TextGenerationStreamBestOfSequence[];
}
export interface TextGenerationStreamOutput {
	/** Generated token, one at a time */
	token: TextGenerationStreamToken;
	/**
	 * Complete generated text
	 * Only available when the generation is finished
	 */
	generated_text: string | null;
	/**
	 * Generation details
	 * Only available when the generation is finished
	 */
	details: TextGenerationStreamDetails | null;
}
/**
 * Use to continue text from a prompt. Same as `textGeneration` but returns generator that can be read one token at a time
 */
export function textGenerationStream(
	args: TextGenerationArgs,
	options?: Options
): AsyncGenerator<TextGenerationStreamOutput>;
export type TokenClassificationArgs = BaseArgs & {
	/**
	 * A string to be classified
	 */
	inputs: string;
	parameters?: {
		/**
		 * (Default: simple). There are several aggregation strategies:
		 *
		 * none: Every token gets classified without further aggregation.
		 *
		 * simple: Entities are grouped according to the default schema (B-, I- tags get merged when the tag is similar).
		 *
		 * first: Same as the simple strategy except words cannot end up with different tags. Words will use the tag of the first token when there is ambiguity.
		 *
		 * average: Same as the simple strategy except words cannot end up with different tags. Scores are averaged across tokens and then the maximum label is applied.
		 *
		 * max: Same as the simple strategy except words cannot end up with different tags. Word entity will be the token with the maximum score.
		 */
		aggregation_strategy?: "none" | "simple" | "first" | "average" | "max";
	};
};
export type TokenClassificationOutput = TokenClassificationOutputValue[];
export interface TokenClassificationOutputValue {
	/**
	 * The offset stringwise where the answer is located. Useful to disambiguate if word occurs multiple times.
	 */
	end: number;
	/**
	 * The type for the entity being recognized (model specific).
	 */
	entity_group: string;
	/**
	 * How likely the entity was recognized.
	 */
	score: number;
	/**
	 * The offset stringwise where the answer is located. Useful to disambiguate if word occurs multiple times.
	 */
	start: number;
	/**
	 * The string that was captured
	 */
	word: string;
}
/**
 * Usually used for sentence parsing, either grammatical, or Named Entity Recognition (NER) to understand keywords contained within text. Recommended model: dbmdz/bert-large-cased-finetuned-conll03-english
 */
export function tokenClassification(
	args: TokenClassificationArgs,
	options?: Options
): Promise<TokenClassificationOutput>;
export type TranslationArgs = BaseArgs & {
	/**
	 * A string to be translated
	 */
	inputs: string;
};
export interface TranslationOutput {
	/**
	 * The string after translation
	 */
	translation_text: string;
}
/**
 * This task is well known to translate text from one language to another. Recommended model: Helsinki-NLP/opus-mt-ru-en.
 */
export function translation(args: TranslationArgs, options?: Options): Promise<TranslationOutput>;
export type ZeroShotClassificationArgs = BaseArgs & {
	/**
	 * a string or list of strings
	 */
	inputs: string | string[];
	parameters: {
		/**
		 * a list of strings that are potential classes for inputs. (max 10 candidate_labels, for more, simply run multiple requests, results are going to be misleading if using too many candidate_labels anyway. If you want to keep the exact same, you can simply run multi_label=True and do the scaling on your end.
		 */
		candidate_labels: string[];
		/**
		 * (Default: false) Boolean that is set to True if classes can overlap
		 */
		multi_label?: boolean;
	};
};
export type ZeroShotClassificationOutput = ZeroShotClassificationOutputValue[];
export interface ZeroShotClassificationOutputValue {
	labels: string[];
	scores: number[];
	sequence: string;
}
/**
 * This task is super useful to try out classification with zero code, you simply pass a sentence/paragraph and the possible labels for that sentence, and you get a result. Recommended model: facebook/bart-large-mnli.
 */
export function zeroShotClassification(
	args: ZeroShotClassificationArgs,
	options?: Options
): Promise<ZeroShotClassificationOutput>;
export type TabularClassificationArgs = BaseArgs & {
	inputs: {
		/**
		 * A table of data represented as a dict of list where entries are headers and the lists are all the values, all lists must have the same size.
		 */
		data: Record<string, string[]>;
	};
};
/**
 * A list of predicted labels for each row
 */
export type TabularClassificationOutput = number[];
/**
 * Predicts target label for a given set of features in tabular form.
 * Typically, you will want to train a classification model on your training data and use it with your new data of the same format.
 * Example model: vvmnnnkv/wine-quality
 */
export function tabularClassification(
	args: TabularClassificationArgs,
	options?: Options
): Promise<TabularClassificationOutput>;
export type TabularRegressionArgs = BaseArgs & {
	inputs: {
		/**
		 * A table of data represented as a dict of list where entries are headers and the lists are all the values, all lists must have the same size.
		 */
		data: Record<string, string[]>;
	};
};
/**
 * a list of predicted values for each row
 */
export type TabularRegressionOutput = number[];
/**
 * Predicts target value for a given set of features in tabular form.
 * Typically, you will want to train a regression model on your training data and use it with your new data of the same format.
 * Example model: scikit-learn/Fish-Weight
 */
export function tabularRegression(
	args: TabularRegressionArgs,
	options?: Options
): Promise<TabularRegressionOutput>;
export class HfInference {
	constructor(accessToken?: string, defaultOptions?: Options);
	/**
	 * Returns copy of HfInference tied to a specified endpoint.
	 */
	endpoint(endpointUrl: string): HfInferenceEndpoint;
	/**
	 * This task reads some audio input and outputs the likelihood of classes.
	 * Recommended model:  superb/hubert-large-superb-er
	 */
	audioClassification(
		args: Omit<AudioClassificationArgs, 'accessToken'>,
		options?: Options
	): Promise<AudioClassificationReturn>;
	/**
	 * This task reads some audio input and outputs one or multiple audio files.
	 * Example model: speechbrain/sepformer-wham does audio source separation.
	 */
	audioToAudio(args: Omit<AudioToAudioArgs, 'accessToken'>, options?: Options): Promise<AudioToAudioReturn>;
	/**
	 * This task reads some audio input and outputs the said words within the audio files.
	 * Recommended model (english language): facebook/wav2vec2-large-960h-lv60-self
	 */
	automaticSpeechRecognition(
		args: Omit<AutomaticSpeechRecognitionArgs, 'accessToken'>,
		options?: Options
	): Promise<AutomaticSpeechRecognitionOutput>;
	/**
	 * This task synthesize an audio of a voice pronouncing a given text.
	 * Recommended model: espnet/kan-bayashi_ljspeech_vits
	 */
	textToSpeech(args: Omit<TextToSpeechArgs, 'accessToken'>, options?: Options): Promise<TextToSpeechOutput>;
	/**
	 * Primitive to make custom calls to the inference API
	 */
	request<T>(
		args: Omit<RequestArgs, 'accessToken'>,
		options?: Options & {
			/** When a model can be used for multiple tasks, and we want to run a non-default task */
			task?: string | InferenceTask;
			/** To load default model if needed */
			taskHint?: InferenceTask;
		}
	): Promise<T>;
	/**
	 * Primitive to make custom inference calls that expect server-sent events, and returns the response through a generator
	 */
	streamingRequest<T>(
		args: Omit<RequestArgs, 'accessToken'>,
		options?: Options & {
			/** When a model can be used for multiple tasks, and we want to run a non-default task */
			task?: string | InferenceTask;
			/** To load default model if needed */
			taskHint?: InferenceTask;
		}
	): AsyncGenerator<T>;
	/**
	 * This task reads some image input and outputs the likelihood of classes.
	 * Recommended model: google/vit-base-patch16-224
	 */
	imageClassification(
		args: Omit<ImageClassificationArgs, 'accessToken'>,
		options?: Options
	): Promise<ImageClassificationOutput>;
	/**
	 * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.
	 * Recommended model: facebook/detr-resnet-50-panoptic
	 */
	imageSegmentation(
		args: Omit<ImageSegmentationArgs, 'accessToken'>,
		options?: Options
	): Promise<ImageSegmentationOutput>;
	/**
	 * This task reads some text input and outputs an image.
	 * Recommended model: lllyasviel/sd-controlnet-depth
	 */
	imageToImage(args: Omit<ImageToImageArgs, 'accessToken'>, options?: Options): Promise<ImageToImageOutput>;
	/**
	 * This task reads some image input and outputs the text caption.
	 */
	imageToText(args: Omit<ImageToTextArgs, 'accessToken'>, options?: Options): Promise<ImageToTextOutput>;
	/**
	 * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.
	 * Recommended model: facebook/detr-resnet-50
	 */
	objectDetection(args: Omit<ObjectDetectionArgs, 'accessToken'>, options?: Options): Promise<ObjectDetectionOutput>;
	/**
	 * This task reads some text input and outputs an image.
	 * Recommended model: stabilityai/stable-diffusion-2
	 */
	textToImage(args: Omit<TextToImageArgs, 'accessToken'>, options?: Options): Promise<TextToImageOutput>;
	/**
	 * Classify an image to specified classes.
	 * Recommended model: openai/clip-vit-large-patch14-336
	 */
	zeroShotImageClassification(
		args: Omit<ZeroShotImageClassificationArgs, 'accessToken'>,
		options?: Options
	): Promise<ZeroShotImageClassificationOutput>;
	/**
	 * Answers a question on a document image. Recommended model: impira/layoutlm-document-qa.
	 */
	documentQuestionAnswering(
		args: Omit<DocumentQuestionAnsweringArgs, 'accessToken'>,
		options?: Options
	): Promise<DocumentQuestionAnsweringOutput>;
	/**
	 * Answers a question on an image. Recommended model: dandelin/vilt-b32-finetuned-vqa.
	 */
	visualQuestionAnswering(
		args: Omit<VisualQuestionAnsweringArgs, 'accessToken'>,
		options?: Options
	): Promise<VisualQuestionAnsweringOutput>;
	/**
	 * This task corresponds to any chatbot like structure. Models tend to have shorter max_length, so please check with caution when using a given model if you need long range dependency or not. Recommended model: microsoft/DialoGPT-large.
	 *
	 */
	conversational(args: Omit<ConversationalArgs, 'accessToken'>, options?: Options): Promise<ConversationalOutput>;
	/**
	 * This task reads some text and outputs raw float values, that are usually consumed as part of a semantic database/semantic search.
	 */
	featureExtraction(
		args: Omit<FeatureExtractionArgs, 'accessToken'>,
		options?: Options
	): Promise<FeatureExtractionOutput>;
	/**
	 * Tries to fill in a hole with a missing word (token to be precise). That’s the base task for BERT models.
	 */
	fillMask(args: Omit<FillMaskArgs, 'accessToken'>, options?: Options): Promise<FillMaskOutput>;
	/**
	 * Want to have a nice know-it-all bot that can answer any question?. Recommended model: deepset/roberta-base-squad2
	 */
	questionAnswering(
		args: Omit<QuestionAnsweringArgs, 'accessToken'>,
		options?: Options
	): Promise<QuestionAnsweringOutput>;
	/**
	 * Calculate the semantic similarity between one text and a list of other sentences by comparing their embeddings.
	 */
	sentenceSimilarity(
		args: Omit<SentenceSimilarityArgs, 'accessToken'>,
		options?: Options
	): Promise<SentenceSimilarityOutput>;
	/**
	 * This task is well known to summarize longer text into shorter text. Be careful, some models have a maximum length of input. That means that the summary cannot handle full books for instance. Be careful when choosing your model.
	 */
	summarization(args: Omit<SummarizationArgs, 'accessToken'>, options?: Options): Promise<SummarizationOutput>;
	/**
	 * Don’t know SQL? Don’t want to dive into a large spreadsheet? Ask questions in plain english! Recommended model: google/tapas-base-finetuned-wtq.
	 */
	tableQuestionAnswering(
		args: Omit<TableQuestionAnsweringArgs, 'accessToken'>,
		options?: Options
	): Promise<TableQuestionAnsweringOutput>;
	/**
	 * Usually used for sentiment-analysis this will output the likelihood of classes of an input. Recommended model: distilbert-base-uncased-finetuned-sst-2-english
	 */
	textClassification(
		args: Omit<TextClassificationArgs, 'accessToken'>,
		options?: Options
	): Promise<TextClassificationOutput>;
	/**
	 * Use to continue text from a prompt. This is a very generic task. Recommended model: gpt2 (it’s a simple model, but fun to play with).
	 */
	textGeneration(args: Omit<TextGenerationArgs, 'accessToken'>, options?: Options): Promise<TextGenerationOutput>;
	/**
	 * Use to continue text from a prompt. Same as `textGeneration` but returns generator that can be read one token at a time
	 */
	textGenerationStream(
		args: Omit<TextGenerationArgs, 'accessToken'>,
		options?: Options
	): AsyncGenerator<TextGenerationStreamOutput>;
	/**
	 * Usually used for sentence parsing, either grammatical, or Named Entity Recognition (NER) to understand keywords contained within text. Recommended model: dbmdz/bert-large-cased-finetuned-conll03-english
	 */
	tokenClassification(
		args: Omit<TokenClassificationArgs, 'accessToken'>,
		options?: Options
	): Promise<TokenClassificationOutput>;
	/**
	 * This task is well known to translate text from one language to another. Recommended model: Helsinki-NLP/opus-mt-ru-en.
	 */
	translation(args: Omit<TranslationArgs, 'accessToken'>, options?: Options): Promise<TranslationOutput>;
	/**
	 * This task is super useful to try out classification with zero code, you simply pass a sentence/paragraph and the possible labels for that sentence, and you get a result. Recommended model: facebook/bart-large-mnli.
	 */
	zeroShotClassification(
		args: Omit<ZeroShotClassificationArgs, 'accessToken'>,
		options?: Options
	): Promise<ZeroShotClassificationOutput>;
	/**
	 * Predicts target label for a given set of features in tabular form.
	 * Typically, you will want to train a classification model on your training data and use it with your new data of the same format.
	 * Example model: vvmnnnkv/wine-quality
	 */
	tabularClassification(
		args: Omit<TabularClassificationArgs, 'accessToken'>,
		options?: Options
	): Promise<TabularClassificationOutput>;
	/**
	 * Predicts target value for a given set of features in tabular form.
	 * Typically, you will want to train a regression model on your training data and use it with your new data of the same format.
	 * Example model: scikit-learn/Fish-Weight
	 */
	tabularRegression(
		args: Omit<TabularRegressionArgs, 'accessToken'>,
		options?: Options
	): Promise<TabularRegressionOutput>;
}
export class HfInferenceEndpoint {
	constructor(endpointUrl: string, accessToken?: string, defaultOptions?: Options);
	/**
	 * This task reads some audio input and outputs the likelihood of classes.
	 * Recommended model:  superb/hubert-large-superb-er
	 */
	audioClassification(
		args: Omit<AudioClassificationArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<AudioClassificationReturn>;
	/**
	 * This task reads some audio input and outputs one or multiple audio files.
	 * Example model: speechbrain/sepformer-wham does audio source separation.
	 */
	audioToAudio(args: Omit<AudioToAudioArgs, 'accessToken' | 'model'>, options?: Options): Promise<AudioToAudioReturn>;
	/**
	 * This task reads some audio input and outputs the said words within the audio files.
	 * Recommended model (english language): facebook/wav2vec2-large-960h-lv60-self
	 */
	automaticSpeechRecognition(
		args: Omit<AutomaticSpeechRecognitionArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<AutomaticSpeechRecognitionOutput>;
	/**
	 * This task synthesize an audio of a voice pronouncing a given text.
	 * Recommended model: espnet/kan-bayashi_ljspeech_vits
	 */
	textToSpeech(args: Omit<TextToSpeechArgs, 'accessToken' | 'model'>, options?: Options): Promise<TextToSpeechOutput>;
	/**
	 * Primitive to make custom calls to the inference API
	 */
	request<T>(
		args: Omit<RequestArgs, 'accessToken' | 'model'>,
		options?: Options & {
			/** When a model can be used for multiple tasks, and we want to run a non-default task */
			task?: string | InferenceTask;
			/** To load default model if needed */
			taskHint?: InferenceTask;
		}
	): Promise<T>;
	/**
	 * Primitive to make custom inference calls that expect server-sent events, and returns the response through a generator
	 */
	streamingRequest<T>(
		args: Omit<RequestArgs, 'accessToken' | 'model'>,
		options?: Options & {
			/** When a model can be used for multiple tasks, and we want to run a non-default task */
			task?: string | InferenceTask;
			/** To load default model if needed */
			taskHint?: InferenceTask;
		}
	): AsyncGenerator<T>;
	/**
	 * This task reads some image input and outputs the likelihood of classes.
	 * Recommended model: google/vit-base-patch16-224
	 */
	imageClassification(
		args: Omit<ImageClassificationArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<ImageClassificationOutput>;
	/**
	 * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.
	 * Recommended model: facebook/detr-resnet-50-panoptic
	 */
	imageSegmentation(
		args: Omit<ImageSegmentationArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<ImageSegmentationOutput>;
	/**
	 * This task reads some text input and outputs an image.
	 * Recommended model: lllyasviel/sd-controlnet-depth
	 */
	imageToImage(args: Omit<ImageToImageArgs, 'accessToken' | 'model'>, options?: Options): Promise<ImageToImageOutput>;
	/**
	 * This task reads some image input and outputs the text caption.
	 */
	imageToText(args: Omit<ImageToTextArgs, 'accessToken' | 'model'>, options?: Options): Promise<ImageToTextOutput>;
	/**
	 * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.
	 * Recommended model: facebook/detr-resnet-50
	 */
	objectDetection(args: Omit<ObjectDetectionArgs, 'accessToken' | 'model'>, options?: Options): Promise<ObjectDetectionOutput>;
	/**
	 * This task reads some text input and outputs an image.
	 * Recommended model: stabilityai/stable-diffusion-2
	 */
	textToImage(args: Omit<TextToImageArgs, 'accessToken' | 'model'>, options?: Options): Promise<TextToImageOutput>;
	/**
	 * Classify an image to specified classes.
	 * Recommended model: openai/clip-vit-large-patch14-336
	 */
	zeroShotImageClassification(
		args: Omit<ZeroShotImageClassificationArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<ZeroShotImageClassificationOutput>;
	/**
	 * Answers a question on a document image. Recommended model: impira/layoutlm-document-qa.
	 */
	documentQuestionAnswering(
		args: Omit<DocumentQuestionAnsweringArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<DocumentQuestionAnsweringOutput>;
	/**
	 * Answers a question on an image. Recommended model: dandelin/vilt-b32-finetuned-vqa.
	 */
	visualQuestionAnswering(
		args: Omit<VisualQuestionAnsweringArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<VisualQuestionAnsweringOutput>;
	/**
	 * This task corresponds to any chatbot like structure. Models tend to have shorter max_length, so please check with caution when using a given model if you need long range dependency or not. Recommended model: microsoft/DialoGPT-large.
	 *
	 */
	conversational(args: Omit<ConversationalArgs, 'accessToken' | 'model'>, options?: Options): Promise<ConversationalOutput>;
	/**
	 * This task reads some text and outputs raw float values, that are usually consumed as part of a semantic database/semantic search.
	 */
	featureExtraction(
		args: Omit<FeatureExtractionArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<FeatureExtractionOutput>;
	/**
	 * Tries to fill in a hole with a missing word (token to be precise). That’s the base task for BERT models.
	 */
	fillMask(args: Omit<FillMaskArgs, 'accessToken' | 'model'>, options?: Options): Promise<FillMaskOutput>;
	/**
	 * Want to have a nice know-it-all bot that can answer any question?. Recommended model: deepset/roberta-base-squad2
	 */
	questionAnswering(
		args: Omit<QuestionAnsweringArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<QuestionAnsweringOutput>;
	/**
	 * Calculate the semantic similarity between one text and a list of other sentences by comparing their embeddings.
	 */
	sentenceSimilarity(
		args: Omit<SentenceSimilarityArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<SentenceSimilarityOutput>;
	/**
	 * This task is well known to summarize longer text into shorter text. Be careful, some models have a maximum length of input. That means that the summary cannot handle full books for instance. Be careful when choosing your model.
	 */
	summarization(args: Omit<SummarizationArgs, 'accessToken' | 'model'>, options?: Options): Promise<SummarizationOutput>;
	/**
	 * Don’t know SQL? Don’t want to dive into a large spreadsheet? Ask questions in plain english! Recommended model: google/tapas-base-finetuned-wtq.
	 */
	tableQuestionAnswering(
		args: Omit<TableQuestionAnsweringArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<TableQuestionAnsweringOutput>;
	/**
	 * Usually used for sentiment-analysis this will output the likelihood of classes of an input. Recommended model: distilbert-base-uncased-finetuned-sst-2-english
	 */
	textClassification(
		args: Omit<TextClassificationArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<TextClassificationOutput>;
	/**
	 * Use to continue text from a prompt. This is a very generic task. Recommended model: gpt2 (it’s a simple model, but fun to play with).
	 */
	textGeneration(args: Omit<TextGenerationArgs, 'accessToken' | 'model'>, options?: Options): Promise<TextGenerationOutput>;
	/**
	 * Use to continue text from a prompt. Same as `textGeneration` but returns generator that can be read one token at a time
	 */
	textGenerationStream(
		args: Omit<TextGenerationArgs, 'accessToken' | 'model'>,
		options?: Options
	): AsyncGenerator<TextGenerationStreamOutput>;
	/**
	 * Usually used for sentence parsing, either grammatical, or Named Entity Recognition (NER) to understand keywords contained within text. Recommended model: dbmdz/bert-large-cased-finetuned-conll03-english
	 */
	tokenClassification(
		args: Omit<TokenClassificationArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<TokenClassificationOutput>;
	/**
	 * This task is well known to translate text from one language to another. Recommended model: Helsinki-NLP/opus-mt-ru-en.
	 */
	translation(args: Omit<TranslationArgs, 'accessToken' | 'model'>, options?: Options): Promise<TranslationOutput>;
	/**
	 * This task is super useful to try out classification with zero code, you simply pass a sentence/paragraph and the possible labels for that sentence, and you get a result. Recommended model: facebook/bart-large-mnli.
	 */
	zeroShotClassification(
		args: Omit<ZeroShotClassificationArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<ZeroShotClassificationOutput>;
	/**
	 * Predicts target label for a given set of features in tabular form.
	 * Typically, you will want to train a classification model on your training data and use it with your new data of the same format.
	 * Example model: vvmnnnkv/wine-quality
	 */
	tabularClassification(
		args: Omit<TabularClassificationArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<TabularClassificationOutput>;
	/**
	 * Predicts target value for a given set of features in tabular form.
	 * Typically, you will want to train a regression model on your training data and use it with your new data of the same format.
	 * Example model: scikit-learn/Fish-Weight
	 */
	tabularRegression(
		args: Omit<TabularRegressionArgs, 'accessToken' | 'model'>,
		options?: Options
	): Promise<TabularRegressionOutput>;
}
