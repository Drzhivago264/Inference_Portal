/// <reference types="node" />
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: vectorindex.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export declare namespace vectorindex {
    export class _Item extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            id?: string;
            vector?: _Vector;
            metadata?: _Metadata[];
        });
        get id(): string;
        set id(value: string);
        get vector(): _Vector;
        set vector(value: _Vector);
        get has_vector(): boolean;
        get metadata(): _Metadata[];
        set metadata(value: _Metadata[]);
        static fromObject(data: {
            id?: string;
            vector?: ReturnType<typeof _Vector.prototype.toObject>;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
        }): _Item;
        toObject(): {
            id?: string;
            vector?: ReturnType<typeof _Vector.prototype.toObject>;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _Item;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _Item;
    }
    export class _UpsertItemBatchRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            index_name?: string;
            items?: _Item[];
        });
        get index_name(): string;
        set index_name(value: string);
        get items(): _Item[];
        set items(value: _Item[]);
        static fromObject(data: {
            index_name?: string;
            items?: ReturnType<typeof _Item.prototype.toObject>[];
        }): _UpsertItemBatchRequest;
        toObject(): {
            index_name?: string;
            items?: ReturnType<typeof _Item.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _UpsertItemBatchRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _UpsertItemBatchRequest;
    }
    export class _UpsertItemBatchResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            error_indices?: number[];
        });
        get error_indices(): number[];
        set error_indices(value: number[]);
        static fromObject(data: {
            error_indices?: number[];
        }): _UpsertItemBatchResponse;
        toObject(): {
            error_indices?: number[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _UpsertItemBatchResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _UpsertItemBatchResponse;
    }
    export class _DeleteItemBatchRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            index_name?: string;
            ids?: string[];
            filter?: _FilterExpression;
        });
        get index_name(): string;
        set index_name(value: string);
        get ids(): string[];
        set ids(value: string[]);
        get filter(): _FilterExpression;
        set filter(value: _FilterExpression);
        get has_filter(): boolean;
        static fromObject(data: {
            index_name?: string;
            ids?: string[];
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        }): _DeleteItemBatchRequest;
        toObject(): {
            index_name?: string;
            ids?: string[];
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _DeleteItemBatchRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _DeleteItemBatchRequest;
    }
    export class _DeleteItemBatchResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {});
        static fromObject(data: {}): _DeleteItemBatchResponse;
        toObject(): {};
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _DeleteItemBatchResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _DeleteItemBatchResponse;
    }
    export class _Vector extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            elements?: number[];
        });
        get elements(): number[];
        set elements(value: number[]);
        static fromObject(data: {
            elements?: number[];
        }): _Vector;
        toObject(): {
            elements?: number[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _Vector;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _Vector;
    }
    export class _Metadata extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            field?: string;
        } & (({
            string_value?: string;
            integer_value?: never;
            double_value?: never;
            boolean_value?: never;
            list_of_strings_value?: never;
        } | {
            string_value?: never;
            integer_value?: number;
            double_value?: never;
            boolean_value?: never;
            list_of_strings_value?: never;
        } | {
            string_value?: never;
            integer_value?: never;
            double_value?: number;
            boolean_value?: never;
            list_of_strings_value?: never;
        } | {
            string_value?: never;
            integer_value?: never;
            double_value?: never;
            boolean_value?: boolean;
            list_of_strings_value?: never;
        } | {
            string_value?: never;
            integer_value?: never;
            double_value?: never;
            boolean_value?: never;
            list_of_strings_value?: _Metadata._ListOfStrings;
        }))));
        get field(): string;
        set field(value: string);
        get string_value(): string;
        set string_value(value: string);
        get has_string_value(): boolean;
        get integer_value(): number;
        set integer_value(value: number);
        get has_integer_value(): boolean;
        get double_value(): number;
        set double_value(value: number);
        get has_double_value(): boolean;
        get boolean_value(): boolean;
        set boolean_value(value: boolean);
        get has_boolean_value(): boolean;
        get list_of_strings_value(): _Metadata._ListOfStrings;
        set list_of_strings_value(value: _Metadata._ListOfStrings);
        get has_list_of_strings_value(): boolean;
        get value(): "none" | "double_value" | "string_value" | "integer_value" | "boolean_value" | "list_of_strings_value";
        static fromObject(data: {
            field?: string;
            string_value?: string;
            integer_value?: number;
            double_value?: number;
            boolean_value?: boolean;
            list_of_strings_value?: ReturnType<typeof _Metadata._ListOfStrings.prototype.toObject>;
        }): _Metadata;
        toObject(): {
            field?: string;
            string_value?: string;
            integer_value?: number;
            double_value?: number;
            boolean_value?: boolean;
            list_of_strings_value?: ReturnType<typeof _Metadata._ListOfStrings.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _Metadata;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _Metadata;
    }
    export namespace _Metadata {
        class _ListOfStrings extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                values?: string[];
            });
            get values(): string[];
            set values(value: string[]);
            static fromObject(data: {
                values?: string[];
            }): _ListOfStrings;
            toObject(): {
                values?: string[];
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _ListOfStrings;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): _ListOfStrings;
        }
    }
    export class _MetadataRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            some?: _MetadataRequest.Some;
            all?: never;
        } | {
            some?: never;
            all?: _MetadataRequest.All;
        }))));
        get some(): _MetadataRequest.Some;
        set some(value: _MetadataRequest.Some);
        get has_some(): boolean;
        get all(): _MetadataRequest.All;
        set all(value: _MetadataRequest.All);
        get has_all(): boolean;
        get kind(): "some" | "none" | "all";
        static fromObject(data: {
            some?: ReturnType<typeof _MetadataRequest.Some.prototype.toObject>;
            all?: ReturnType<typeof _MetadataRequest.All.prototype.toObject>;
        }): _MetadataRequest;
        toObject(): {
            some?: ReturnType<typeof _MetadataRequest.Some.prototype.toObject>;
            all?: ReturnType<typeof _MetadataRequest.All.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _MetadataRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _MetadataRequest;
    }
    export namespace _MetadataRequest {
        class Some extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                fields?: string[];
            });
            get fields(): string[];
            set fields(value: string[]);
            static fromObject(data: {
                fields?: string[];
            }): Some;
            toObject(): {
                fields?: string[];
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Some;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): Some;
        }
        class All extends pb_1.Message {
            #private;
            constructor(data?: any[] | {});
            static fromObject(data: {}): All;
            toObject(): {};
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): All;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): All;
        }
    }
    export class _AndExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            first_expression?: _FilterExpression;
            second_expression?: _FilterExpression;
        });
        get first_expression(): _FilterExpression;
        set first_expression(value: _FilterExpression);
        get has_first_expression(): boolean;
        get second_expression(): _FilterExpression;
        set second_expression(value: _FilterExpression);
        get has_second_expression(): boolean;
        static fromObject(data: {
            first_expression?: ReturnType<typeof _FilterExpression.prototype.toObject>;
            second_expression?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        }): _AndExpression;
        toObject(): {
            first_expression?: ReturnType<typeof _FilterExpression.prototype.toObject>;
            second_expression?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _AndExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _AndExpression;
    }
    export class _OrExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            first_expression?: _FilterExpression;
            second_expression?: _FilterExpression;
        });
        get first_expression(): _FilterExpression;
        set first_expression(value: _FilterExpression);
        get has_first_expression(): boolean;
        get second_expression(): _FilterExpression;
        set second_expression(value: _FilterExpression);
        get has_second_expression(): boolean;
        static fromObject(data: {
            first_expression?: ReturnType<typeof _FilterExpression.prototype.toObject>;
            second_expression?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        }): _OrExpression;
        toObject(): {
            first_expression?: ReturnType<typeof _FilterExpression.prototype.toObject>;
            second_expression?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _OrExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _OrExpression;
    }
    export class _NotExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            expression_to_negate?: _FilterExpression;
        });
        get expression_to_negate(): _FilterExpression;
        set expression_to_negate(value: _FilterExpression);
        get has_expression_to_negate(): boolean;
        static fromObject(data: {
            expression_to_negate?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        }): _NotExpression;
        toObject(): {
            expression_to_negate?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _NotExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _NotExpression;
    }
    export class _EqualsExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            field?: string;
        } & (({
            string_value?: string;
            integer_value?: never;
            float_value?: never;
            boolean_value?: never;
        } | {
            string_value?: never;
            integer_value?: number;
            float_value?: never;
            boolean_value?: never;
        } | {
            string_value?: never;
            integer_value?: never;
            float_value?: number;
            boolean_value?: never;
        } | {
            string_value?: never;
            integer_value?: never;
            float_value?: never;
            boolean_value?: boolean;
        }))));
        get field(): string;
        set field(value: string);
        get string_value(): string;
        set string_value(value: string);
        get has_string_value(): boolean;
        get integer_value(): number;
        set integer_value(value: number);
        get has_integer_value(): boolean;
        get float_value(): number;
        set float_value(value: number);
        get has_float_value(): boolean;
        get boolean_value(): boolean;
        set boolean_value(value: boolean);
        get has_boolean_value(): boolean;
        get value(): "none" | "string_value" | "integer_value" | "boolean_value" | "float_value";
        static fromObject(data: {
            field?: string;
            string_value?: string;
            integer_value?: number;
            float_value?: number;
            boolean_value?: boolean;
        }): _EqualsExpression;
        toObject(): {
            field?: string;
            string_value?: string;
            integer_value?: number;
            float_value?: number;
            boolean_value?: boolean;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _EqualsExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _EqualsExpression;
    }
    export class _GreaterThanExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            field?: string;
        } & (({
            integer_value?: number;
            float_value?: never;
        } | {
            integer_value?: never;
            float_value?: number;
        }))));
        get field(): string;
        set field(value: string);
        get integer_value(): number;
        set integer_value(value: number);
        get has_integer_value(): boolean;
        get float_value(): number;
        set float_value(value: number);
        get has_float_value(): boolean;
        get value(): "none" | "integer_value" | "float_value";
        static fromObject(data: {
            field?: string;
            integer_value?: number;
            float_value?: number;
        }): _GreaterThanExpression;
        toObject(): {
            field?: string;
            integer_value?: number;
            float_value?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _GreaterThanExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _GreaterThanExpression;
    }
    export class _GreaterThanOrEqualExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            field?: string;
        } & (({
            integer_value?: number;
            float_value?: never;
        } | {
            integer_value?: never;
            float_value?: number;
        }))));
        get field(): string;
        set field(value: string);
        get integer_value(): number;
        set integer_value(value: number);
        get has_integer_value(): boolean;
        get float_value(): number;
        set float_value(value: number);
        get has_float_value(): boolean;
        get value(): "none" | "integer_value" | "float_value";
        static fromObject(data: {
            field?: string;
            integer_value?: number;
            float_value?: number;
        }): _GreaterThanOrEqualExpression;
        toObject(): {
            field?: string;
            integer_value?: number;
            float_value?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _GreaterThanOrEqualExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _GreaterThanOrEqualExpression;
    }
    export class _LessThanExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            field?: string;
        } & (({
            integer_value?: number;
            float_value?: never;
        } | {
            integer_value?: never;
            float_value?: number;
        }))));
        get field(): string;
        set field(value: string);
        get integer_value(): number;
        set integer_value(value: number);
        get has_integer_value(): boolean;
        get float_value(): number;
        set float_value(value: number);
        get has_float_value(): boolean;
        get value(): "none" | "integer_value" | "float_value";
        static fromObject(data: {
            field?: string;
            integer_value?: number;
            float_value?: number;
        }): _LessThanExpression;
        toObject(): {
            field?: string;
            integer_value?: number;
            float_value?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _LessThanExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _LessThanExpression;
    }
    export class _LessThanOrEqualExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            field?: string;
        } & (({
            integer_value?: number;
            float_value?: never;
        } | {
            integer_value?: never;
            float_value?: number;
        }))));
        get field(): string;
        set field(value: string);
        get integer_value(): number;
        set integer_value(value: number);
        get has_integer_value(): boolean;
        get float_value(): number;
        set float_value(value: number);
        get has_float_value(): boolean;
        get value(): "none" | "integer_value" | "float_value";
        static fromObject(data: {
            field?: string;
            integer_value?: number;
            float_value?: number;
        }): _LessThanOrEqualExpression;
        toObject(): {
            field?: string;
            integer_value?: number;
            float_value?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _LessThanOrEqualExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _LessThanOrEqualExpression;
    }
    export class _ListContainsExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            field?: string;
        } & (({
            string_value?: string;
        }))));
        get field(): string;
        set field(value: string);
        get string_value(): string;
        set string_value(value: string);
        get has_string_value(): boolean;
        get value(): "none" | "string_value";
        static fromObject(data: {
            field?: string;
            string_value?: string;
        }): _ListContainsExpression;
        toObject(): {
            field?: string;
            string_value?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _ListContainsExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _ListContainsExpression;
    }
    export class _IdInSetExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            ids?: string[];
        });
        get ids(): string[];
        set ids(value: string[]);
        static fromObject(data: {
            ids?: string[];
        }): _IdInSetExpression;
        toObject(): {
            ids?: string[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _IdInSetExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _IdInSetExpression;
    }
    export class _FilterExpression extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            equals_expression?: _EqualsExpression;
            and_expression?: never;
            or_expression?: never;
            not_expression?: never;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: never;
            less_than_expression?: never;
            less_than_or_equal_expression?: never;
            list_contains_expression?: never;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: _AndExpression;
            or_expression?: never;
            not_expression?: never;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: never;
            less_than_expression?: never;
            less_than_or_equal_expression?: never;
            list_contains_expression?: never;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: never;
            or_expression?: _OrExpression;
            not_expression?: never;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: never;
            less_than_expression?: never;
            less_than_or_equal_expression?: never;
            list_contains_expression?: never;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: never;
            or_expression?: never;
            not_expression?: _NotExpression;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: never;
            less_than_expression?: never;
            less_than_or_equal_expression?: never;
            list_contains_expression?: never;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: never;
            or_expression?: never;
            not_expression?: never;
            greater_than_expression?: _GreaterThanExpression;
            greater_than_or_equal_expression?: never;
            less_than_expression?: never;
            less_than_or_equal_expression?: never;
            list_contains_expression?: never;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: never;
            or_expression?: never;
            not_expression?: never;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: _GreaterThanOrEqualExpression;
            less_than_expression?: never;
            less_than_or_equal_expression?: never;
            list_contains_expression?: never;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: never;
            or_expression?: never;
            not_expression?: never;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: never;
            less_than_expression?: _LessThanExpression;
            less_than_or_equal_expression?: never;
            list_contains_expression?: never;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: never;
            or_expression?: never;
            not_expression?: never;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: never;
            less_than_expression?: never;
            less_than_or_equal_expression?: _LessThanOrEqualExpression;
            list_contains_expression?: never;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: never;
            or_expression?: never;
            not_expression?: never;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: never;
            less_than_expression?: never;
            less_than_or_equal_expression?: never;
            list_contains_expression?: _ListContainsExpression;
            id_in_set_expression?: never;
        } | {
            equals_expression?: never;
            and_expression?: never;
            or_expression?: never;
            not_expression?: never;
            greater_than_expression?: never;
            greater_than_or_equal_expression?: never;
            less_than_expression?: never;
            less_than_or_equal_expression?: never;
            list_contains_expression?: never;
            id_in_set_expression?: _IdInSetExpression;
        }))));
        get equals_expression(): _EqualsExpression;
        set equals_expression(value: _EqualsExpression);
        get has_equals_expression(): boolean;
        get and_expression(): _AndExpression;
        set and_expression(value: _AndExpression);
        get has_and_expression(): boolean;
        get or_expression(): _OrExpression;
        set or_expression(value: _OrExpression);
        get has_or_expression(): boolean;
        get not_expression(): _NotExpression;
        set not_expression(value: _NotExpression);
        get has_not_expression(): boolean;
        get greater_than_expression(): _GreaterThanExpression;
        set greater_than_expression(value: _GreaterThanExpression);
        get has_greater_than_expression(): boolean;
        get greater_than_or_equal_expression(): _GreaterThanOrEqualExpression;
        set greater_than_or_equal_expression(value: _GreaterThanOrEqualExpression);
        get has_greater_than_or_equal_expression(): boolean;
        get less_than_expression(): _LessThanExpression;
        set less_than_expression(value: _LessThanExpression);
        get has_less_than_expression(): boolean;
        get less_than_or_equal_expression(): _LessThanOrEqualExpression;
        set less_than_or_equal_expression(value: _LessThanOrEqualExpression);
        get has_less_than_or_equal_expression(): boolean;
        get list_contains_expression(): _ListContainsExpression;
        set list_contains_expression(value: _ListContainsExpression);
        get has_list_contains_expression(): boolean;
        get id_in_set_expression(): _IdInSetExpression;
        set id_in_set_expression(value: _IdInSetExpression);
        get has_id_in_set_expression(): boolean;
        get expression(): "none" | "equals_expression" | "and_expression" | "or_expression" | "not_expression" | "greater_than_expression" | "greater_than_or_equal_expression" | "less_than_expression" | "less_than_or_equal_expression" | "list_contains_expression" | "id_in_set_expression";
        static fromObject(data: {
            equals_expression?: ReturnType<typeof _EqualsExpression.prototype.toObject>;
            and_expression?: ReturnType<typeof _AndExpression.prototype.toObject>;
            or_expression?: ReturnType<typeof _OrExpression.prototype.toObject>;
            not_expression?: ReturnType<typeof _NotExpression.prototype.toObject>;
            greater_than_expression?: ReturnType<typeof _GreaterThanExpression.prototype.toObject>;
            greater_than_or_equal_expression?: ReturnType<typeof _GreaterThanOrEqualExpression.prototype.toObject>;
            less_than_expression?: ReturnType<typeof _LessThanExpression.prototype.toObject>;
            less_than_or_equal_expression?: ReturnType<typeof _LessThanOrEqualExpression.prototype.toObject>;
            list_contains_expression?: ReturnType<typeof _ListContainsExpression.prototype.toObject>;
            id_in_set_expression?: ReturnType<typeof _IdInSetExpression.prototype.toObject>;
        }): _FilterExpression;
        toObject(): {
            equals_expression?: ReturnType<typeof _EqualsExpression.prototype.toObject>;
            and_expression?: ReturnType<typeof _AndExpression.prototype.toObject>;
            or_expression?: ReturnType<typeof _OrExpression.prototype.toObject>;
            not_expression?: ReturnType<typeof _NotExpression.prototype.toObject>;
            greater_than_expression?: ReturnType<typeof _GreaterThanExpression.prototype.toObject>;
            greater_than_or_equal_expression?: ReturnType<typeof _GreaterThanOrEqualExpression.prototype.toObject>;
            less_than_expression?: ReturnType<typeof _LessThanExpression.prototype.toObject>;
            less_than_or_equal_expression?: ReturnType<typeof _LessThanOrEqualExpression.prototype.toObject>;
            list_contains_expression?: ReturnType<typeof _ListContainsExpression.prototype.toObject>;
            id_in_set_expression?: ReturnType<typeof _IdInSetExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _FilterExpression;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _FilterExpression;
    }
    export class _NoScoreThreshold extends pb_1.Message {
        #private;
        constructor(data?: any[] | {});
        static fromObject(data: {}): _NoScoreThreshold;
        toObject(): {};
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _NoScoreThreshold;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _NoScoreThreshold;
    }
    export class _SearchRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            index_name?: string;
            top_k?: number;
            query_vector?: _Vector;
            metadata_fields?: _MetadataRequest;
            filter?: _FilterExpression;
        } & (({
            score_threshold?: number;
            no_score_threshold?: never;
        } | {
            score_threshold?: never;
            no_score_threshold?: _NoScoreThreshold;
        }))));
        get index_name(): string;
        set index_name(value: string);
        get top_k(): number;
        set top_k(value: number);
        get query_vector(): _Vector;
        set query_vector(value: _Vector);
        get has_query_vector(): boolean;
        get metadata_fields(): _MetadataRequest;
        set metadata_fields(value: _MetadataRequest);
        get has_metadata_fields(): boolean;
        get score_threshold(): number;
        set score_threshold(value: number);
        get has_score_threshold(): boolean;
        get no_score_threshold(): _NoScoreThreshold;
        set no_score_threshold(value: _NoScoreThreshold);
        get has_no_score_threshold(): boolean;
        get filter(): _FilterExpression;
        set filter(value: _FilterExpression);
        get has_filter(): boolean;
        get threshold(): "none" | "score_threshold" | "no_score_threshold";
        static fromObject(data: {
            index_name?: string;
            top_k?: number;
            query_vector?: ReturnType<typeof _Vector.prototype.toObject>;
            metadata_fields?: ReturnType<typeof _MetadataRequest.prototype.toObject>;
            score_threshold?: number;
            no_score_threshold?: ReturnType<typeof _NoScoreThreshold.prototype.toObject>;
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        }): _SearchRequest;
        toObject(): {
            index_name?: string;
            top_k?: number;
            query_vector?: ReturnType<typeof _Vector.prototype.toObject>;
            metadata_fields?: ReturnType<typeof _MetadataRequest.prototype.toObject>;
            score_threshold?: number;
            no_score_threshold?: ReturnType<typeof _NoScoreThreshold.prototype.toObject>;
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SearchRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _SearchRequest;
    }
    export class _SearchAndFetchVectorsRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            index_name?: string;
            top_k?: number;
            query_vector?: _Vector;
            metadata_fields?: _MetadataRequest;
            filter?: _FilterExpression;
        } & (({
            score_threshold?: number;
            no_score_threshold?: never;
        } | {
            score_threshold?: never;
            no_score_threshold?: _NoScoreThreshold;
        }))));
        get index_name(): string;
        set index_name(value: string);
        get top_k(): number;
        set top_k(value: number);
        get query_vector(): _Vector;
        set query_vector(value: _Vector);
        get has_query_vector(): boolean;
        get metadata_fields(): _MetadataRequest;
        set metadata_fields(value: _MetadataRequest);
        get has_metadata_fields(): boolean;
        get score_threshold(): number;
        set score_threshold(value: number);
        get has_score_threshold(): boolean;
        get no_score_threshold(): _NoScoreThreshold;
        set no_score_threshold(value: _NoScoreThreshold);
        get has_no_score_threshold(): boolean;
        get filter(): _FilterExpression;
        set filter(value: _FilterExpression);
        get has_filter(): boolean;
        get threshold(): "none" | "score_threshold" | "no_score_threshold";
        static fromObject(data: {
            index_name?: string;
            top_k?: number;
            query_vector?: ReturnType<typeof _Vector.prototype.toObject>;
            metadata_fields?: ReturnType<typeof _MetadataRequest.prototype.toObject>;
            score_threshold?: number;
            no_score_threshold?: ReturnType<typeof _NoScoreThreshold.prototype.toObject>;
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        }): _SearchAndFetchVectorsRequest;
        toObject(): {
            index_name?: string;
            top_k?: number;
            query_vector?: ReturnType<typeof _Vector.prototype.toObject>;
            metadata_fields?: ReturnType<typeof _MetadataRequest.prototype.toObject>;
            score_threshold?: number;
            no_score_threshold?: ReturnType<typeof _NoScoreThreshold.prototype.toObject>;
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SearchAndFetchVectorsRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _SearchAndFetchVectorsRequest;
    }
    export class _SearchHit extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            id?: string;
            score?: number;
            metadata?: _Metadata[];
        });
        get id(): string;
        set id(value: string);
        get score(): number;
        set score(value: number);
        get metadata(): _Metadata[];
        set metadata(value: _Metadata[]);
        static fromObject(data: {
            id?: string;
            score?: number;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
        }): _SearchHit;
        toObject(): {
            id?: string;
            score?: number;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SearchHit;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _SearchHit;
    }
    export class _SearchAndFetchVectorsHit extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            id?: string;
            score?: number;
            metadata?: _Metadata[];
            vector?: _Vector;
        });
        get id(): string;
        set id(value: string);
        get score(): number;
        set score(value: number);
        get metadata(): _Metadata[];
        set metadata(value: _Metadata[]);
        get vector(): _Vector;
        set vector(value: _Vector);
        get has_vector(): boolean;
        static fromObject(data: {
            id?: string;
            score?: number;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
            vector?: ReturnType<typeof _Vector.prototype.toObject>;
        }): _SearchAndFetchVectorsHit;
        toObject(): {
            id?: string;
            score?: number;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
            vector?: ReturnType<typeof _Vector.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SearchAndFetchVectorsHit;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _SearchAndFetchVectorsHit;
    }
    export class _SearchResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            hits?: _SearchHit[];
        });
        get hits(): _SearchHit[];
        set hits(value: _SearchHit[]);
        static fromObject(data: {
            hits?: ReturnType<typeof _SearchHit.prototype.toObject>[];
        }): _SearchResponse;
        toObject(): {
            hits?: ReturnType<typeof _SearchHit.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SearchResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _SearchResponse;
    }
    export class _SearchAndFetchVectorsResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            hits?: _SearchAndFetchVectorsHit[];
        });
        get hits(): _SearchAndFetchVectorsHit[];
        set hits(value: _SearchAndFetchVectorsHit[]);
        static fromObject(data: {
            hits?: ReturnType<typeof _SearchAndFetchVectorsHit.prototype.toObject>[];
        }): _SearchAndFetchVectorsResponse;
        toObject(): {
            hits?: ReturnType<typeof _SearchAndFetchVectorsHit.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SearchAndFetchVectorsResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _SearchAndFetchVectorsResponse;
    }
    export class _GetItemMetadataBatchRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            index_name?: string;
            ids?: string[];
            metadata_fields?: _MetadataRequest;
            filter?: _FilterExpression;
        });
        get index_name(): string;
        set index_name(value: string);
        get ids(): string[];
        set ids(value: string[]);
        get metadata_fields(): _MetadataRequest;
        set metadata_fields(value: _MetadataRequest);
        get has_metadata_fields(): boolean;
        get filter(): _FilterExpression;
        set filter(value: _FilterExpression);
        get has_filter(): boolean;
        static fromObject(data: {
            index_name?: string;
            ids?: string[];
            metadata_fields?: ReturnType<typeof _MetadataRequest.prototype.toObject>;
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        }): _GetItemMetadataBatchRequest;
        toObject(): {
            index_name?: string;
            ids?: string[];
            metadata_fields?: ReturnType<typeof _MetadataRequest.prototype.toObject>;
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _GetItemMetadataBatchRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _GetItemMetadataBatchRequest;
    }
    export class _ItemMetadataResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            id?: string;
            metadata?: _Metadata[];
        } & (({
            miss?: _ItemMetadataResponse._Miss;
            hit?: never;
        } | {
            miss?: never;
            hit?: _ItemMetadataResponse._Hit;
        }))));
        get miss(): _ItemMetadataResponse._Miss;
        set miss(value: _ItemMetadataResponse._Miss);
        get has_miss(): boolean;
        get hit(): _ItemMetadataResponse._Hit;
        set hit(value: _ItemMetadataResponse._Hit);
        get has_hit(): boolean;
        get id(): string;
        set id(value: string);
        get metadata(): _Metadata[];
        set metadata(value: _Metadata[]);
        get response(): "none" | "miss" | "hit";
        static fromObject(data: {
            miss?: ReturnType<typeof _ItemMetadataResponse._Miss.prototype.toObject>;
            hit?: ReturnType<typeof _ItemMetadataResponse._Hit.prototype.toObject>;
            id?: string;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
        }): _ItemMetadataResponse;
        toObject(): {
            miss?: ReturnType<typeof _ItemMetadataResponse._Miss.prototype.toObject>;
            hit?: ReturnType<typeof _ItemMetadataResponse._Hit.prototype.toObject>;
            id?: string;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _ItemMetadataResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _ItemMetadataResponse;
    }
    export namespace _ItemMetadataResponse {
        class _Miss extends pb_1.Message {
            #private;
            constructor(data?: any[] | {});
            static fromObject(data: {}): _Miss;
            toObject(): {};
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _Miss;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): _Miss;
        }
        class _Hit extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                id?: string;
                metadata?: _Metadata[];
            });
            get id(): string;
            set id(value: string);
            get metadata(): _Metadata[];
            set metadata(value: _Metadata[]);
            static fromObject(data: {
                id?: string;
                metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
            }): _Hit;
            toObject(): {
                id?: string;
                metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _Hit;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): _Hit;
        }
    }
    export class _GetItemMetadataBatchResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            item_metadata_response?: _ItemMetadataResponse[];
        });
        get item_metadata_response(): _ItemMetadataResponse[];
        set item_metadata_response(value: _ItemMetadataResponse[]);
        static fromObject(data: {
            item_metadata_response?: ReturnType<typeof _ItemMetadataResponse.prototype.toObject>[];
        }): _GetItemMetadataBatchResponse;
        toObject(): {
            item_metadata_response?: ReturnType<typeof _ItemMetadataResponse.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _GetItemMetadataBatchResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _GetItemMetadataBatchResponse;
    }
    export class _GetItemBatchRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            index_name?: string;
            ids?: string[];
            metadata_fields?: _MetadataRequest;
            filter?: _FilterExpression;
        });
        get index_name(): string;
        set index_name(value: string);
        get ids(): string[];
        set ids(value: string[]);
        get metadata_fields(): _MetadataRequest;
        set metadata_fields(value: _MetadataRequest);
        get has_metadata_fields(): boolean;
        get filter(): _FilterExpression;
        set filter(value: _FilterExpression);
        get has_filter(): boolean;
        static fromObject(data: {
            index_name?: string;
            ids?: string[];
            metadata_fields?: ReturnType<typeof _MetadataRequest.prototype.toObject>;
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        }): _GetItemBatchRequest;
        toObject(): {
            index_name?: string;
            ids?: string[];
            metadata_fields?: ReturnType<typeof _MetadataRequest.prototype.toObject>;
            filter?: ReturnType<typeof _FilterExpression.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _GetItemBatchRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _GetItemBatchRequest;
    }
    export class _ItemResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            id?: string;
            vector?: _Vector;
            metadata?: _Metadata[];
        } & (({
            miss?: _ItemResponse._Miss;
            hit?: never;
        } | {
            miss?: never;
            hit?: _ItemResponse._Hit;
        }))));
        get miss(): _ItemResponse._Miss;
        set miss(value: _ItemResponse._Miss);
        get has_miss(): boolean;
        get hit(): _ItemResponse._Hit;
        set hit(value: _ItemResponse._Hit);
        get has_hit(): boolean;
        get id(): string;
        set id(value: string);
        get vector(): _Vector;
        set vector(value: _Vector);
        get has_vector(): boolean;
        get metadata(): _Metadata[];
        set metadata(value: _Metadata[]);
        get response(): "none" | "miss" | "hit";
        static fromObject(data: {
            miss?: ReturnType<typeof _ItemResponse._Miss.prototype.toObject>;
            hit?: ReturnType<typeof _ItemResponse._Hit.prototype.toObject>;
            id?: string;
            vector?: ReturnType<typeof _Vector.prototype.toObject>;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
        }): _ItemResponse;
        toObject(): {
            miss?: ReturnType<typeof _ItemResponse._Miss.prototype.toObject>;
            hit?: ReturnType<typeof _ItemResponse._Hit.prototype.toObject>;
            id?: string;
            vector?: ReturnType<typeof _Vector.prototype.toObject>;
            metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _ItemResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _ItemResponse;
    }
    export namespace _ItemResponse {
        class _Miss extends pb_1.Message {
            #private;
            constructor(data?: any[] | {});
            static fromObject(data: {}): _Miss;
            toObject(): {};
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _Miss;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): _Miss;
        }
        class _Hit extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                id?: string;
                vector?: _Vector;
                metadata?: _Metadata[];
            });
            get id(): string;
            set id(value: string);
            get vector(): _Vector;
            set vector(value: _Vector);
            get has_vector(): boolean;
            get metadata(): _Metadata[];
            set metadata(value: _Metadata[]);
            static fromObject(data: {
                id?: string;
                vector?: ReturnType<typeof _Vector.prototype.toObject>;
                metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
            }): _Hit;
            toObject(): {
                id?: string;
                vector?: ReturnType<typeof _Vector.prototype.toObject>;
                metadata?: ReturnType<typeof _Metadata.prototype.toObject>[];
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _Hit;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): _Hit;
        }
    }
    export class _GetItemBatchResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            item_response?: _ItemResponse[];
        });
        get item_response(): _ItemResponse[];
        set item_response(value: _ItemResponse[]);
        static fromObject(data: {
            item_response?: ReturnType<typeof _ItemResponse.prototype.toObject>[];
        }): _GetItemBatchResponse;
        toObject(): {
            item_response?: ReturnType<typeof _ItemResponse.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _GetItemBatchResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _GetItemBatchResponse;
    }
    export class _CountItemsRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            index_name?: string;
        } & (({
            all?: _CountItemsRequest.All;
        }))));
        get index_name(): string;
        set index_name(value: string);
        get all(): _CountItemsRequest.All;
        set all(value: _CountItemsRequest.All);
        get has_all(): boolean;
        get filter(): "none" | "all";
        static fromObject(data: {
            index_name?: string;
            all?: ReturnType<typeof _CountItemsRequest.All.prototype.toObject>;
        }): _CountItemsRequest;
        toObject(): {
            index_name?: string;
            all?: ReturnType<typeof _CountItemsRequest.All.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _CountItemsRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _CountItemsRequest;
    }
    export namespace _CountItemsRequest {
        class All extends pb_1.Message {
            #private;
            constructor(data?: any[] | {});
            static fromObject(data: {}): All;
            toObject(): {};
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): All;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): All;
        }
    }
    export class _CountItemsResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            item_count?: number;
        });
        get item_count(): number;
        set item_count(value: number);
        static fromObject(data: {
            item_count?: number;
        }): _CountItemsResponse;
        toObject(): {
            item_count?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _CountItemsResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): _CountItemsResponse;
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    export abstract class UnimplementedVectorIndexService {
        static definition: {
            UpsertItemBatch: {
                path: string;
                requestStream: boolean;
                responseStream: boolean;
                requestSerialize: (message: _UpsertItemBatchRequest) => Buffer;
                requestDeserialize: (bytes: Buffer) => _UpsertItemBatchRequest;
                responseSerialize: (message: _UpsertItemBatchResponse) => Buffer;
                responseDeserialize: (bytes: Buffer) => _UpsertItemBatchResponse;
            };
            DeleteItemBatch: {
                path: string;
                requestStream: boolean;
                responseStream: boolean;
                requestSerialize: (message: _DeleteItemBatchRequest) => Buffer;
                requestDeserialize: (bytes: Buffer) => _DeleteItemBatchRequest;
                responseSerialize: (message: _DeleteItemBatchResponse) => Buffer;
                responseDeserialize: (bytes: Buffer) => _DeleteItemBatchResponse;
            };
            Search: {
                path: string;
                requestStream: boolean;
                responseStream: boolean;
                requestSerialize: (message: _SearchRequest) => Buffer;
                requestDeserialize: (bytes: Buffer) => _SearchRequest;
                responseSerialize: (message: _SearchResponse) => Buffer;
                responseDeserialize: (bytes: Buffer) => _SearchResponse;
            };
            SearchAndFetchVectors: {
                path: string;
                requestStream: boolean;
                responseStream: boolean;
                requestSerialize: (message: _SearchAndFetchVectorsRequest) => Buffer;
                requestDeserialize: (bytes: Buffer) => _SearchAndFetchVectorsRequest;
                responseSerialize: (message: _SearchAndFetchVectorsResponse) => Buffer;
                responseDeserialize: (bytes: Buffer) => _SearchAndFetchVectorsResponse;
            };
            GetItemMetadataBatch: {
                path: string;
                requestStream: boolean;
                responseStream: boolean;
                requestSerialize: (message: _GetItemMetadataBatchRequest) => Buffer;
                requestDeserialize: (bytes: Buffer) => _GetItemMetadataBatchRequest;
                responseSerialize: (message: _GetItemMetadataBatchResponse) => Buffer;
                responseDeserialize: (bytes: Buffer) => _GetItemMetadataBatchResponse;
            };
            GetItemBatch: {
                path: string;
                requestStream: boolean;
                responseStream: boolean;
                requestSerialize: (message: _GetItemBatchRequest) => Buffer;
                requestDeserialize: (bytes: Buffer) => _GetItemBatchRequest;
                responseSerialize: (message: _GetItemBatchResponse) => Buffer;
                responseDeserialize: (bytes: Buffer) => _GetItemBatchResponse;
            };
            CountItems: {
                path: string;
                requestStream: boolean;
                responseStream: boolean;
                requestSerialize: (message: _CountItemsRequest) => Buffer;
                requestDeserialize: (bytes: Buffer) => _CountItemsRequest;
                responseSerialize: (message: _CountItemsResponse) => Buffer;
                responseDeserialize: (bytes: Buffer) => _CountItemsResponse;
            };
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract UpsertItemBatch(call: grpc_1.ServerUnaryCall<_UpsertItemBatchRequest, _UpsertItemBatchResponse>, callback: grpc_1.sendUnaryData<_UpsertItemBatchResponse>): void;
        abstract DeleteItemBatch(call: grpc_1.ServerUnaryCall<_DeleteItemBatchRequest, _DeleteItemBatchResponse>, callback: grpc_1.sendUnaryData<_DeleteItemBatchResponse>): void;
        abstract Search(call: grpc_1.ServerUnaryCall<_SearchRequest, _SearchResponse>, callback: grpc_1.sendUnaryData<_SearchResponse>): void;
        abstract SearchAndFetchVectors(call: grpc_1.ServerUnaryCall<_SearchAndFetchVectorsRequest, _SearchAndFetchVectorsResponse>, callback: grpc_1.sendUnaryData<_SearchAndFetchVectorsResponse>): void;
        abstract GetItemMetadataBatch(call: grpc_1.ServerUnaryCall<_GetItemMetadataBatchRequest, _GetItemMetadataBatchResponse>, callback: grpc_1.sendUnaryData<_GetItemMetadataBatchResponse>): void;
        abstract GetItemBatch(call: grpc_1.ServerUnaryCall<_GetItemBatchRequest, _GetItemBatchResponse>, callback: grpc_1.sendUnaryData<_GetItemBatchResponse>): void;
        abstract CountItems(call: grpc_1.ServerUnaryCall<_CountItemsRequest, _CountItemsResponse>, callback: grpc_1.sendUnaryData<_CountItemsResponse>): void;
    }
    const VectorIndexClient_base: grpc_1.ServiceClientConstructor;
    export class VectorIndexClient extends VectorIndexClient_base {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>);
        UpsertItemBatch: GrpcUnaryServiceInterface<_UpsertItemBatchRequest, _UpsertItemBatchResponse>;
        DeleteItemBatch: GrpcUnaryServiceInterface<_DeleteItemBatchRequest, _DeleteItemBatchResponse>;
        Search: GrpcUnaryServiceInterface<_SearchRequest, _SearchResponse>;
        SearchAndFetchVectors: GrpcUnaryServiceInterface<_SearchAndFetchVectorsRequest, _SearchAndFetchVectorsResponse>;
        GetItemMetadataBatch: GrpcUnaryServiceInterface<_GetItemMetadataBatchRequest, _GetItemMetadataBatchResponse>;
        GetItemBatch: GrpcUnaryServiceInterface<_GetItemBatchRequest, _GetItemBatchResponse>;
        CountItems: GrpcUnaryServiceInterface<_CountItemsRequest, _CountItemsResponse>;
    }
    export {};
}
