"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vectorindex = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: vectorindex.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
var vectorindex;
(function (vectorindex) {
    var __Item_one_of_decls, __UpsertItemBatchRequest_one_of_decls, __UpsertItemBatchResponse_one_of_decls, __DeleteItemBatchRequest_one_of_decls, __DeleteItemBatchResponse_one_of_decls, __Vector_one_of_decls, __Metadata_one_of_decls, __MetadataRequest_one_of_decls, __AndExpression_one_of_decls, __OrExpression_one_of_decls, __NotExpression_one_of_decls, __EqualsExpression_one_of_decls, __GreaterThanExpression_one_of_decls, __GreaterThanOrEqualExpression_one_of_decls, __LessThanExpression_one_of_decls, __LessThanOrEqualExpression_one_of_decls, __ListContainsExpression_one_of_decls, __IdInSetExpression_one_of_decls, __FilterExpression_one_of_decls, __NoScoreThreshold_one_of_decls, __SearchRequest_one_of_decls, __SearchAndFetchVectorsRequest_one_of_decls, __SearchHit_one_of_decls, __SearchAndFetchVectorsHit_one_of_decls, __SearchResponse_one_of_decls, __SearchAndFetchVectorsResponse_one_of_decls, __GetItemMetadataBatchRequest_one_of_decls, __ItemMetadataResponse_one_of_decls, __GetItemMetadataBatchResponse_one_of_decls, __GetItemBatchRequest_one_of_decls, __ItemResponse_one_of_decls, __GetItemBatchResponse_one_of_decls, __CountItemsRequest_one_of_decls, __CountItemsResponse_one_of_decls;
    class _Item extends pb_1.Message {
        constructor(data) {
            super();
            __Item_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, __Item_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("vector" in data && data.vector != undefined) {
                    this.vector = data.vector;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get vector() {
            return pb_1.Message.getWrapperField(this, _Vector, 2);
        }
        set vector(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_vector() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get metadata() {
            return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 3);
        }
        set metadata(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data) {
            const message = new _Item({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.vector != null) {
                message.vector = _Vector.fromObject(data.vector);
            }
            if (data.metadata != null) {
                message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.vector != null) {
                data.vector = this.vector.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_vector)
                writer.writeMessage(2, this.vector, () => this.vector.serialize(writer));
            if (this.metadata.length)
                writer.writeRepeatedMessage(3, this.metadata, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Item();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.vector, () => message.vector = _Vector.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 3, _Metadata.deserialize(reader), _Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Item.deserialize(bytes);
        }
    }
    __Item_one_of_decls = new WeakMap();
    vectorindex._Item = _Item;
    class _UpsertItemBatchRequest extends pb_1.Message {
        constructor(data) {
            super();
            __UpsertItemBatchRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, __UpsertItemBatchRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, _Item, 2);
        }
        set items(value) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data) {
            const message = new _UpsertItemBatchRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.items != null) {
                message.items = data.items.map(item => _Item.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.items != null) {
                data.items = this.items.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.items.length)
                writer.writeRepeatedMessage(2, this.items, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _UpsertItemBatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 2, _Item.deserialize(reader), _Item));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _UpsertItemBatchRequest.deserialize(bytes);
        }
    }
    __UpsertItemBatchRequest_one_of_decls = new WeakMap();
    vectorindex._UpsertItemBatchRequest = _UpsertItemBatchRequest;
    class _UpsertItemBatchResponse extends pb_1.Message {
        constructor(data) {
            super();
            __UpsertItemBatchResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __UpsertItemBatchResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_indices" in data && data.error_indices != undefined) {
                    this.error_indices = data.error_indices;
                }
            }
        }
        get error_indices() {
            return pb_1.Message.getFieldWithDefault(this, 1, []);
        }
        set error_indices(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _UpsertItemBatchResponse({});
            if (data.error_indices != null) {
                message.error_indices = data.error_indices;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.error_indices != null) {
                data.error_indices = this.error_indices;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_indices.length)
                writer.writePackedUint32(1, this.error_indices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _UpsertItemBatchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_indices = reader.readPackedUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _UpsertItemBatchResponse.deserialize(bytes);
        }
    }
    __UpsertItemBatchResponse_one_of_decls = new WeakMap();
    vectorindex._UpsertItemBatchResponse = _UpsertItemBatchResponse;
    class _DeleteItemBatchRequest extends pb_1.Message {
        constructor(data) {
            super();
            __DeleteItemBatchRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, __DeleteItemBatchRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []);
        }
        set ids(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get filter() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 3);
        }
        set filter(value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_filter() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data) {
            const message = new _DeleteItemBatchRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.ids != null) {
                message.ids = data.ids;
            }
            if (data.filter != null) {
                message.filter = _FilterExpression.fromObject(data.filter);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.ids != null) {
                data.ids = this.ids;
            }
            if (this.filter != null) {
                data.filter = this.filter.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.ids.length)
                writer.writeRepeatedString(2, this.ids);
            if (this.has_filter)
                writer.writeMessage(3, this.filter, () => this.filter.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteItemBatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.filter, () => message.filter = _FilterExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _DeleteItemBatchRequest.deserialize(bytes);
        }
    }
    __DeleteItemBatchRequest_one_of_decls = new WeakMap();
    vectorindex._DeleteItemBatchRequest = _DeleteItemBatchRequest;
    class _DeleteItemBatchResponse extends pb_1.Message {
        constructor(data) {
            super();
            __DeleteItemBatchResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __DeleteItemBatchResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _DeleteItemBatchResponse({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteItemBatchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _DeleteItemBatchResponse.deserialize(bytes);
        }
    }
    __DeleteItemBatchResponse_one_of_decls = new WeakMap();
    vectorindex._DeleteItemBatchResponse = _DeleteItemBatchResponse;
    class _Vector extends pb_1.Message {
        constructor(data) {
            super();
            __Vector_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __Vector_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("elements" in data && data.elements != undefined) {
                    this.elements = data.elements;
                }
            }
        }
        get elements() {
            return pb_1.Message.getFieldWithDefault(this, 1, []);
        }
        set elements(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _Vector({});
            if (data.elements != null) {
                message.elements = data.elements;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.elements != null) {
                data.elements = this.elements;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.elements.length)
                writer.writePackedFloat(1, this.elements);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Vector();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.elements = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Vector.deserialize(bytes);
        }
    }
    __Vector_one_of_decls = new WeakMap();
    vectorindex._Vector = _Vector;
    class _Metadata extends pb_1.Message {
        constructor(data) {
            super();
            __Metadata_one_of_decls.set(this, [[2, 3, 4, 5, 6]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __Metadata_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
                if ("integer_value" in data && data.integer_value != undefined) {
                    this.integer_value = data.integer_value;
                }
                if ("double_value" in data && data.double_value != undefined) {
                    this.double_value = data.double_value;
                }
                if ("boolean_value" in data && data.boolean_value != undefined) {
                    this.boolean_value = data.boolean_value;
                }
                if ("list_of_strings_value" in data && data.list_of_strings_value != undefined) {
                    this.list_of_strings_value = data.list_of_strings_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set field(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get string_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set string_value(value) {
            pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, __Metadata_one_of_decls, "f")[0], value);
        }
        get has_string_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get integer_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set integer_value(value) {
            pb_1.Message.setOneofField(this, 3, __classPrivateFieldGet(this, __Metadata_one_of_decls, "f")[0], value);
        }
        get has_integer_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get double_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set double_value(value) {
            pb_1.Message.setOneofField(this, 4, __classPrivateFieldGet(this, __Metadata_one_of_decls, "f")[0], value);
        }
        get has_double_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get boolean_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, false);
        }
        set boolean_value(value) {
            pb_1.Message.setOneofField(this, 5, __classPrivateFieldGet(this, __Metadata_one_of_decls, "f")[0], value);
        }
        get has_boolean_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get list_of_strings_value() {
            return pb_1.Message.getWrapperField(this, _Metadata._ListOfStrings, 6);
        }
        set list_of_strings_value(value) {
            pb_1.Message.setOneofWrapperField(this, 6, __classPrivateFieldGet(this, __Metadata_one_of_decls, "f")[0], value);
        }
        get has_list_of_strings_value() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get value() {
            const cases = {
                0: "none",
                2: "string_value",
                3: "integer_value",
                4: "double_value",
                5: "boolean_value",
                6: "list_of_strings_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6])];
        }
        static fromObject(data) {
            const message = new _Metadata({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            if (data.integer_value != null) {
                message.integer_value = data.integer_value;
            }
            if (data.double_value != null) {
                message.double_value = data.double_value;
            }
            if (data.boolean_value != null) {
                message.boolean_value = data.boolean_value;
            }
            if (data.list_of_strings_value != null) {
                message.list_of_strings_value = _Metadata._ListOfStrings.fromObject(data.list_of_strings_value);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            if (this.integer_value != null) {
                data.integer_value = this.integer_value;
            }
            if (this.double_value != null) {
                data.double_value = this.double_value;
            }
            if (this.boolean_value != null) {
                data.boolean_value = this.boolean_value;
            }
            if (this.list_of_strings_value != null) {
                data.list_of_strings_value = this.list_of_strings_value.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.has_string_value)
                writer.writeString(2, this.string_value);
            if (this.has_integer_value)
                writer.writeInt64(3, this.integer_value);
            if (this.has_double_value)
                writer.writeDouble(4, this.double_value);
            if (this.has_boolean_value)
                writer.writeBool(5, this.boolean_value);
            if (this.has_list_of_strings_value)
                writer.writeMessage(6, this.list_of_strings_value, () => this.list_of_strings_value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.string_value = reader.readString();
                        break;
                    case 3:
                        message.integer_value = reader.readInt64();
                        break;
                    case 4:
                        message.double_value = reader.readDouble();
                        break;
                    case 5:
                        message.boolean_value = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.list_of_strings_value, () => message.list_of_strings_value = _Metadata._ListOfStrings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Metadata.deserialize(bytes);
        }
    }
    __Metadata_one_of_decls = new WeakMap();
    vectorindex._Metadata = _Metadata;
    (function (_Metadata) {
        var __ListOfStrings_one_of_decls;
        class _ListOfStrings extends pb_1.Message {
            constructor(data) {
                super();
                __ListOfStrings_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __ListOfStrings_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("values" in data && data.values != undefined) {
                        this.values = data.values;
                    }
                }
            }
            get values() {
                return pb_1.Message.getFieldWithDefault(this, 1, []);
            }
            set values(value) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
                const message = new _ListOfStrings({});
                if (data.values != null) {
                    message.values = data.values;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.values != null) {
                    data.values = this.values;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.values.length)
                    writer.writeRepeatedString(1, this.values);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListOfStrings();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return _ListOfStrings.deserialize(bytes);
            }
        }
        __ListOfStrings_one_of_decls = new WeakMap();
        _Metadata._ListOfStrings = _ListOfStrings;
    })(_Metadata = vectorindex._Metadata || (vectorindex._Metadata = {}));
    class _MetadataRequest extends pb_1.Message {
        constructor(data) {
            super();
            __MetadataRequest_one_of_decls.set(this, [[2, 3]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __MetadataRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("some" in data && data.some != undefined) {
                    this.some = data.some;
                }
                if ("all" in data && data.all != undefined) {
                    this.all = data.all;
                }
            }
        }
        get some() {
            return pb_1.Message.getWrapperField(this, _MetadataRequest.Some, 2);
        }
        set some(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, __MetadataRequest_one_of_decls, "f")[0], value);
        }
        get has_some() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get all() {
            return pb_1.Message.getWrapperField(this, _MetadataRequest.All, 3);
        }
        set all(value) {
            pb_1.Message.setOneofWrapperField(this, 3, __classPrivateFieldGet(this, __MetadataRequest_one_of_decls, "f")[0], value);
        }
        get has_all() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get kind() {
            const cases = {
                0: "none",
                2: "some",
                3: "all"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data) {
            const message = new _MetadataRequest({});
            if (data.some != null) {
                message.some = _MetadataRequest.Some.fromObject(data.some);
            }
            if (data.all != null) {
                message.all = _MetadataRequest.All.fromObject(data.all);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.some != null) {
                data.some = this.some.toObject();
            }
            if (this.all != null) {
                data.all = this.all.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_some)
                writer.writeMessage(2, this.some, () => this.some.serialize(writer));
            if (this.has_all)
                writer.writeMessage(3, this.all, () => this.all.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _MetadataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.some, () => message.some = _MetadataRequest.Some.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.all, () => message.all = _MetadataRequest.All.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _MetadataRequest.deserialize(bytes);
        }
    }
    __MetadataRequest_one_of_decls = new WeakMap();
    vectorindex._MetadataRequest = _MetadataRequest;
    (function (_MetadataRequest) {
        var _Some_one_of_decls, _All_one_of_decls;
        class Some extends pb_1.Message {
            constructor(data) {
                super();
                _Some_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _Some_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("fields" in data && data.fields != undefined) {
                        this.fields = data.fields;
                    }
                }
            }
            get fields() {
                return pb_1.Message.getFieldWithDefault(this, 1, []);
            }
            set fields(value) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
                const message = new Some({});
                if (data.fields != null) {
                    message.fields = data.fields;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.fields != null) {
                    data.fields = this.fields;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.fields.length)
                    writer.writeRepeatedString(1, this.fields);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Some();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return Some.deserialize(bytes);
            }
        }
        _Some_one_of_decls = new WeakMap();
        _MetadataRequest.Some = Some;
        class All extends pb_1.Message {
            constructor(data) {
                super();
                _All_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _All_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data) {
                const message = new All({});
                return message;
            }
            toObject() {
                const data = {};
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new All();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return All.deserialize(bytes);
            }
        }
        _All_one_of_decls = new WeakMap();
        _MetadataRequest.All = All;
    })(_MetadataRequest = vectorindex._MetadataRequest || (vectorindex._MetadataRequest = {}));
    class _AndExpression extends pb_1.Message {
        constructor(data) {
            super();
            __AndExpression_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __AndExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("first_expression" in data && data.first_expression != undefined) {
                    this.first_expression = data.first_expression;
                }
                if ("second_expression" in data && data.second_expression != undefined) {
                    this.second_expression = data.second_expression;
                }
            }
        }
        get first_expression() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 1);
        }
        set first_expression(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_first_expression() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get second_expression() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 2);
        }
        set second_expression(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_second_expression() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data) {
            const message = new _AndExpression({});
            if (data.first_expression != null) {
                message.first_expression = _FilterExpression.fromObject(data.first_expression);
            }
            if (data.second_expression != null) {
                message.second_expression = _FilterExpression.fromObject(data.second_expression);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.first_expression != null) {
                data.first_expression = this.first_expression.toObject();
            }
            if (this.second_expression != null) {
                data.second_expression = this.second_expression.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_first_expression)
                writer.writeMessage(1, this.first_expression, () => this.first_expression.serialize(writer));
            if (this.has_second_expression)
                writer.writeMessage(2, this.second_expression, () => this.second_expression.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _AndExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.first_expression, () => message.first_expression = _FilterExpression.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.second_expression, () => message.second_expression = _FilterExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _AndExpression.deserialize(bytes);
        }
    }
    __AndExpression_one_of_decls = new WeakMap();
    vectorindex._AndExpression = _AndExpression;
    class _OrExpression extends pb_1.Message {
        constructor(data) {
            super();
            __OrExpression_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __OrExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("first_expression" in data && data.first_expression != undefined) {
                    this.first_expression = data.first_expression;
                }
                if ("second_expression" in data && data.second_expression != undefined) {
                    this.second_expression = data.second_expression;
                }
            }
        }
        get first_expression() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 1);
        }
        set first_expression(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_first_expression() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get second_expression() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 2);
        }
        set second_expression(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_second_expression() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data) {
            const message = new _OrExpression({});
            if (data.first_expression != null) {
                message.first_expression = _FilterExpression.fromObject(data.first_expression);
            }
            if (data.second_expression != null) {
                message.second_expression = _FilterExpression.fromObject(data.second_expression);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.first_expression != null) {
                data.first_expression = this.first_expression.toObject();
            }
            if (this.second_expression != null) {
                data.second_expression = this.second_expression.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_first_expression)
                writer.writeMessage(1, this.first_expression, () => this.first_expression.serialize(writer));
            if (this.has_second_expression)
                writer.writeMessage(2, this.second_expression, () => this.second_expression.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _OrExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.first_expression, () => message.first_expression = _FilterExpression.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.second_expression, () => message.second_expression = _FilterExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _OrExpression.deserialize(bytes);
        }
    }
    __OrExpression_one_of_decls = new WeakMap();
    vectorindex._OrExpression = _OrExpression;
    class _NotExpression extends pb_1.Message {
        constructor(data) {
            super();
            __NotExpression_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __NotExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("expression_to_negate" in data && data.expression_to_negate != undefined) {
                    this.expression_to_negate = data.expression_to_negate;
                }
            }
        }
        get expression_to_negate() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 1);
        }
        set expression_to_negate(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_expression_to_negate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data) {
            const message = new _NotExpression({});
            if (data.expression_to_negate != null) {
                message.expression_to_negate = _FilterExpression.fromObject(data.expression_to_negate);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.expression_to_negate != null) {
                data.expression_to_negate = this.expression_to_negate.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_expression_to_negate)
                writer.writeMessage(1, this.expression_to_negate, () => this.expression_to_negate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _NotExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.expression_to_negate, () => message.expression_to_negate = _FilterExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _NotExpression.deserialize(bytes);
        }
    }
    __NotExpression_one_of_decls = new WeakMap();
    vectorindex._NotExpression = _NotExpression;
    class _EqualsExpression extends pb_1.Message {
        constructor(data) {
            super();
            __EqualsExpression_one_of_decls.set(this, [[2, 3, 4, 5]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __EqualsExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
                if ("integer_value" in data && data.integer_value != undefined) {
                    this.integer_value = data.integer_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
                if ("boolean_value" in data && data.boolean_value != undefined) {
                    this.boolean_value = data.boolean_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set field(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get string_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set string_value(value) {
            pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, __EqualsExpression_one_of_decls, "f")[0], value);
        }
        get has_string_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get integer_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set integer_value(value) {
            pb_1.Message.setOneofField(this, 3, __classPrivateFieldGet(this, __EqualsExpression_one_of_decls, "f")[0], value);
        }
        get has_integer_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set float_value(value) {
            pb_1.Message.setOneofField(this, 4, __classPrivateFieldGet(this, __EqualsExpression_one_of_decls, "f")[0], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get boolean_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, false);
        }
        set boolean_value(value) {
            pb_1.Message.setOneofField(this, 5, __classPrivateFieldGet(this, __EqualsExpression_one_of_decls, "f")[0], value);
        }
        get has_boolean_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get value() {
            const cases = {
                0: "none",
                2: "string_value",
                3: "integer_value",
                4: "float_value",
                5: "boolean_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5])];
        }
        static fromObject(data) {
            const message = new _EqualsExpression({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            if (data.integer_value != null) {
                message.integer_value = data.integer_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            if (data.boolean_value != null) {
                message.boolean_value = data.boolean_value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            if (this.integer_value != null) {
                data.integer_value = this.integer_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            if (this.boolean_value != null) {
                data.boolean_value = this.boolean_value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.has_string_value)
                writer.writeString(2, this.string_value);
            if (this.has_integer_value)
                writer.writeInt64(3, this.integer_value);
            if (this.has_float_value)
                writer.writeFloat(4, this.float_value);
            if (this.has_boolean_value)
                writer.writeBool(5, this.boolean_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _EqualsExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.string_value = reader.readString();
                        break;
                    case 3:
                        message.integer_value = reader.readInt64();
                        break;
                    case 4:
                        message.float_value = reader.readFloat();
                        break;
                    case 5:
                        message.boolean_value = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _EqualsExpression.deserialize(bytes);
        }
    }
    __EqualsExpression_one_of_decls = new WeakMap();
    vectorindex._EqualsExpression = _EqualsExpression;
    class _GreaterThanExpression extends pb_1.Message {
        constructor(data) {
            super();
            __GreaterThanExpression_one_of_decls.set(this, [[2, 3]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __GreaterThanExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("integer_value" in data && data.integer_value != undefined) {
                    this.integer_value = data.integer_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set field(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get integer_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set integer_value(value) {
            pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, __GreaterThanExpression_one_of_decls, "f")[0], value);
        }
        get has_integer_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set float_value(value) {
            pb_1.Message.setOneofField(this, 3, __classPrivateFieldGet(this, __GreaterThanExpression_one_of_decls, "f")[0], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            const cases = {
                0: "none",
                2: "integer_value",
                3: "float_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data) {
            const message = new _GreaterThanExpression({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.integer_value != null) {
                message.integer_value = data.integer_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.integer_value != null) {
                data.integer_value = this.integer_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.has_integer_value)
                writer.writeInt64(2, this.integer_value);
            if (this.has_float_value)
                writer.writeFloat(3, this.float_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GreaterThanExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.integer_value = reader.readInt64();
                        break;
                    case 3:
                        message.float_value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _GreaterThanExpression.deserialize(bytes);
        }
    }
    __GreaterThanExpression_one_of_decls = new WeakMap();
    vectorindex._GreaterThanExpression = _GreaterThanExpression;
    class _GreaterThanOrEqualExpression extends pb_1.Message {
        constructor(data) {
            super();
            __GreaterThanOrEqualExpression_one_of_decls.set(this, [[2, 3]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __GreaterThanOrEqualExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("integer_value" in data && data.integer_value != undefined) {
                    this.integer_value = data.integer_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set field(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get integer_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set integer_value(value) {
            pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, __GreaterThanOrEqualExpression_one_of_decls, "f")[0], value);
        }
        get has_integer_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set float_value(value) {
            pb_1.Message.setOneofField(this, 3, __classPrivateFieldGet(this, __GreaterThanOrEqualExpression_one_of_decls, "f")[0], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            const cases = {
                0: "none",
                2: "integer_value",
                3: "float_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data) {
            const message = new _GreaterThanOrEqualExpression({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.integer_value != null) {
                message.integer_value = data.integer_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.integer_value != null) {
                data.integer_value = this.integer_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.has_integer_value)
                writer.writeInt64(2, this.integer_value);
            if (this.has_float_value)
                writer.writeFloat(3, this.float_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GreaterThanOrEqualExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.integer_value = reader.readInt64();
                        break;
                    case 3:
                        message.float_value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _GreaterThanOrEqualExpression.deserialize(bytes);
        }
    }
    __GreaterThanOrEqualExpression_one_of_decls = new WeakMap();
    vectorindex._GreaterThanOrEqualExpression = _GreaterThanOrEqualExpression;
    class _LessThanExpression extends pb_1.Message {
        constructor(data) {
            super();
            __LessThanExpression_one_of_decls.set(this, [[2, 3]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __LessThanExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("integer_value" in data && data.integer_value != undefined) {
                    this.integer_value = data.integer_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set field(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get integer_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set integer_value(value) {
            pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, __LessThanExpression_one_of_decls, "f")[0], value);
        }
        get has_integer_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set float_value(value) {
            pb_1.Message.setOneofField(this, 3, __classPrivateFieldGet(this, __LessThanExpression_one_of_decls, "f")[0], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            const cases = {
                0: "none",
                2: "integer_value",
                3: "float_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data) {
            const message = new _LessThanExpression({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.integer_value != null) {
                message.integer_value = data.integer_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.integer_value != null) {
                data.integer_value = this.integer_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.has_integer_value)
                writer.writeInt64(2, this.integer_value);
            if (this.has_float_value)
                writer.writeFloat(3, this.float_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _LessThanExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.integer_value = reader.readInt64();
                        break;
                    case 3:
                        message.float_value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _LessThanExpression.deserialize(bytes);
        }
    }
    __LessThanExpression_one_of_decls = new WeakMap();
    vectorindex._LessThanExpression = _LessThanExpression;
    class _LessThanOrEqualExpression extends pb_1.Message {
        constructor(data) {
            super();
            __LessThanOrEqualExpression_one_of_decls.set(this, [[2, 3]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __LessThanOrEqualExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("integer_value" in data && data.integer_value != undefined) {
                    this.integer_value = data.integer_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set field(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get integer_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set integer_value(value) {
            pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, __LessThanOrEqualExpression_one_of_decls, "f")[0], value);
        }
        get has_integer_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set float_value(value) {
            pb_1.Message.setOneofField(this, 3, __classPrivateFieldGet(this, __LessThanOrEqualExpression_one_of_decls, "f")[0], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            const cases = {
                0: "none",
                2: "integer_value",
                3: "float_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data) {
            const message = new _LessThanOrEqualExpression({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.integer_value != null) {
                message.integer_value = data.integer_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.integer_value != null) {
                data.integer_value = this.integer_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.has_integer_value)
                writer.writeInt64(2, this.integer_value);
            if (this.has_float_value)
                writer.writeFloat(3, this.float_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _LessThanOrEqualExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.integer_value = reader.readInt64();
                        break;
                    case 3:
                        message.float_value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _LessThanOrEqualExpression.deserialize(bytes);
        }
    }
    __LessThanOrEqualExpression_one_of_decls = new WeakMap();
    vectorindex._LessThanOrEqualExpression = _LessThanOrEqualExpression;
    class _ListContainsExpression extends pb_1.Message {
        constructor(data) {
            super();
            __ListContainsExpression_one_of_decls.set(this, [[2]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __ListContainsExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set field(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get string_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set string_value(value) {
            pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, __ListContainsExpression_one_of_decls, "f")[0], value);
        }
        get has_string_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get value() {
            const cases = {
                0: "none",
                2: "string_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data) {
            const message = new _ListContainsExpression({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.has_string_value)
                writer.writeString(2, this.string_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListContainsExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.string_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _ListContainsExpression.deserialize(bytes);
        }
    }
    __ListContainsExpression_one_of_decls = new WeakMap();
    vectorindex._ListContainsExpression = _ListContainsExpression;
    class _IdInSetExpression extends pb_1.Message {
        constructor(data) {
            super();
            __IdInSetExpression_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __IdInSetExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
            }
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []);
        }
        set ids(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _IdInSetExpression({});
            if (data.ids != null) {
                message.ids = data.ids;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.ids != null) {
                data.ids = this.ids;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ids.length)
                writer.writeRepeatedString(1, this.ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _IdInSetExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _IdInSetExpression.deserialize(bytes);
        }
    }
    __IdInSetExpression_one_of_decls = new WeakMap();
    vectorindex._IdInSetExpression = _IdInSetExpression;
    class _FilterExpression extends pb_1.Message {
        constructor(data) {
            super();
            __FilterExpression_one_of_decls.set(this, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("equals_expression" in data && data.equals_expression != undefined) {
                    this.equals_expression = data.equals_expression;
                }
                if ("and_expression" in data && data.and_expression != undefined) {
                    this.and_expression = data.and_expression;
                }
                if ("or_expression" in data && data.or_expression != undefined) {
                    this.or_expression = data.or_expression;
                }
                if ("not_expression" in data && data.not_expression != undefined) {
                    this.not_expression = data.not_expression;
                }
                if ("greater_than_expression" in data && data.greater_than_expression != undefined) {
                    this.greater_than_expression = data.greater_than_expression;
                }
                if ("greater_than_or_equal_expression" in data && data.greater_than_or_equal_expression != undefined) {
                    this.greater_than_or_equal_expression = data.greater_than_or_equal_expression;
                }
                if ("less_than_expression" in data && data.less_than_expression != undefined) {
                    this.less_than_expression = data.less_than_expression;
                }
                if ("less_than_or_equal_expression" in data && data.less_than_or_equal_expression != undefined) {
                    this.less_than_or_equal_expression = data.less_than_or_equal_expression;
                }
                if ("list_contains_expression" in data && data.list_contains_expression != undefined) {
                    this.list_contains_expression = data.list_contains_expression;
                }
                if ("id_in_set_expression" in data && data.id_in_set_expression != undefined) {
                    this.id_in_set_expression = data.id_in_set_expression;
                }
            }
        }
        get equals_expression() {
            return pb_1.Message.getWrapperField(this, _EqualsExpression, 1);
        }
        set equals_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 1, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_equals_expression() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get and_expression() {
            return pb_1.Message.getWrapperField(this, _AndExpression, 2);
        }
        set and_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_and_expression() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get or_expression() {
            return pb_1.Message.getWrapperField(this, _OrExpression, 3);
        }
        set or_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 3, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_or_expression() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get not_expression() {
            return pb_1.Message.getWrapperField(this, _NotExpression, 4);
        }
        set not_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 4, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_not_expression() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get greater_than_expression() {
            return pb_1.Message.getWrapperField(this, _GreaterThanExpression, 5);
        }
        set greater_than_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 5, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_greater_than_expression() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get greater_than_or_equal_expression() {
            return pb_1.Message.getWrapperField(this, _GreaterThanOrEqualExpression, 6);
        }
        set greater_than_or_equal_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 6, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_greater_than_or_equal_expression() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get less_than_expression() {
            return pb_1.Message.getWrapperField(this, _LessThanExpression, 7);
        }
        set less_than_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 7, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_less_than_expression() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get less_than_or_equal_expression() {
            return pb_1.Message.getWrapperField(this, _LessThanOrEqualExpression, 8);
        }
        set less_than_or_equal_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 8, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_less_than_or_equal_expression() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get list_contains_expression() {
            return pb_1.Message.getWrapperField(this, _ListContainsExpression, 9);
        }
        set list_contains_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 9, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_list_contains_expression() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get id_in_set_expression() {
            return pb_1.Message.getWrapperField(this, _IdInSetExpression, 10);
        }
        set id_in_set_expression(value) {
            pb_1.Message.setOneofWrapperField(this, 10, __classPrivateFieldGet(this, __FilterExpression_one_of_decls, "f")[0], value);
        }
        get has_id_in_set_expression() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get expression() {
            const cases = {
                0: "none",
                1: "equals_expression",
                2: "and_expression",
                3: "or_expression",
                4: "not_expression",
                5: "greater_than_expression",
                6: "greater_than_or_equal_expression",
                7: "less_than_expression",
                8: "less_than_or_equal_expression",
                9: "list_contains_expression",
                10: "id_in_set_expression"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data) {
            const message = new _FilterExpression({});
            if (data.equals_expression != null) {
                message.equals_expression = _EqualsExpression.fromObject(data.equals_expression);
            }
            if (data.and_expression != null) {
                message.and_expression = _AndExpression.fromObject(data.and_expression);
            }
            if (data.or_expression != null) {
                message.or_expression = _OrExpression.fromObject(data.or_expression);
            }
            if (data.not_expression != null) {
                message.not_expression = _NotExpression.fromObject(data.not_expression);
            }
            if (data.greater_than_expression != null) {
                message.greater_than_expression = _GreaterThanExpression.fromObject(data.greater_than_expression);
            }
            if (data.greater_than_or_equal_expression != null) {
                message.greater_than_or_equal_expression = _GreaterThanOrEqualExpression.fromObject(data.greater_than_or_equal_expression);
            }
            if (data.less_than_expression != null) {
                message.less_than_expression = _LessThanExpression.fromObject(data.less_than_expression);
            }
            if (data.less_than_or_equal_expression != null) {
                message.less_than_or_equal_expression = _LessThanOrEqualExpression.fromObject(data.less_than_or_equal_expression);
            }
            if (data.list_contains_expression != null) {
                message.list_contains_expression = _ListContainsExpression.fromObject(data.list_contains_expression);
            }
            if (data.id_in_set_expression != null) {
                message.id_in_set_expression = _IdInSetExpression.fromObject(data.id_in_set_expression);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.equals_expression != null) {
                data.equals_expression = this.equals_expression.toObject();
            }
            if (this.and_expression != null) {
                data.and_expression = this.and_expression.toObject();
            }
            if (this.or_expression != null) {
                data.or_expression = this.or_expression.toObject();
            }
            if (this.not_expression != null) {
                data.not_expression = this.not_expression.toObject();
            }
            if (this.greater_than_expression != null) {
                data.greater_than_expression = this.greater_than_expression.toObject();
            }
            if (this.greater_than_or_equal_expression != null) {
                data.greater_than_or_equal_expression = this.greater_than_or_equal_expression.toObject();
            }
            if (this.less_than_expression != null) {
                data.less_than_expression = this.less_than_expression.toObject();
            }
            if (this.less_than_or_equal_expression != null) {
                data.less_than_or_equal_expression = this.less_than_or_equal_expression.toObject();
            }
            if (this.list_contains_expression != null) {
                data.list_contains_expression = this.list_contains_expression.toObject();
            }
            if (this.id_in_set_expression != null) {
                data.id_in_set_expression = this.id_in_set_expression.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_equals_expression)
                writer.writeMessage(1, this.equals_expression, () => this.equals_expression.serialize(writer));
            if (this.has_and_expression)
                writer.writeMessage(2, this.and_expression, () => this.and_expression.serialize(writer));
            if (this.has_or_expression)
                writer.writeMessage(3, this.or_expression, () => this.or_expression.serialize(writer));
            if (this.has_not_expression)
                writer.writeMessage(4, this.not_expression, () => this.not_expression.serialize(writer));
            if (this.has_greater_than_expression)
                writer.writeMessage(5, this.greater_than_expression, () => this.greater_than_expression.serialize(writer));
            if (this.has_greater_than_or_equal_expression)
                writer.writeMessage(6, this.greater_than_or_equal_expression, () => this.greater_than_or_equal_expression.serialize(writer));
            if (this.has_less_than_expression)
                writer.writeMessage(7, this.less_than_expression, () => this.less_than_expression.serialize(writer));
            if (this.has_less_than_or_equal_expression)
                writer.writeMessage(8, this.less_than_or_equal_expression, () => this.less_than_or_equal_expression.serialize(writer));
            if (this.has_list_contains_expression)
                writer.writeMessage(9, this.list_contains_expression, () => this.list_contains_expression.serialize(writer));
            if (this.has_id_in_set_expression)
                writer.writeMessage(10, this.id_in_set_expression, () => this.id_in_set_expression.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _FilterExpression();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.equals_expression, () => message.equals_expression = _EqualsExpression.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.and_expression, () => message.and_expression = _AndExpression.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.or_expression, () => message.or_expression = _OrExpression.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.not_expression, () => message.not_expression = _NotExpression.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.greater_than_expression, () => message.greater_than_expression = _GreaterThanExpression.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.greater_than_or_equal_expression, () => message.greater_than_or_equal_expression = _GreaterThanOrEqualExpression.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.less_than_expression, () => message.less_than_expression = _LessThanExpression.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.less_than_or_equal_expression, () => message.less_than_or_equal_expression = _LessThanOrEqualExpression.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.list_contains_expression, () => message.list_contains_expression = _ListContainsExpression.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.id_in_set_expression, () => message.id_in_set_expression = _IdInSetExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _FilterExpression.deserialize(bytes);
        }
    }
    __FilterExpression_one_of_decls = new WeakMap();
    vectorindex._FilterExpression = _FilterExpression;
    class _NoScoreThreshold extends pb_1.Message {
        constructor(data) {
            super();
            __NoScoreThreshold_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __NoScoreThreshold_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _NoScoreThreshold({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _NoScoreThreshold();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _NoScoreThreshold.deserialize(bytes);
        }
    }
    __NoScoreThreshold_one_of_decls = new WeakMap();
    vectorindex._NoScoreThreshold = _NoScoreThreshold;
    class _SearchRequest extends pb_1.Message {
        constructor(data) {
            super();
            __SearchRequest_one_of_decls.set(this, [[5, 6]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __SearchRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("top_k" in data && data.top_k != undefined) {
                    this.top_k = data.top_k;
                }
                if ("query_vector" in data && data.query_vector != undefined) {
                    this.query_vector = data.query_vector;
                }
                if ("metadata_fields" in data && data.metadata_fields != undefined) {
                    this.metadata_fields = data.metadata_fields;
                }
                if ("score_threshold" in data && data.score_threshold != undefined) {
                    this.score_threshold = data.score_threshold;
                }
                if ("no_score_threshold" in data && data.no_score_threshold != undefined) {
                    this.no_score_threshold = data.no_score_threshold;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get top_k() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set top_k(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get query_vector() {
            return pb_1.Message.getWrapperField(this, _Vector, 3);
        }
        set query_vector(value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_query_vector() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get metadata_fields() {
            return pb_1.Message.getWrapperField(this, _MetadataRequest, 4);
        }
        set metadata_fields(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata_fields() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get score_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set score_threshold(value) {
            pb_1.Message.setOneofField(this, 5, __classPrivateFieldGet(this, __SearchRequest_one_of_decls, "f")[0], value);
        }
        get has_score_threshold() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get no_score_threshold() {
            return pb_1.Message.getWrapperField(this, _NoScoreThreshold, 6);
        }
        set no_score_threshold(value) {
            pb_1.Message.setOneofWrapperField(this, 6, __classPrivateFieldGet(this, __SearchRequest_one_of_decls, "f")[0], value);
        }
        get has_no_score_threshold() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get filter() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 7);
        }
        set filter(value) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_filter() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get threshold() {
            const cases = {
                0: "none",
                5: "score_threshold",
                6: "no_score_threshold"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
        }
        static fromObject(data) {
            const message = new _SearchRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.top_k != null) {
                message.top_k = data.top_k;
            }
            if (data.query_vector != null) {
                message.query_vector = _Vector.fromObject(data.query_vector);
            }
            if (data.metadata_fields != null) {
                message.metadata_fields = _MetadataRequest.fromObject(data.metadata_fields);
            }
            if (data.score_threshold != null) {
                message.score_threshold = data.score_threshold;
            }
            if (data.no_score_threshold != null) {
                message.no_score_threshold = _NoScoreThreshold.fromObject(data.no_score_threshold);
            }
            if (data.filter != null) {
                message.filter = _FilterExpression.fromObject(data.filter);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.top_k != null) {
                data.top_k = this.top_k;
            }
            if (this.query_vector != null) {
                data.query_vector = this.query_vector.toObject();
            }
            if (this.metadata_fields != null) {
                data.metadata_fields = this.metadata_fields.toObject();
            }
            if (this.score_threshold != null) {
                data.score_threshold = this.score_threshold;
            }
            if (this.no_score_threshold != null) {
                data.no_score_threshold = this.no_score_threshold.toObject();
            }
            if (this.filter != null) {
                data.filter = this.filter.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.top_k != 0)
                writer.writeUint32(2, this.top_k);
            if (this.has_query_vector)
                writer.writeMessage(3, this.query_vector, () => this.query_vector.serialize(writer));
            if (this.has_metadata_fields)
                writer.writeMessage(4, this.metadata_fields, () => this.metadata_fields.serialize(writer));
            if (this.has_score_threshold)
                writer.writeFloat(5, this.score_threshold);
            if (this.has_no_score_threshold)
                writer.writeMessage(6, this.no_score_threshold, () => this.no_score_threshold.serialize(writer));
            if (this.has_filter)
                writer.writeMessage(7, this.filter, () => this.filter.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        message.top_k = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.query_vector, () => message.query_vector = _Vector.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.metadata_fields, () => message.metadata_fields = _MetadataRequest.deserialize(reader));
                        break;
                    case 5:
                        message.score_threshold = reader.readFloat();
                        break;
                    case 6:
                        reader.readMessage(message.no_score_threshold, () => message.no_score_threshold = _NoScoreThreshold.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.filter, () => message.filter = _FilterExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchRequest.deserialize(bytes);
        }
    }
    __SearchRequest_one_of_decls = new WeakMap();
    vectorindex._SearchRequest = _SearchRequest;
    class _SearchAndFetchVectorsRequest extends pb_1.Message {
        constructor(data) {
            super();
            __SearchAndFetchVectorsRequest_one_of_decls.set(this, [[5, 6]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __SearchAndFetchVectorsRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("top_k" in data && data.top_k != undefined) {
                    this.top_k = data.top_k;
                }
                if ("query_vector" in data && data.query_vector != undefined) {
                    this.query_vector = data.query_vector;
                }
                if ("metadata_fields" in data && data.metadata_fields != undefined) {
                    this.metadata_fields = data.metadata_fields;
                }
                if ("score_threshold" in data && data.score_threshold != undefined) {
                    this.score_threshold = data.score_threshold;
                }
                if ("no_score_threshold" in data && data.no_score_threshold != undefined) {
                    this.no_score_threshold = data.no_score_threshold;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get top_k() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set top_k(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get query_vector() {
            return pb_1.Message.getWrapperField(this, _Vector, 3);
        }
        set query_vector(value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_query_vector() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get metadata_fields() {
            return pb_1.Message.getWrapperField(this, _MetadataRequest, 4);
        }
        set metadata_fields(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata_fields() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get score_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set score_threshold(value) {
            pb_1.Message.setOneofField(this, 5, __classPrivateFieldGet(this, __SearchAndFetchVectorsRequest_one_of_decls, "f")[0], value);
        }
        get has_score_threshold() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get no_score_threshold() {
            return pb_1.Message.getWrapperField(this, _NoScoreThreshold, 6);
        }
        set no_score_threshold(value) {
            pb_1.Message.setOneofWrapperField(this, 6, __classPrivateFieldGet(this, __SearchAndFetchVectorsRequest_one_of_decls, "f")[0], value);
        }
        get has_no_score_threshold() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get filter() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 7);
        }
        set filter(value) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_filter() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get threshold() {
            const cases = {
                0: "none",
                5: "score_threshold",
                6: "no_score_threshold"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
        }
        static fromObject(data) {
            const message = new _SearchAndFetchVectorsRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.top_k != null) {
                message.top_k = data.top_k;
            }
            if (data.query_vector != null) {
                message.query_vector = _Vector.fromObject(data.query_vector);
            }
            if (data.metadata_fields != null) {
                message.metadata_fields = _MetadataRequest.fromObject(data.metadata_fields);
            }
            if (data.score_threshold != null) {
                message.score_threshold = data.score_threshold;
            }
            if (data.no_score_threshold != null) {
                message.no_score_threshold = _NoScoreThreshold.fromObject(data.no_score_threshold);
            }
            if (data.filter != null) {
                message.filter = _FilterExpression.fromObject(data.filter);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.top_k != null) {
                data.top_k = this.top_k;
            }
            if (this.query_vector != null) {
                data.query_vector = this.query_vector.toObject();
            }
            if (this.metadata_fields != null) {
                data.metadata_fields = this.metadata_fields.toObject();
            }
            if (this.score_threshold != null) {
                data.score_threshold = this.score_threshold;
            }
            if (this.no_score_threshold != null) {
                data.no_score_threshold = this.no_score_threshold.toObject();
            }
            if (this.filter != null) {
                data.filter = this.filter.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.top_k != 0)
                writer.writeUint32(2, this.top_k);
            if (this.has_query_vector)
                writer.writeMessage(3, this.query_vector, () => this.query_vector.serialize(writer));
            if (this.has_metadata_fields)
                writer.writeMessage(4, this.metadata_fields, () => this.metadata_fields.serialize(writer));
            if (this.has_score_threshold)
                writer.writeFloat(5, this.score_threshold);
            if (this.has_no_score_threshold)
                writer.writeMessage(6, this.no_score_threshold, () => this.no_score_threshold.serialize(writer));
            if (this.has_filter)
                writer.writeMessage(7, this.filter, () => this.filter.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchAndFetchVectorsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        message.top_k = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.query_vector, () => message.query_vector = _Vector.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.metadata_fields, () => message.metadata_fields = _MetadataRequest.deserialize(reader));
                        break;
                    case 5:
                        message.score_threshold = reader.readFloat();
                        break;
                    case 6:
                        reader.readMessage(message.no_score_threshold, () => message.no_score_threshold = _NoScoreThreshold.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.filter, () => message.filter = _FilterExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchAndFetchVectorsRequest.deserialize(bytes);
        }
    }
    __SearchAndFetchVectorsRequest_one_of_decls = new WeakMap();
    vectorindex._SearchAndFetchVectorsRequest = _SearchAndFetchVectorsRequest;
    class _SearchHit extends pb_1.Message {
        constructor(data) {
            super();
            __SearchHit_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, __SearchHit_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get score() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set score(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 3);
        }
        set metadata(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data) {
            const message = new _SearchHit({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.score != null) {
                message.score = data.score;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.score != 0)
                writer.writeFloat(2, this.score);
            if (this.metadata.length)
                writer.writeRepeatedMessage(3, this.metadata, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchHit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.score = reader.readFloat();
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 3, _Metadata.deserialize(reader), _Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchHit.deserialize(bytes);
        }
    }
    __SearchHit_one_of_decls = new WeakMap();
    vectorindex._SearchHit = _SearchHit;
    class _SearchAndFetchVectorsHit extends pb_1.Message {
        constructor(data) {
            super();
            __SearchAndFetchVectorsHit_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, __SearchAndFetchVectorsHit_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("vector" in data && data.vector != undefined) {
                    this.vector = data.vector;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get score() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set score(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 3);
        }
        set metadata(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get vector() {
            return pb_1.Message.getWrapperField(this, _Vector, 4);
        }
        set vector(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_vector() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data) {
            const message = new _SearchAndFetchVectorsHit({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.score != null) {
                message.score = data.score;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
            }
            if (data.vector != null) {
                message.vector = _Vector.fromObject(data.vector);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.map((item) => item.toObject());
            }
            if (this.vector != null) {
                data.vector = this.vector.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.score != 0)
                writer.writeFloat(2, this.score);
            if (this.metadata.length)
                writer.writeRepeatedMessage(3, this.metadata, (item) => item.serialize(writer));
            if (this.has_vector)
                writer.writeMessage(4, this.vector, () => this.vector.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchAndFetchVectorsHit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.score = reader.readFloat();
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 3, _Metadata.deserialize(reader), _Metadata));
                        break;
                    case 4:
                        reader.readMessage(message.vector, () => message.vector = _Vector.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchAndFetchVectorsHit.deserialize(bytes);
        }
    }
    __SearchAndFetchVectorsHit_one_of_decls = new WeakMap();
    vectorindex._SearchAndFetchVectorsHit = _SearchAndFetchVectorsHit;
    class _SearchResponse extends pb_1.Message {
        constructor(data) {
            super();
            __SearchResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __SearchResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hits" in data && data.hits != undefined) {
                    this.hits = data.hits;
                }
            }
        }
        get hits() {
            return pb_1.Message.getRepeatedWrapperField(this, _SearchHit, 1);
        }
        set hits(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _SearchResponse({});
            if (data.hits != null) {
                message.hits = data.hits.map(item => _SearchHit.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.hits != null) {
                data.hits = this.hits.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hits.length)
                writer.writeRepeatedMessage(1, this.hits, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.hits, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _SearchHit.deserialize(reader), _SearchHit));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchResponse.deserialize(bytes);
        }
    }
    __SearchResponse_one_of_decls = new WeakMap();
    vectorindex._SearchResponse = _SearchResponse;
    class _SearchAndFetchVectorsResponse extends pb_1.Message {
        constructor(data) {
            super();
            __SearchAndFetchVectorsResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __SearchAndFetchVectorsResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hits" in data && data.hits != undefined) {
                    this.hits = data.hits;
                }
            }
        }
        get hits() {
            return pb_1.Message.getRepeatedWrapperField(this, _SearchAndFetchVectorsHit, 1);
        }
        set hits(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _SearchAndFetchVectorsResponse({});
            if (data.hits != null) {
                message.hits = data.hits.map(item => _SearchAndFetchVectorsHit.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.hits != null) {
                data.hits = this.hits.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hits.length)
                writer.writeRepeatedMessage(1, this.hits, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchAndFetchVectorsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.hits, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _SearchAndFetchVectorsHit.deserialize(reader), _SearchAndFetchVectorsHit));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchAndFetchVectorsResponse.deserialize(bytes);
        }
    }
    __SearchAndFetchVectorsResponse_one_of_decls = new WeakMap();
    vectorindex._SearchAndFetchVectorsResponse = _SearchAndFetchVectorsResponse;
    class _GetItemMetadataBatchRequest extends pb_1.Message {
        constructor(data) {
            super();
            __GetItemMetadataBatchRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, __GetItemMetadataBatchRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
                if ("metadata_fields" in data && data.metadata_fields != undefined) {
                    this.metadata_fields = data.metadata_fields;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []);
        }
        set ids(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata_fields() {
            return pb_1.Message.getWrapperField(this, _MetadataRequest, 3);
        }
        set metadata_fields(value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_metadata_fields() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get filter() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 4);
        }
        set filter(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_filter() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data) {
            const message = new _GetItemMetadataBatchRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.ids != null) {
                message.ids = data.ids;
            }
            if (data.metadata_fields != null) {
                message.metadata_fields = _MetadataRequest.fromObject(data.metadata_fields);
            }
            if (data.filter != null) {
                message.filter = _FilterExpression.fromObject(data.filter);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.ids != null) {
                data.ids = this.ids;
            }
            if (this.metadata_fields != null) {
                data.metadata_fields = this.metadata_fields.toObject();
            }
            if (this.filter != null) {
                data.filter = this.filter.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.ids.length)
                writer.writeRepeatedString(2, this.ids);
            if (this.has_metadata_fields)
                writer.writeMessage(3, this.metadata_fields, () => this.metadata_fields.serialize(writer));
            if (this.has_filter)
                writer.writeMessage(4, this.filter, () => this.filter.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GetItemMetadataBatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.metadata_fields, () => message.metadata_fields = _MetadataRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.filter, () => message.filter = _FilterExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _GetItemMetadataBatchRequest.deserialize(bytes);
        }
    }
    __GetItemMetadataBatchRequest_one_of_decls = new WeakMap();
    vectorindex._GetItemMetadataBatchRequest = _GetItemMetadataBatchRequest;
    class _ItemMetadataResponse extends pb_1.Message {
        constructor(data) {
            super();
            __ItemMetadataResponse_one_of_decls.set(this, [[1, 2]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], __classPrivateFieldGet(this, __ItemMetadataResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("miss" in data && data.miss != undefined) {
                    this.miss = data.miss;
                }
                if ("hit" in data && data.hit != undefined) {
                    this.hit = data.hit;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get miss() {
            return pb_1.Message.getWrapperField(this, _ItemMetadataResponse._Miss, 1);
        }
        set miss(value) {
            pb_1.Message.setOneofWrapperField(this, 1, __classPrivateFieldGet(this, __ItemMetadataResponse_one_of_decls, "f")[0], value);
        }
        get has_miss() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get hit() {
            return pb_1.Message.getWrapperField(this, _ItemMetadataResponse._Hit, 2);
        }
        set hit(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, __ItemMetadataResponse_one_of_decls, "f")[0], value);
        }
        get has_hit() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "");
        }
        set id(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 4);
        }
        set metadata(value) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get response() {
            const cases = {
                0: "none",
                1: "miss",
                2: "hit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data) {
            const message = new _ItemMetadataResponse({});
            if (data.miss != null) {
                message.miss = _ItemMetadataResponse._Miss.fromObject(data.miss);
            }
            if (data.hit != null) {
                message.hit = _ItemMetadataResponse._Hit.fromObject(data.hit);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.miss != null) {
                data.miss = this.miss.toObject();
            }
            if (this.hit != null) {
                data.hit = this.hit.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_miss)
                writer.writeMessage(1, this.miss, () => this.miss.serialize(writer));
            if (this.has_hit)
                writer.writeMessage(2, this.hit, () => this.hit.serialize(writer));
            if (this.id.length)
                writer.writeString(3, this.id);
            if (this.metadata.length)
                writer.writeRepeatedMessage(4, this.metadata, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ItemMetadataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.miss, () => message.miss = _ItemMetadataResponse._Miss.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.hit, () => message.hit = _ItemMetadataResponse._Hit.deserialize(reader));
                        break;
                    case 3:
                        message.id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 4, _Metadata.deserialize(reader), _Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _ItemMetadataResponse.deserialize(bytes);
        }
    }
    __ItemMetadataResponse_one_of_decls = new WeakMap();
    vectorindex._ItemMetadataResponse = _ItemMetadataResponse;
    (function (_ItemMetadataResponse) {
        var __Miss_one_of_decls, __Hit_one_of_decls;
        class _Miss extends pb_1.Message {
            constructor(data) {
                super();
                __Miss_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __Miss_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data) {
                const message = new _Miss({});
                return message;
            }
            toObject() {
                const data = {};
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Miss();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return _Miss.deserialize(bytes);
            }
        }
        __Miss_one_of_decls = new WeakMap();
        _ItemMetadataResponse._Miss = _Miss;
        class _Hit extends pb_1.Message {
            constructor(data) {
                super();
                __Hit_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, __Hit_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "");
            }
            set id(value) {
                pb_1.Message.setField(this, 1, value);
            }
            get metadata() {
                return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 2);
            }
            set metadata(value) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data) {
                const message = new _Hit({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.metadata != null) {
                    message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.metadata != null) {
                    data.metadata = this.metadata.map((item) => item.toObject());
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (this.metadata.length)
                    writer.writeRepeatedMessage(2, this.metadata, (item) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Hit();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 2, _Metadata.deserialize(reader), _Metadata));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return _Hit.deserialize(bytes);
            }
        }
        __Hit_one_of_decls = new WeakMap();
        _ItemMetadataResponse._Hit = _Hit;
    })(_ItemMetadataResponse = vectorindex._ItemMetadataResponse || (vectorindex._ItemMetadataResponse = {}));
    class _GetItemMetadataBatchResponse extends pb_1.Message {
        constructor(data) {
            super();
            __GetItemMetadataBatchResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __GetItemMetadataBatchResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item_metadata_response" in data && data.item_metadata_response != undefined) {
                    this.item_metadata_response = data.item_metadata_response;
                }
            }
        }
        get item_metadata_response() {
            return pb_1.Message.getRepeatedWrapperField(this, _ItemMetadataResponse, 1);
        }
        set item_metadata_response(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _GetItemMetadataBatchResponse({});
            if (data.item_metadata_response != null) {
                message.item_metadata_response = data.item_metadata_response.map(item => _ItemMetadataResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.item_metadata_response != null) {
                data.item_metadata_response = this.item_metadata_response.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item_metadata_response.length)
                writer.writeRepeatedMessage(1, this.item_metadata_response, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GetItemMetadataBatchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item_metadata_response, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _ItemMetadataResponse.deserialize(reader), _ItemMetadataResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _GetItemMetadataBatchResponse.deserialize(bytes);
        }
    }
    __GetItemMetadataBatchResponse_one_of_decls = new WeakMap();
    vectorindex._GetItemMetadataBatchResponse = _GetItemMetadataBatchResponse;
    class _GetItemBatchRequest extends pb_1.Message {
        constructor(data) {
            super();
            __GetItemBatchRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, __GetItemBatchRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
                if ("metadata_fields" in data && data.metadata_fields != undefined) {
                    this.metadata_fields = data.metadata_fields;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []);
        }
        set ids(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata_fields() {
            return pb_1.Message.getWrapperField(this, _MetadataRequest, 3);
        }
        set metadata_fields(value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_metadata_fields() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get filter() {
            return pb_1.Message.getWrapperField(this, _FilterExpression, 4);
        }
        set filter(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_filter() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data) {
            const message = new _GetItemBatchRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.ids != null) {
                message.ids = data.ids;
            }
            if (data.metadata_fields != null) {
                message.metadata_fields = _MetadataRequest.fromObject(data.metadata_fields);
            }
            if (data.filter != null) {
                message.filter = _FilterExpression.fromObject(data.filter);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.ids != null) {
                data.ids = this.ids;
            }
            if (this.metadata_fields != null) {
                data.metadata_fields = this.metadata_fields.toObject();
            }
            if (this.filter != null) {
                data.filter = this.filter.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.ids.length)
                writer.writeRepeatedString(2, this.ids);
            if (this.has_metadata_fields)
                writer.writeMessage(3, this.metadata_fields, () => this.metadata_fields.serialize(writer));
            if (this.has_filter)
                writer.writeMessage(4, this.filter, () => this.filter.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GetItemBatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.metadata_fields, () => message.metadata_fields = _MetadataRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.filter, () => message.filter = _FilterExpression.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _GetItemBatchRequest.deserialize(bytes);
        }
    }
    __GetItemBatchRequest_one_of_decls = new WeakMap();
    vectorindex._GetItemBatchRequest = _GetItemBatchRequest;
    class _ItemResponse extends pb_1.Message {
        constructor(data) {
            super();
            __ItemResponse_one_of_decls.set(this, [[1, 2]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], __classPrivateFieldGet(this, __ItemResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("miss" in data && data.miss != undefined) {
                    this.miss = data.miss;
                }
                if ("hit" in data && data.hit != undefined) {
                    this.hit = data.hit;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("vector" in data && data.vector != undefined) {
                    this.vector = data.vector;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get miss() {
            return pb_1.Message.getWrapperField(this, _ItemResponse._Miss, 1);
        }
        set miss(value) {
            pb_1.Message.setOneofWrapperField(this, 1, __classPrivateFieldGet(this, __ItemResponse_one_of_decls, "f")[0], value);
        }
        get has_miss() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get hit() {
            return pb_1.Message.getWrapperField(this, _ItemResponse._Hit, 2);
        }
        set hit(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, __ItemResponse_one_of_decls, "f")[0], value);
        }
        get has_hit() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "");
        }
        set id(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get vector() {
            return pb_1.Message.getWrapperField(this, _Vector, 4);
        }
        set vector(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_vector() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get metadata() {
            return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 5);
        }
        set metadata(value) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get response() {
            const cases = {
                0: "none",
                1: "miss",
                2: "hit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data) {
            const message = new _ItemResponse({});
            if (data.miss != null) {
                message.miss = _ItemResponse._Miss.fromObject(data.miss);
            }
            if (data.hit != null) {
                message.hit = _ItemResponse._Hit.fromObject(data.hit);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.vector != null) {
                message.vector = _Vector.fromObject(data.vector);
            }
            if (data.metadata != null) {
                message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.miss != null) {
                data.miss = this.miss.toObject();
            }
            if (this.hit != null) {
                data.hit = this.hit.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.vector != null) {
                data.vector = this.vector.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_miss)
                writer.writeMessage(1, this.miss, () => this.miss.serialize(writer));
            if (this.has_hit)
                writer.writeMessage(2, this.hit, () => this.hit.serialize(writer));
            if (this.id.length)
                writer.writeString(3, this.id);
            if (this.has_vector)
                writer.writeMessage(4, this.vector, () => this.vector.serialize(writer));
            if (this.metadata.length)
                writer.writeRepeatedMessage(5, this.metadata, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ItemResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.miss, () => message.miss = _ItemResponse._Miss.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.hit, () => message.hit = _ItemResponse._Hit.deserialize(reader));
                        break;
                    case 3:
                        message.id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.vector, () => message.vector = _Vector.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 5, _Metadata.deserialize(reader), _Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _ItemResponse.deserialize(bytes);
        }
    }
    __ItemResponse_one_of_decls = new WeakMap();
    vectorindex._ItemResponse = _ItemResponse;
    (function (_ItemResponse) {
        var __Miss_one_of_decls_1, __Hit_one_of_decls_1;
        class _Miss extends pb_1.Message {
            constructor(data) {
                super();
                __Miss_one_of_decls_1.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __Miss_one_of_decls_1, "f"));
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data) {
                const message = new _Miss({});
                return message;
            }
            toObject() {
                const data = {};
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Miss();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return _Miss.deserialize(bytes);
            }
        }
        __Miss_one_of_decls_1 = new WeakMap();
        _ItemResponse._Miss = _Miss;
        class _Hit extends pb_1.Message {
            constructor(data) {
                super();
                __Hit_one_of_decls_1.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, __Hit_one_of_decls_1, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("vector" in data && data.vector != undefined) {
                        this.vector = data.vector;
                    }
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "");
            }
            set id(value) {
                pb_1.Message.setField(this, 1, value);
            }
            get vector() {
                return pb_1.Message.getWrapperField(this, _Vector, 2);
            }
            set vector(value) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_vector() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get metadata() {
                return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 3);
            }
            set metadata(value) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data) {
                const message = new _Hit({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.vector != null) {
                    message.vector = _Vector.fromObject(data.vector);
                }
                if (data.metadata != null) {
                    message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.vector != null) {
                    data.vector = this.vector.toObject();
                }
                if (this.metadata != null) {
                    data.metadata = this.metadata.map((item) => item.toObject());
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_vector)
                    writer.writeMessage(2, this.vector, () => this.vector.serialize(writer));
                if (this.metadata.length)
                    writer.writeRepeatedMessage(3, this.metadata, (item) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Hit();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.vector, () => message.vector = _Vector.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 3, _Metadata.deserialize(reader), _Metadata));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return _Hit.deserialize(bytes);
            }
        }
        __Hit_one_of_decls_1 = new WeakMap();
        _ItemResponse._Hit = _Hit;
    })(_ItemResponse = vectorindex._ItemResponse || (vectorindex._ItemResponse = {}));
    class _GetItemBatchResponse extends pb_1.Message {
        constructor(data) {
            super();
            __GetItemBatchResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __GetItemBatchResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item_response" in data && data.item_response != undefined) {
                    this.item_response = data.item_response;
                }
            }
        }
        get item_response() {
            return pb_1.Message.getRepeatedWrapperField(this, _ItemResponse, 1);
        }
        set item_response(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _GetItemBatchResponse({});
            if (data.item_response != null) {
                message.item_response = data.item_response.map(item => _ItemResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.item_response != null) {
                data.item_response = this.item_response.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item_response.length)
                writer.writeRepeatedMessage(1, this.item_response, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GetItemBatchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item_response, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _ItemResponse.deserialize(reader), _ItemResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _GetItemBatchResponse.deserialize(bytes);
        }
    }
    __GetItemBatchResponse_one_of_decls = new WeakMap();
    vectorindex._GetItemBatchResponse = _GetItemBatchResponse;
    class _CountItemsRequest extends pb_1.Message {
        constructor(data) {
            super();
            __CountItemsRequest_one_of_decls.set(this, [[2]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __CountItemsRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("all" in data && data.all != undefined) {
                    this.all = data.all;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get all() {
            return pb_1.Message.getWrapperField(this, _CountItemsRequest.All, 2);
        }
        set all(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, __CountItemsRequest_one_of_decls, "f")[0], value);
        }
        get has_all() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get filter() {
            const cases = {
                0: "none",
                2: "all"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data) {
            const message = new _CountItemsRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.all != null) {
                message.all = _CountItemsRequest.All.fromObject(data.all);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.all != null) {
                data.all = this.all.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.has_all)
                writer.writeMessage(2, this.all, () => this.all.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CountItemsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.all, () => message.all = _CountItemsRequest.All.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _CountItemsRequest.deserialize(bytes);
        }
    }
    __CountItemsRequest_one_of_decls = new WeakMap();
    vectorindex._CountItemsRequest = _CountItemsRequest;
    (function (_CountItemsRequest) {
        var _All_one_of_decls_1;
        class All extends pb_1.Message {
            constructor(data) {
                super();
                _All_one_of_decls_1.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _All_one_of_decls_1, "f"));
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data) {
                const message = new All({});
                return message;
            }
            toObject() {
                const data = {};
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new All();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return All.deserialize(bytes);
            }
        }
        _All_one_of_decls_1 = new WeakMap();
        _CountItemsRequest.All = All;
    })(_CountItemsRequest = vectorindex._CountItemsRequest || (vectorindex._CountItemsRequest = {}));
    class _CountItemsResponse extends pb_1.Message {
        constructor(data) {
            super();
            __CountItemsResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __CountItemsResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item_count" in data && data.item_count != undefined) {
                    this.item_count = data.item_count;
                }
            }
        }
        get item_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set item_count(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _CountItemsResponse({});
            if (data.item_count != null) {
                message.item_count = data.item_count;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.item_count != null) {
                data.item_count = this.item_count;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item_count != 0)
                writer.writeUint64(1, this.item_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CountItemsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.item_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _CountItemsResponse.deserialize(bytes);
        }
    }
    __CountItemsResponse_one_of_decls = new WeakMap();
    vectorindex._CountItemsResponse = _CountItemsResponse;
    class UnimplementedVectorIndexService {
    }
    UnimplementedVectorIndexService.definition = {
        UpsertItemBatch: {
            path: "/vectorindex.VectorIndex/UpsertItemBatch",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _UpsertItemBatchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _UpsertItemBatchResponse.deserialize(new Uint8Array(bytes))
        },
        DeleteItemBatch: {
            path: "/vectorindex.VectorIndex/DeleteItemBatch",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _DeleteItemBatchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _DeleteItemBatchResponse.deserialize(new Uint8Array(bytes))
        },
        Search: {
            path: "/vectorindex.VectorIndex/Search",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _SearchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _SearchResponse.deserialize(new Uint8Array(bytes))
        },
        SearchAndFetchVectors: {
            path: "/vectorindex.VectorIndex/SearchAndFetchVectors",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _SearchAndFetchVectorsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _SearchAndFetchVectorsResponse.deserialize(new Uint8Array(bytes))
        },
        GetItemMetadataBatch: {
            path: "/vectorindex.VectorIndex/GetItemMetadataBatch",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _GetItemMetadataBatchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _GetItemMetadataBatchResponse.deserialize(new Uint8Array(bytes))
        },
        GetItemBatch: {
            path: "/vectorindex.VectorIndex/GetItemBatch",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _GetItemBatchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _GetItemBatchResponse.deserialize(new Uint8Array(bytes))
        },
        CountItems: {
            path: "/vectorindex.VectorIndex/CountItems",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _CountItemsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _CountItemsResponse.deserialize(new Uint8Array(bytes))
        }
    };
    vectorindex.UnimplementedVectorIndexService = UnimplementedVectorIndexService;
    class VectorIndexClient extends grpc_1.makeGenericClientConstructor(UnimplementedVectorIndexService.definition, "VectorIndex", {}) {
        constructor(address, credentials, options) {
            super(address, credentials, options);
            this.UpsertItemBatch = (message, metadata, options, callback) => {
                return super.UpsertItemBatch(message, metadata, options, callback);
            };
            this.DeleteItemBatch = (message, metadata, options, callback) => {
                return super.DeleteItemBatch(message, metadata, options, callback);
            };
            this.Search = (message, metadata, options, callback) => {
                return super.Search(message, metadata, options, callback);
            };
            this.SearchAndFetchVectors = (message, metadata, options, callback) => {
                return super.SearchAndFetchVectors(message, metadata, options, callback);
            };
            this.GetItemMetadataBatch = (message, metadata, options, callback) => {
                return super.GetItemMetadataBatch(message, metadata, options, callback);
            };
            this.GetItemBatch = (message, metadata, options, callback) => {
                return super.GetItemBatch(message, metadata, options, callback);
            };
            this.CountItems = (message, metadata, options, callback) => {
                return super.CountItems(message, metadata, options, callback);
            };
        }
    }
    vectorindex.VectorIndexClient = VectorIndexClient;
})(vectorindex = exports.vectorindex || (exports.vectorindex = {}));
