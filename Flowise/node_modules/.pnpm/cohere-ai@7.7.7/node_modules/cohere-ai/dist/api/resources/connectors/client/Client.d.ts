/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Cohere from "../../..";
export declare namespace Connectors {
    interface Options {
        environment?: core.Supplier<environments.CohereEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        clientName?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Connectors {
    protected readonly _options: Connectors.Options;
    constructor(_options: Connectors.Options);
    /**
     * Returns a list of connectors ordered by descending creation date (newer first). See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InternalServerError}
     *
     * @example
     *     await cohere.connectors.list({})
     */
    list(request?: Cohere.ConnectorsListRequest, requestOptions?: Connectors.RequestOptions): Promise<Cohere.ListConnectorsResponse>;
    /**
     * Creates a new connector. The connector is tested during registration and will cancel registration when the test is unsuccessful. See ['Creating and Deploying a Connector'](https://docs.cohere.com/docs/creating-and-deploying-a-connector) for more information.
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InternalServerError}
     *
     * @example
     *     await cohere.connectors.create({
     *         name: "name",
     *         url: "url"
     *     })
     */
    create(request: Cohere.CreateConnectorRequest, requestOptions?: Connectors.RequestOptions): Promise<Cohere.CreateConnectorResponse>;
    /**
     * Retrieve a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InternalServerError}
     *
     * @example
     *     await cohere.connectors.get("id")
     */
    get(id: string, requestOptions?: Connectors.RequestOptions): Promise<Cohere.GetConnectorResponse>;
    /**
     * Delete a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InternalServerError}
     *
     * @example
     *     await cohere.connectors.delete("id")
     */
    delete(id: string, requestOptions?: Connectors.RequestOptions): Promise<Cohere.DeleteConnectorResponse>;
    /**
     * Update a connector by ID. Omitted fields will not be updated. See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.ForbiddenError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InternalServerError}
     *
     * @example
     *     await cohere.connectors.update("id", {})
     */
    update(id: string, request?: Cohere.UpdateConnectorRequest, requestOptions?: Connectors.RequestOptions): Promise<Cohere.UpdateConnectorResponse>;
    /**
     * Authorize the connector with the given ID for the connector oauth app. See ['Connector Authentication'](https://docs.cohere.com/docs/connector-authentication) for more information.
     * @throws {@link Cohere.BadRequestError}
     * @throws {@link Cohere.NotFoundError}
     * @throws {@link Cohere.TooManyRequestsError}
     * @throws {@link Cohere.InternalServerError}
     *
     * @example
     *     await cohere.connectors.oAuthAuthorize("id", {})
     */
    oAuthAuthorize(id: string, request?: Cohere.ConnectorsOAuthAuthorizeRequest, requestOptions?: Connectors.RequestOptions): Promise<Cohere.OAuthAuthorizeResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
