"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.topicPublishOnly = exports.topicPublishSubscribe = exports.topicSubscribeOnly = exports.cacheWriteOnly = exports.cacheReadOnly = exports.cacheReadWrite = void 0;
const permission_scope_1 = require("./permission-scope");
function cacheReadWrite(cacheSelector) {
    return {
        permissions: [{ role: permission_scope_1.CacheRole.ReadWrite, cache: cacheSelector }],
    };
}
exports.cacheReadWrite = cacheReadWrite;
function cacheReadOnly(cacheSelector) {
    return {
        permissions: [{ role: permission_scope_1.CacheRole.ReadOnly, cache: cacheSelector }],
    };
}
exports.cacheReadOnly = cacheReadOnly;
function cacheWriteOnly(cacheSelector) {
    return {
        permissions: [{ role: permission_scope_1.CacheRole.WriteOnly, cache: cacheSelector }],
    };
}
exports.cacheWriteOnly = cacheWriteOnly;
function topicSubscribeOnly(cacheSelector, topicSelector) {
    return {
        permissions: [
            {
                role: permission_scope_1.TopicRole.SubscribeOnly,
                cache: cacheSelector,
                topic: topicSelector,
            },
        ],
    };
}
exports.topicSubscribeOnly = topicSubscribeOnly;
function topicPublishSubscribe(cacheSelector, topicSelector) {
    return {
        permissions: [
            {
                role: permission_scope_1.TopicRole.PublishSubscribe,
                cache: cacheSelector,
                topic: topicSelector,
            },
        ],
    };
}
exports.topicPublishSubscribe = topicPublishSubscribe;
function topicPublishOnly(cacheSelector, topicSelector) {
    return {
        permissions: [
            {
                role: permission_scope_1.TopicRole.PublishOnly,
                cache: cacheSelector,
                topic: topicSelector,
            },
        ],
    };
}
exports.topicPublishOnly = topicPublishOnly;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbi1zY29wZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXV0aC90b2tlbnMvcGVybWlzc2lvbi1zY29wZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseURBTTRCO0FBRTVCLFNBQWdCLGNBQWMsQ0FBQyxhQUE0QjtJQUN6RCxPQUFPO1FBQ0wsV0FBVyxFQUFFLENBQUMsRUFBQyxJQUFJLEVBQUUsNEJBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBQyxDQUFDO0tBQ2pFLENBQUM7QUFDSixDQUFDO0FBSkQsd0NBSUM7QUFFRCxTQUFnQixhQUFhLENBQUMsYUFBNEI7SUFDeEQsT0FBTztRQUNMLFdBQVcsRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLDRCQUFTLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUMsQ0FBQztLQUNoRSxDQUFDO0FBQ0osQ0FBQztBQUpELHNDQUlDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLGFBQTRCO0lBQ3pELE9BQU87UUFDTCxXQUFXLEVBQUUsQ0FBQyxFQUFDLElBQUksRUFBRSw0QkFBUyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFDLENBQUM7S0FDakUsQ0FBQztBQUNKLENBQUM7QUFKRCx3Q0FJQztBQUVELFNBQWdCLGtCQUFrQixDQUNoQyxhQUE0QixFQUM1QixhQUE0QjtJQUU1QixPQUFPO1FBQ0wsV0FBVyxFQUFFO1lBQ1g7Z0JBQ0UsSUFBSSxFQUFFLDRCQUFTLENBQUMsYUFBYTtnQkFDN0IsS0FBSyxFQUFFLGFBQWE7Z0JBQ3BCLEtBQUssRUFBRSxhQUFhO2FBQ3JCO1NBQ0Y7S0FDRixDQUFDO0FBQ0osQ0FBQztBQWJELGdEQWFDO0FBRUQsU0FBZ0IscUJBQXFCLENBQ25DLGFBQTRCLEVBQzVCLGFBQTRCO0lBRTVCLE9BQU87UUFDTCxXQUFXLEVBQUU7WUFDWDtnQkFDRSxJQUFJLEVBQUUsNEJBQVMsQ0FBQyxnQkFBZ0I7Z0JBQ2hDLEtBQUssRUFBRSxhQUFhO2dCQUNwQixLQUFLLEVBQUUsYUFBYTthQUNyQjtTQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFiRCxzREFhQztBQUVELFNBQWdCLGdCQUFnQixDQUM5QixhQUE0QixFQUM1QixhQUE0QjtJQUU1QixPQUFPO1FBQ0wsV0FBVyxFQUFFO1lBQ1g7Z0JBQ0UsSUFBSSxFQUFFLDRCQUFTLENBQUMsV0FBVztnQkFDM0IsS0FBSyxFQUFFLGFBQWE7Z0JBQ3BCLEtBQUssRUFBRSxhQUFhO2FBQ3JCO1NBQ0Y7S0FDRixDQUFDO0FBQ0osQ0FBQztBQWJELDRDQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2FjaGVSb2xlLFxuICBDYWNoZVNlbGVjdG9yLFxuICBQZXJtaXNzaW9uU2NvcGUsXG4gIFRvcGljUm9sZSxcbiAgVG9waWNTZWxlY3Rvcixcbn0gZnJvbSAnLi9wZXJtaXNzaW9uLXNjb3BlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlUmVhZFdyaXRlKGNhY2hlU2VsZWN0b3I6IENhY2hlU2VsZWN0b3IpOiBQZXJtaXNzaW9uU2NvcGUge1xuICByZXR1cm4ge1xuICAgIHBlcm1pc3Npb25zOiBbe3JvbGU6IENhY2hlUm9sZS5SZWFkV3JpdGUsIGNhY2hlOiBjYWNoZVNlbGVjdG9yfV0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWNoZVJlYWRPbmx5KGNhY2hlU2VsZWN0b3I6IENhY2hlU2VsZWN0b3IpOiBQZXJtaXNzaW9uU2NvcGUge1xuICByZXR1cm4ge1xuICAgIHBlcm1pc3Npb25zOiBbe3JvbGU6IENhY2hlUm9sZS5SZWFkT25seSwgY2FjaGU6IGNhY2hlU2VsZWN0b3J9XSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlV3JpdGVPbmx5KGNhY2hlU2VsZWN0b3I6IENhY2hlU2VsZWN0b3IpOiBQZXJtaXNzaW9uU2NvcGUge1xuICByZXR1cm4ge1xuICAgIHBlcm1pc3Npb25zOiBbe3JvbGU6IENhY2hlUm9sZS5Xcml0ZU9ubHksIGNhY2hlOiBjYWNoZVNlbGVjdG9yfV0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b3BpY1N1YnNjcmliZU9ubHkoXG4gIGNhY2hlU2VsZWN0b3I6IENhY2hlU2VsZWN0b3IsXG4gIHRvcGljU2VsZWN0b3I6IFRvcGljU2VsZWN0b3Jcbik6IFBlcm1pc3Npb25TY29wZSB7XG4gIHJldHVybiB7XG4gICAgcGVybWlzc2lvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgcm9sZTogVG9waWNSb2xlLlN1YnNjcmliZU9ubHksXG4gICAgICAgIGNhY2hlOiBjYWNoZVNlbGVjdG9yLFxuICAgICAgICB0b3BpYzogdG9waWNTZWxlY3RvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvcGljUHVibGlzaFN1YnNjcmliZShcbiAgY2FjaGVTZWxlY3RvcjogQ2FjaGVTZWxlY3RvcixcbiAgdG9waWNTZWxlY3RvcjogVG9waWNTZWxlY3RvclxuKTogUGVybWlzc2lvblNjb3BlIHtcbiAgcmV0dXJuIHtcbiAgICBwZXJtaXNzaW9uczogW1xuICAgICAge1xuICAgICAgICByb2xlOiBUb3BpY1JvbGUuUHVibGlzaFN1YnNjcmliZSxcbiAgICAgICAgY2FjaGU6IGNhY2hlU2VsZWN0b3IsXG4gICAgICAgIHRvcGljOiB0b3BpY1NlbGVjdG9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9waWNQdWJsaXNoT25seShcbiAgY2FjaGVTZWxlY3RvcjogQ2FjaGVTZWxlY3RvcixcbiAgdG9waWNTZWxlY3RvcjogVG9waWNTZWxlY3RvclxuKTogUGVybWlzc2lvblNjb3BlIHtcbiAgcmV0dXJuIHtcbiAgICBwZXJtaXNzaW9uczogW1xuICAgICAge1xuICAgICAgICByb2xlOiBUb3BpY1JvbGUuUHVibGlzaE9ubHksXG4gICAgICAgIGNhY2hlOiBjYWNoZVNlbGVjdG9yLFxuICAgICAgICB0b3BpYzogdG9waWNTZWxlY3RvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfTtcbn1cbiJdfQ==