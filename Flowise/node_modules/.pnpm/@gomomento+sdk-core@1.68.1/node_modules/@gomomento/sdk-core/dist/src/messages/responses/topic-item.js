"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicItem = void 0;
const utils_1 = require("../../internal/utils");
/**
 * Represents the data received from a topic subscription.
 *
 * @remarks A subscription is created by calling {@link TopicClient.subscribe}.
 * The value is guaranteed to be either a {@link string} or a {@link Uint8Array}.
 * Call the appropriate accessor if you know the type of the value.
 */
class TopicItem {
    constructor(_value, options) {
        this._value = _value;
        this._tokenId = options === null || options === void 0 ? void 0 : options.tokenId;
    }
    /**
     * Returns the data read from the stream.
     * @returns string | Uint8Array
     */
    value() {
        return this._value;
    }
    /**
     * Returns the data read from the stream as a {@link string}.
     * @returns string
     */
    valueString() {
        return this.value().toString();
    }
    /**
     * Returns the data read from the stream as a {@link Uint8Array}.
     * @returns Uint8Array
     */
    valueUint8Array() {
        return this.value();
    }
    /**
     * Optionally returns the publisher ID from the steam if it exists.
     * @returns string | undefined
     */
    tokenId() {
        return this._tokenId;
    }
    toString() {
        const displayValue = (0, utils_1.truncateString)(this.value().toString());
        let displayString = `${this.constructor.name}: ${displayValue}`;
        if (this._tokenId !== undefined) {
            displayString += `; Token Id: ${this._tokenId}`;
        }
        return displayString;
    }
}
exports.TopicItem = TopicItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9waWMtaXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvdG9waWMtaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxnREFBb0Q7QUFNcEQ7Ozs7OztHQU1HO0FBQ0gsTUFBYSxTQUFTO0lBSXBCLFlBQVksTUFBMkIsRUFBRSxPQUEwQjtRQUNqRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxPQUFPLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLEtBQUs7UUFDVixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGVBQWU7UUFDcEIsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFnQixDQUFDO0lBQ3BDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxRQUFRO1FBQ2IsTUFBTSxZQUFZLEdBQUcsSUFBQSxzQkFBYyxFQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzdELElBQUksYUFBYSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFLENBQUM7UUFFaEUsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMvQixhQUFhLElBQUksZUFBZSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakQ7UUFFRCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFuREQsOEJBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0cnVuY2F0ZVN0cmluZ30gZnJvbSAnLi4vLi4vaW50ZXJuYWwvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljSXRlbU9wdGlvbnMge1xuICB0b2tlbklkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGRhdGEgcmVjZWl2ZWQgZnJvbSBhIHRvcGljIHN1YnNjcmlwdGlvbi5cbiAqXG4gKiBAcmVtYXJrcyBBIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGJ5IGNhbGxpbmcge0BsaW5rIFRvcGljQ2xpZW50LnN1YnNjcmliZX0uXG4gKiBUaGUgdmFsdWUgaXMgZ3VhcmFudGVlZCB0byBiZSBlaXRoZXIgYSB7QGxpbmsgc3RyaW5nfSBvciBhIHtAbGluayBVaW50OEFycmF5fS5cbiAqIENhbGwgdGhlIGFwcHJvcHJpYXRlIGFjY2Vzc29yIGlmIHlvdSBrbm93IHRoZSB0eXBlIG9mIHRoZSB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRvcGljSXRlbSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3ZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5O1xuICBwcml2YXRlIHJlYWRvbmx5IF90b2tlbklkPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKF92YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheSwgb3B0aW9ucz86IFRvcGljSXRlbU9wdGlvbnMpIHtcbiAgICB0aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICB0aGlzLl90b2tlbklkID0gb3B0aW9ucz8udG9rZW5JZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIHJlYWQgZnJvbSB0aGUgc3RyZWFtLlxuICAgKiBAcmV0dXJucyBzdHJpbmcgfCBVaW50OEFycmF5XG4gICAqL1xuICBwdWJsaWMgdmFsdWUoKTogc3RyaW5nIHwgVWludDhBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRhdGEgcmVhZCBmcm9tIHRoZSBzdHJlYW0gYXMgYSB7QGxpbmsgc3RyaW5nfS5cbiAgICogQHJldHVybnMgc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgdmFsdWVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSgpLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSByZWFkIGZyb20gdGhlIHN0cmVhbSBhcyBhIHtAbGluayBVaW50OEFycmF5fS5cbiAgICogQHJldHVybnMgVWludDhBcnJheVxuICAgKi9cbiAgcHVibGljIHZhbHVlVWludDhBcnJheSgpOiBVaW50OEFycmF5IHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSgpIGFzIFVpbnQ4QXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogT3B0aW9uYWxseSByZXR1cm5zIHRoZSBwdWJsaXNoZXIgSUQgZnJvbSB0aGUgc3RlYW0gaWYgaXQgZXhpc3RzLlxuICAgKiBAcmV0dXJucyBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICovXG4gIHB1YmxpYyB0b2tlbklkKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX3Rva2VuSWQ7XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSB0cnVuY2F0ZVN0cmluZyh0aGlzLnZhbHVlKCkudG9TdHJpbmcoKSk7XG4gICAgbGV0IGRpc3BsYXlTdHJpbmcgPSBgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9OiAke2Rpc3BsYXlWYWx1ZX1gO1xuXG4gICAgaWYgKHRoaXMuX3Rva2VuSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGlzcGxheVN0cmluZyArPSBgOyBUb2tlbiBJZDogJHt0aGlzLl90b2tlbklkfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpc3BsYXlTdHJpbmc7XG4gIH1cbn1cbiJdfQ==