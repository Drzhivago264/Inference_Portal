"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvMomentoTokenProvider = exports.StringMomentoTokenProvider = exports.CredentialProvider = void 0;
const utils_1 = require("../internal/utils");
function isBaseEndpointOverride(endpointOverrides) {
    return endpointOverrides.baseEndpoint !== undefined;
}
function isAllEndpoints(endpointOverrides) {
    const allEndpoints = endpointOverrides;
    return (allEndpoints.cacheEndpoint !== undefined &&
        allEndpoints.controlEndpoint !== undefined &&
        allEndpoints.tokenEndpoint !== undefined &&
        allEndpoints.vectorEndpoint !== undefined);
}
/**
 * Provides information that the CacheClient needs in order to establish a connection to and authenticate with
 * the Momento service.
 * @export
 * @interface CredentialProvider
 */
class CredentialProvider {
    static fromEnvironmentVariable(props) {
        return new EnvMomentoTokenProvider(props);
    }
    static fromEnvVar(props) {
        return new EnvMomentoTokenProvider(props);
    }
    static fromString(props) {
        return new StringMomentoTokenProvider(props);
    }
}
exports.CredentialProvider = CredentialProvider;
class CredentialProviderBase {
    valueOf() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const entries = Object.entries(this).filter(([k]) => k !== 'authToken');
        const clone = (0, utils_1.fromEntries)(entries);
        return clone.valueOf();
    }
}
/**
 * Reads and parses a momento auth token stored in a String
 * @export
 * @class StringMomentoTokenProvider
 */
class StringMomentoTokenProvider extends CredentialProviderBase {
    /**
     * @param {StringMomentoTokenProviderProps} props configuration options for the token provider
     */
    constructor(props) {
        if (typeof props === 'string') {
            props = { apiKey: props };
        }
        super();
        let key;
        if ('authToken' in props) {
            key = props.authToken;
        }
        else if ('apiKey' in props) {
            key = props.apiKey;
        }
        else {
            throw new Error('Missing required property: authToken or apiKey');
        }
        const decodedToken = (0, utils_1.decodeAuthToken)(key);
        this.apiKey = decodedToken.authToken;
        if (props.endpointOverrides === undefined) {
            this.endpointsOverridden = false;
            if (decodedToken.controlEndpoint === undefined) {
                throw new Error('Malformed token; unable to determine control endpoint.  Depending on the type of token you are using, you may need to specify the controlEndpoint explicitly.');
            }
            if (decodedToken.cacheEndpoint === undefined) {
                throw new Error('Malformed token; unable to determine cache endpoint.  Depending on the type of token you are using, you may need to specify the cacheEndpoint explicitly.');
            }
            if (decodedToken.tokenEndpoint === undefined) {
                throw new Error('Malformed token; unable to determine token endpoint.  Depending on the type of token you are using, you may need to specify the tokenEndpoint explicitly.');
            }
            if (decodedToken.vectorEndpoint === undefined) {
                throw new Error('Malformed token; unable to determine vector endpoint.  Depending on the type of token you are using, you may need to specify the vectorEndpoint explicitly.');
            }
            this.allEndpoints = {
                controlEndpoint: decodedToken.controlEndpoint,
                cacheEndpoint: decodedToken.cacheEndpoint,
                tokenEndpoint: decodedToken.tokenEndpoint,
                vectorEndpoint: decodedToken.vectorEndpoint,
            };
        }
        else if (isAllEndpoints(props.endpointOverrides)) {
            this.endpointsOverridden = true;
            this.allEndpoints = props.endpointOverrides;
        }
        else if (isBaseEndpointOverride(props.endpointOverrides)) {
            this.endpointsOverridden = true;
            this.allEndpoints = (0, utils_1.populateAllEndpointsFromBaseEndpoint)(props.endpointOverrides);
        }
        else {
            throw new Error(
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            `Unsupported endpointOverrides: ${props.endpointOverrides}`);
        }
    }
    getAuthToken() {
        return this.apiKey;
    }
    getCacheEndpoint() {
        return this.allEndpoints.cacheEndpoint;
    }
    getControlEndpoint() {
        return this.allEndpoints.controlEndpoint;
    }
    getTokenEndpoint() {
        return this.allEndpoints.tokenEndpoint;
    }
    getVectorEndpoint() {
        return this.allEndpoints.vectorEndpoint;
    }
    areEndpointsOverridden() {
        return this.endpointsOverridden;
    }
}
exports.StringMomentoTokenProvider = StringMomentoTokenProvider;
/**
 * Reads and parses a momento auth token stored as an environment variable.
 * @export
 * @class EnvMomentoTokenProvider
 */
class EnvMomentoTokenProvider extends StringMomentoTokenProvider {
    /**
     * @param {EnvMomentoTokenProviderProps} props configuration options for the token provider
     */
    constructor(props) {
        if (typeof props === 'string') {
            props = { environmentVariableName: props };
        }
        const authToken = process.env[props.environmentVariableName];
        if (!authToken) {
            throw new Error(`Missing required environment variable ${props.environmentVariableName}`);
        }
        super({
            authToken: authToken,
            endpointOverrides: props.endpointOverrides,
        });
        this.environmentVariableName = props.environmentVariableName;
    }
}
exports.EnvMomentoTokenProvider = EnvMomentoTokenProvider;
//# sourceMappingURL=data:application/json;base64,