import { ResponseBase } from './response-base';
import { SdkError } from '../../errors';
import { ExpiresAt } from '../../utils';
export declare abstract class Response extends ResponseBase {
}
declare class _Success extends Response {
    readonly apiKey: string;
    readonly refreshToken: string;
    readonly endpoint: string;
    readonly expiresAt: ExpiresAt;
    /**
     * @deprecated Use `apiKey` instead.
     * @returns {string}
     */
    get authToken(): string;
    constructor(apiKey: string, refreshToken: string, endpoint: string, expiresAt: ExpiresAt);
}
declare const Success_base: {
    new (...args: any[]): {
        readonly is_success: boolean;
    };
} & typeof _Success;
/**
 * Indicates a Successful generate api token request.
 */
export declare class Success extends Success_base {
}
declare class _Error extends Response {
    protected _innerException: SdkError;
    constructor(_innerException: SdkError);
}
declare const Error_base: {
    new (...args: any[]): {
        _innerException: SdkError;
        message(): string;
        innerException(): SdkError;
        errorCode(): import("../../errors").MomentoErrorCode;
        toString(): string;
    };
} & typeof _Error;
/**
 * Indicates that an error occurred during the generate api token request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends Error_base {
}
export {};
