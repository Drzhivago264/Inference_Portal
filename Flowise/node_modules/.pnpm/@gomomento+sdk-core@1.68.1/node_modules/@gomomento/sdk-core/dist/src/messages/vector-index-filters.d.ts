/**
 * Base class for all vector index filter expressions.
 */
export declare abstract class VectorFilterExpression {
    abstract toString(): string;
    /**
     * Creates an AND expression between this expression and another one.
     * @param other The other expression.
     * @returns The AND expression.
     */
    and(other: VectorFilterExpression): VectorFilterAndExpression;
    /**
     * Creates an OR expression between this expression and another one.
     * @param other The other expression.
     * @returns The OR expression.
     */
    or(other: VectorFilterExpression): VectorFilterOrExpression;
    /**
     * Negates this expression.
     * @returns The negated expression.
     */
    not(): VectorFilterNotExpression;
}
/**
 * Factory for creating vector filter expressions.
 */
export declare class VectorFilterExpressions {
    private constructor();
    /**
     * Creates an {@link VectorFilterAndExpression} between two vector filter expressions.
     * @param firstExpression The first expression.
     * @param secondExpression The second expression.
     * @returns The AND expression.
     */
    static and(firstExpression: VectorFilterExpression, secondExpression: VectorFilterExpression): VectorFilterAndExpression;
    /**
     * Creates an {@link VectorFilterOrExpression} between two vector filter expressions.
     * @param firstExpression The first expression.
     * @param secondExpression The second expression.
     * @returns The OR expression.
     */
    static or(firstExpression: VectorFilterExpression, secondExpression: VectorFilterExpression): VectorFilterOrExpression;
    /**
     * Creates a {@link VectorFilterNotExpression} expression of a vector filter expression.
     * @param expression The expression.
     * @returns The NOT expression.
     */
    static not(expression: VectorFilterExpression): VectorFilterNotExpression;
    /**
     * Creates a {@link VectorFilterEqualsExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The equals expression.
     */
    static equals(field: string, value: string | number | boolean): VectorFilterEqualsExpression;
    /**
     * Creates a {@link VectorFilterGreaterThanExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The greater than expression.
     */
    static greaterThan(field: string, value: number): VectorFilterGreaterThanExpression;
    /**
     * Creates a {@link VectorFilterGreaterThanOrEqualExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The greater than or equal expression.
     */
    static greaterThanOrEqual(field: string, value: number): VectorFilterGreaterThanOrEqualExpression;
    /**
     * Creates a {@link VectorFilterLessThanExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The less than expression.
     */
    static lessThan(field: string, value: number): VectorFilterLessThanExpression;
    /**
     * Creates a {@link VectorFilterLessThanOrEqualExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The less than or equal expression.
     */
    static lessThanOrEqual(field: string, value: number): VectorFilterLessThanOrEqualExpression;
    /**
     * Creates a {@link VectorFilterListContainsExpression} between a list-valued field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The contains expression.
     */
    static listContains(field: string, value: string): VectorFilterListContainsExpression;
    /**
     * Creates a {@link VectorFilterIdInSetExpression} for a set of ids.
     * @param ids The ids.
     */
    static idInSet(ids: string[]): VectorFilterIdInSetExpression;
}
/**
 * Represents an AND expression between two vector filter expressions.
 */
export declare class VectorFilterAndExpression extends VectorFilterExpression {
    /**
     * The first expression to AND.
     * @private
     */
    private readonly firstExpression;
    /**
     * The second expression to AND.
     * @private
     */
    private readonly secondExpression;
    constructor(firstExpression: VectorFilterExpression, secondExpression: VectorFilterExpression);
    get FirstExpression(): VectorFilterExpression;
    get SecondExpression(): VectorFilterExpression;
    toString(): string;
}
/**
 * Represents an OR expression between two vector filter expressions.
 */
export declare class VectorFilterOrExpression extends VectorFilterExpression {
    /**
     * The first expression to OR.
     * @private
     */
    private readonly firstExpression;
    /**
     * The second expression to OR.
     * @private
     */
    private readonly secondExpression;
    constructor(firstExpression: VectorFilterExpression, secondExpression: VectorFilterExpression);
    get FirstExpression(): VectorFilterExpression;
    get SecondExpression(): VectorFilterExpression;
    toString(): string;
}
/**
 * Represents a NOT expression of a vector filter expression.
 */
export declare class VectorFilterNotExpression extends VectorFilterExpression {
    /**
     * The expression to negate.
     * @private
     */
    private readonly expression;
    constructor(expression: VectorFilterExpression);
    get Expression(): VectorFilterExpression;
    toString(): string;
}
/**
 * Represents an equals expression between a field and a value.
 */
export declare class VectorFilterEqualsExpression extends VectorFilterExpression {
    /**
     * The field to compare.
     * @private
     */
    private readonly field;
    /**
     * The value to test for equality.
     * @private
     */
    private readonly value;
    constructor(field: string, value: string | number | boolean);
    get Field(): string;
    get Value(): string | number | boolean;
    toString(): string;
}
/**
 * Represents a greater than expression between a field and a value.
 */
export declare class VectorFilterGreaterThanExpression extends VectorFilterExpression {
    /**
     * The field to compare.
     * @private
     */
    private readonly field;
    /**
     * The value to test for greater than.
     * @private
     */
    private readonly value;
    constructor(field: string, value: number);
    get Field(): string;
    get Value(): number;
    toString(): string;
}
/**
 * Represents a greater than or equal expression between a field and a value.
 */
export declare class VectorFilterGreaterThanOrEqualExpression extends VectorFilterExpression {
    /**
     * The field to compare.
     * @private
     */
    private readonly field;
    /**
     * The value to test for greater than or equal.
     * @private
     */
    private readonly value;
    constructor(field: string, value: number);
    get Field(): string;
    get Value(): number;
    toString(): string;
}
/**
 * Represents a less than expression between a field and a value.
 */
export declare class VectorFilterLessThanExpression extends VectorFilterExpression {
    /**
     * The field to compare.
     * @private
     */
    private readonly field;
    /**
     * The value to test for less than.
     * @private
     */
    private readonly value;
    constructor(field: string, value: number);
    get Field(): string;
    get Value(): number;
    toString(): string;
}
/**
 * Represents a less than or equal expression between a field and a value.
 */
export declare class VectorFilterLessThanOrEqualExpression extends VectorFilterExpression {
    /**
     * The field to compare.
     * @private
     */
    private readonly field;
    /**
     * The value to test for less than or equal.
     * @private
     */
    private readonly value;
    constructor(field: string, value: number);
    get Field(): string;
    get Value(): number;
    toString(): string;
}
/**
 * Represents a contains expression between a list-valued field and a value.
 */
export declare class VectorFilterListContainsExpression extends VectorFilterExpression {
    /**
     * The field to compare.
     * @private
     */
    private readonly field;
    /**
     * The value to test for containment, ie does the list contain this value.
     * @private
     */
    private readonly value;
    constructor(field: string, value: string);
    get Field(): string;
    get Value(): string;
    toString(): string;
}
/**
 * Represents an id in set expression.
 * An item is considered a match if its id is in the set of ids.
 */
export declare class VectorFilterIdInSetExpression extends VectorFilterExpression {
    /**
     * The ids to test for membership.
     * @private
     */
    private readonly ids;
    constructor(ids: string[]);
    /**
     * The ids to test for membership.
     * @constructor
     */
    get Ids(): string[];
    toString(): string;
}
