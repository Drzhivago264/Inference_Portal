"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpiresAt = exports.ExpiresIn = void 0;
class Expiration {
    constructor(doesExpire) {
        this._doesExpire = doesExpire;
    }
    /**
     * Whether the token expires or not.
     * @returns {boolean}
     */
    doesExpire() {
        return this._doesExpire;
    }
}
class ExpiresIn extends Expiration {
    /**
     * If doesExpire is false, the refresh token will not have a expiration time, instead validForSeconds will be 'Infinity'.
     * @param {number} [validForSeconds]
     */
    constructor(validForSeconds) {
        super(validForSeconds !== Infinity);
        this._validForSeconds =
            validForSeconds === null ? Infinity : validForSeconds;
    }
    /**
     * Time token is valid for in seconds.
     * @returns {number} Infinity, if token doesn't expire.
     */
    seconds() {
        return this._validForSeconds;
    }
    /**
     * Constructs a ExpiresIn which never expires.
     * @returns {ExpiresIn}
     */
    static never() {
        return new ExpiresIn(Infinity);
    }
    /**
     * Constructs a ExpiresIn with a specified validFor period in seconds.
     * If seconds are undefined, or null, then token never expires.
     * @param validForSeconds
     * @returns {ExpiresIn}
     */
    static seconds(validForSeconds) {
        return new ExpiresIn(validForSeconds);
    }
    /**
     * Constructs a ExpiresIn with a specified validFor period in minutes.
     * @param validForMinutes
     * @returns {ExpiresIn}
     */
    static minutes(validForMinutes) {
        return new ExpiresIn(validForMinutes * 60);
    }
    /**
     * Constructs a ExpiresIn with a specified validFor period in hours.
     * @param validForHours
     * @returns {ExpiresIn}
     */
    static hours(validForHours) {
        return new ExpiresIn(validForHours * 3600);
    }
    /**
     * Constructs an ExpiresIn with a specified validFor period in days.
     * @param validForDays
     * @returns {ExpiresIn}
     */
    static days(validForDays) {
        return new ExpiresIn(validForDays * 86400);
    }
    /**
     * Constructs an ExpiresIn with a specified expiresBy period in epoch format.
     * @param expiresBy
     * @returns {ExpiresIn}
     */
    static epoch(expiresBy) {
        const currentEpoch = new Date().getTime() / 1000;
        const secondsUntilEpoch = Math.round(expiresBy - currentEpoch);
        return new ExpiresIn(secondsUntilEpoch);
    }
}
exports.ExpiresIn = ExpiresIn;
class ExpiresAt extends Expiration {
    constructor(epochTimestamp) {
        super(epochTimestamp !== undefined && epochTimestamp !== 0);
        if (this.doesExpire()) {
            this.validUntil = epochTimestamp;
        }
        else {
            this.validUntil = Infinity;
        }
    }
    /**
     * Returns epoch timestamp of when api token expires.
     * @returns {number}
     */
    epoch() {
        return this.validUntil;
    }
    /**
     * Constructs an ExpiresAt with the specified epoch timestamp,
     * if timestamp is undefined, then epoch timestamp will instead be Infinity.
     * @param epoch
     * @returns {ExpiresAt}
     */
    static fromEpoch(epoch) {
        return new ExpiresAt(epoch);
    }
}
exports.ExpiresAt = ExpiresAt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwaXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9leHBpcmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQWUsVUFBVTtJQUd2QixZQUFzQixVQUFtQjtRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksVUFBVTtRQUNmLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUFFRCxNQUFhLFNBQVUsU0FBUSxVQUFVO0lBR3ZDOzs7T0FHRztJQUNILFlBQW9CLGVBQXVCO1FBQ3pDLEtBQUssQ0FBQyxlQUFlLEtBQUssUUFBUSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGdCQUFnQjtZQUNuQixlQUFlLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztJQUMxRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsS0FBSztRQUNqQixPQUFPLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBdUI7UUFDM0MsT0FBTyxJQUFJLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBdUI7UUFDM0MsT0FBTyxJQUFJLFNBQVMsQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQXFCO1FBQ3ZDLE9BQU8sSUFBSSxTQUFTLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFvQjtRQUNyQyxPQUFPLElBQUksU0FBUyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBaUI7UUFDbkMsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDakQsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsQ0FBQztRQUMvRCxPQUFPLElBQUksU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBNUVELDhCQTRFQztBQUVELE1BQWEsU0FBVSxTQUFRLFVBQVU7SUFHdkMsWUFBb0IsY0FBa0M7UUFDcEQsS0FBSyxDQUFDLGNBQWMsS0FBSyxTQUFTLElBQUksY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsY0FBd0IsQ0FBQztTQUM1QzthQUFNO1lBQ0wsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSztRQUNWLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQXlCO1FBQy9DLE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGO0FBN0JELDhCQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImFic3RyYWN0IGNsYXNzIEV4cGlyYXRpb24ge1xuICBwcml2YXRlIHJlYWRvbmx5IF9kb2VzRXhwaXJlOiBib29sZWFuO1xuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihkb2VzRXhwaXJlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZG9lc0V4cGlyZSA9IGRvZXNFeHBpcmU7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgdG9rZW4gZXhwaXJlcyBvciBub3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgcHVibGljIGRvZXNFeHBpcmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2RvZXNFeHBpcmU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV4cGlyZXNJbiBleHRlbmRzIEV4cGlyYXRpb24ge1xuICBwcml2YXRlIHJlYWRvbmx5IF92YWxpZEZvclNlY29uZHM6IG51bWJlcjtcblxuICAvKipcbiAgICogSWYgZG9lc0V4cGlyZSBpcyBmYWxzZSwgdGhlIHJlZnJlc2ggdG9rZW4gd2lsbCBub3QgaGF2ZSBhIGV4cGlyYXRpb24gdGltZSwgaW5zdGVhZCB2YWxpZEZvclNlY29uZHMgd2lsbCBiZSAnSW5maW5pdHknLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3ZhbGlkRm9yU2Vjb25kc11cbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IodmFsaWRGb3JTZWNvbmRzOiBudW1iZXIpIHtcbiAgICBzdXBlcih2YWxpZEZvclNlY29uZHMgIT09IEluZmluaXR5KTtcbiAgICB0aGlzLl92YWxpZEZvclNlY29uZHMgPVxuICAgICAgdmFsaWRGb3JTZWNvbmRzID09PSBudWxsID8gSW5maW5pdHkgOiB2YWxpZEZvclNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICogVGltZSB0b2tlbiBpcyB2YWxpZCBmb3IgaW4gc2Vjb25kcy5cbiAgICogQHJldHVybnMge251bWJlcn0gSW5maW5pdHksIGlmIHRva2VuIGRvZXNuJ3QgZXhwaXJlLlxuICAgKi9cbiAgcHVibGljIHNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWRGb3JTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBFeHBpcmVzSW4gd2hpY2ggbmV2ZXIgZXhwaXJlcy5cbiAgICogQHJldHVybnMge0V4cGlyZXNJbn1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbmV2ZXIoKTogRXhwaXJlc0luIHtcbiAgICByZXR1cm4gbmV3IEV4cGlyZXNJbihJbmZpbml0eSk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIEV4cGlyZXNJbiB3aXRoIGEgc3BlY2lmaWVkIHZhbGlkRm9yIHBlcmlvZCBpbiBzZWNvbmRzLlxuICAgKiBJZiBzZWNvbmRzIGFyZSB1bmRlZmluZWQsIG9yIG51bGwsIHRoZW4gdG9rZW4gbmV2ZXIgZXhwaXJlcy5cbiAgICogQHBhcmFtIHZhbGlkRm9yU2Vjb25kc1xuICAgKiBAcmV0dXJucyB7RXhwaXJlc0lufVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzZWNvbmRzKHZhbGlkRm9yU2Vjb25kczogbnVtYmVyKTogRXhwaXJlc0luIHtcbiAgICByZXR1cm4gbmV3IEV4cGlyZXNJbih2YWxpZEZvclNlY29uZHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBFeHBpcmVzSW4gd2l0aCBhIHNwZWNpZmllZCB2YWxpZEZvciBwZXJpb2QgaW4gbWludXRlcy5cbiAgICogQHBhcmFtIHZhbGlkRm9yTWludXRlc1xuICAgKiBAcmV0dXJucyB7RXhwaXJlc0lufVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBtaW51dGVzKHZhbGlkRm9yTWludXRlczogbnVtYmVyKTogRXhwaXJlc0luIHtcbiAgICByZXR1cm4gbmV3IEV4cGlyZXNJbih2YWxpZEZvck1pbnV0ZXMgKiA2MCk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIEV4cGlyZXNJbiB3aXRoIGEgc3BlY2lmaWVkIHZhbGlkRm9yIHBlcmlvZCBpbiBob3Vycy5cbiAgICogQHBhcmFtIHZhbGlkRm9ySG91cnNcbiAgICogQHJldHVybnMge0V4cGlyZXNJbn1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaG91cnModmFsaWRGb3JIb3VyczogbnVtYmVyKTogRXhwaXJlc0luIHtcbiAgICByZXR1cm4gbmV3IEV4cGlyZXNJbih2YWxpZEZvckhvdXJzICogMzYwMCk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhbiBFeHBpcmVzSW4gd2l0aCBhIHNwZWNpZmllZCB2YWxpZEZvciBwZXJpb2QgaW4gZGF5cy5cbiAgICogQHBhcmFtIHZhbGlkRm9yRGF5c1xuICAgKiBAcmV0dXJucyB7RXhwaXJlc0lufVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkYXlzKHZhbGlkRm9yRGF5czogbnVtYmVyKTogRXhwaXJlc0luIHtcbiAgICByZXR1cm4gbmV3IEV4cGlyZXNJbih2YWxpZEZvckRheXMgKiA4NjQwMCk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhbiBFeHBpcmVzSW4gd2l0aCBhIHNwZWNpZmllZCBleHBpcmVzQnkgcGVyaW9kIGluIGVwb2NoIGZvcm1hdC5cbiAgICogQHBhcmFtIGV4cGlyZXNCeVxuICAgKiBAcmV0dXJucyB7RXhwaXJlc0lufVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBlcG9jaChleHBpcmVzQnk6IG51bWJlcik6IEV4cGlyZXNJbiB7XG4gICAgY29uc3QgY3VycmVudEVwb2NoID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xuICAgIGNvbnN0IHNlY29uZHNVbnRpbEVwb2NoID0gTWF0aC5yb3VuZChleHBpcmVzQnkgLSBjdXJyZW50RXBvY2gpO1xuICAgIHJldHVybiBuZXcgRXhwaXJlc0luKHNlY29uZHNVbnRpbEVwb2NoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXhwaXJlc0F0IGV4dGVuZHMgRXhwaXJhdGlvbiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsaWRVbnRpbDogbnVtYmVyO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoZXBvY2hUaW1lc3RhbXA6IG51bWJlciB8IHVuZGVmaW5lZCkge1xuICAgIHN1cGVyKGVwb2NoVGltZXN0YW1wICE9PSB1bmRlZmluZWQgJiYgZXBvY2hUaW1lc3RhbXAgIT09IDApO1xuICAgIGlmICh0aGlzLmRvZXNFeHBpcmUoKSkge1xuICAgICAgdGhpcy52YWxpZFVudGlsID0gZXBvY2hUaW1lc3RhbXAgYXMgbnVtYmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbGlkVW50aWwgPSBJbmZpbml0eTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBlcG9jaCB0aW1lc3RhbXAgb2Ygd2hlbiBhcGkgdG9rZW4gZXhwaXJlcy5cbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHB1YmxpYyBlcG9jaCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnZhbGlkVW50aWw7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhbiBFeHBpcmVzQXQgd2l0aCB0aGUgc3BlY2lmaWVkIGVwb2NoIHRpbWVzdGFtcCxcbiAgICogaWYgdGltZXN0YW1wIGlzIHVuZGVmaW5lZCwgdGhlbiBlcG9jaCB0aW1lc3RhbXAgd2lsbCBpbnN0ZWFkIGJlIEluZmluaXR5LlxuICAgKiBAcGFyYW0gZXBvY2hcbiAgICogQHJldHVybnMge0V4cGlyZXNBdH1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUVwb2NoKGVwb2NoOiBudW1iZXIgfCB1bmRlZmluZWQpOiBFeHBpcmVzQXQge1xuICAgIHJldHVybiBuZXcgRXhwaXJlc0F0KGVwb2NoKTtcbiAgfVxufVxuIl19