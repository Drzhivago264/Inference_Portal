"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractTopicClient = void 0;
const index_1 = require("../../../index");
class AbstractTopicClient {
    /**
     * Publishes a value to a topic.
     *
     * @param {string} cacheName - The name of the cache to containing the topic to publish to.
     * @param {string} topicName - The name of the topic to publish to.
     * @param {string | Uint8Array} value - The value to publish.
     * @returns {Promise<TopicPublish.Response>} -
     * {@link TopicPublish.Success} on success.
     * {@link TopicPublish.Error} on failure.
     */
    async publish(cacheName, topicName, value) {
        return await this.pubsubClient.publish(cacheName, topicName, value);
    }
    /**
     * Subscribes to a topic.
     *
     * @param {string} cacheName - The name of the cache to containing the topic to subscribe to.
     * @param {string} topicName - The name of the topic to subscribe to.
     * @param {SubscribeCallOptions} options - The options for the subscription. Defaults to no-op handlers.
     * @param {function} options.onItem - The callback to invoke when data is received. Defaults to no-op.
     * @param {function} options.onError - The callback to invoke when an error is received. Defaults to no-op.
     * @returns {Promise<TopicSubscribe.Response>} -
     * {@link TopicSubscribe.Subscription} on success.
     * {@link TopicSubscribe.Error} on failure.
     */
    async subscribe(cacheName, topicName, options) {
        return await this.pubsubClient.subscribe(cacheName, topicName, options);
    }
    /**
     * Deletes a webhook
     *
     * @param {string} cacheName - The name of the cache associated with the webhook
     * @param {string} webhookName - The name of the webhook
     * @returns {Promise<DeleteWebhook.Response>} -
     * {@link DeleteWebhook.Success} on success.
     * {@link DeleteWebhook.Error} on failure.
     */
    async deleteWebhook(cacheName, webhookName) {
        return await this.webhookClient.deleteWebhook({ cacheName, webhookName });
    }
    /**
     * Lists webhooks associated with a cache
     *
     * @param {string} cacheName - The cache to list webhooks associated with it
     * @returns {Promise<ListWebhooks.Response>} -
     * {@link ListWebhooks.Success} on success.
     * {@link ListWebhooks.Error} on failure.
     */
    async listWebhooks(cacheName) {
        return await this.webhookClient.listWebhooks(cacheName);
    }
    /**
     * Creates a new webhook, or updates an existing one
     *
     * @param {string} cacheName - The name of the cache to associate the webhook with
     * @param {string} webhookName - The name of the webhook
     * @param {PutWebhookCallOptions} options - The options for the webhook
     * @param {string} topicName - The name of the topic for the webhook to listen to
     * @param {WebhookDestination | string} webhookDestination - The url to associate the webhook with
     * @returns {Promise<PutWebhook.Response>} -
     * {@link PutWebhook.Success} on success.
     * {@link PutWebhook.Error} on failure.
     */
    async putWebhook(cacheName, webhookName, options) {
        let _dest = options.destination;
        if (typeof _dest === 'string') {
            _dest = new index_1.PostUrlWebhookDestination(_dest);
        }
        return await this.webhookClient.putWebhook({
            topicName: options.topicName,
            id: {
                cacheName,
                webhookName,
            },
            destination: _dest,
        });
    }
    /**
     * Gets the signing secret for a webhook
     *
     * @param {string} cacheName - The name of the cache associated with the webhook
     * @param {string} webhookName - The name of the webhook
     * @returns {Promise<GetWebhookSecret.Response>} -
     * {@link GetWebhookSecret.Success} on success.
     * {@link GetWebhookSecret.Error} on failure.
     */
    async getWebhookSecret(cacheName, webhookName) {
        return await this.webhookClient.getWebhookSecret({ cacheName, webhookName });
    }
    /**
     * Rotates the signing secret for a webhook
     *
     * @param {string} cacheName - The name of the cache associated with the webhook
     * @param {string} webhookName - The name of the webhook
     * @returns {Promise<RotateWebhookSecret.Response>} -
     * {@link RotateWebhookSecret.Success} on success.
     * {@link RotateWebhookSecret.Error} on failure.
     */
    async rotateWebhookSecret(cacheName, webhookName) {
        return await this.webhookClient.rotateWebhookSecret({
            cacheName,
            webhookName,
        });
    }
}
exports.AbstractTopicClient = AbstractTopicClient;
//# sourceMappingURL=data:application/json;base64,