"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = exports.Response = void 0;
const errors_1 = require("../../errors");
const response_base_1 = require("./response-base");
const CacheDictionaryGetFieldResponse = require("./cache-dictionary-get-field");
const grpc_response_types_1 = require("./grpc-response-types");
const TEXT_DECODER = new TextDecoder();
/**
 * Parent response type for a dictionary get fields request.  The
 * response object is resolved to a type-safe object of one of
 * the following subtypes:
 *
 * - {Hit}
 * - {Miss}
 * - {Error}
 *
 * `instanceof` type guards can be used to operate on the appropriate subtype.
 * @example
 * For example:
 * ```
 * if (response instanceof CacheDictionaryGetFields.Error) {
 *   // Handle error as appropriate.  The compiler will smart-cast `response` to type
 *   // `CacheDictionaryGetFields.Error` in this block, so you will have access to the properties
 *   // of the Error class; e.g. `response.errorCode()`.
 * }
 * ```
 */
class Response extends response_base_1.ResponseBase {
    value() {
        if (this instanceof Hit) {
            return this.value();
        }
        return undefined;
    }
}
exports.Response = Response;
class _Hit extends Response {
    constructor(items, fields) {
        super();
        this.responses = [];
        this.items = items;
        this.fields = fields;
        items.forEach((item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                this.responses.push(new CacheDictionaryGetFieldResponse.Hit(item.cacheBody, fields[index]));
            }
            else if (item.result === grpc_response_types_1._ECacheResult.Miss) {
                this.responses.push(new CacheDictionaryGetFieldResponse.Miss(fields[index]));
            }
            else {
                this.responses.push(new CacheDictionaryGetFieldResponse.Error(new errors_1.UnknownError(item.result.toString()), fields[index]));
            }
        });
    }
    /**
     * Returns the data as a Map whose keys and values are byte arrays.
     * @returns {Map<Uint8Array, Uint8Array>}
     */
    valueMapUint8ArrayUint8Array() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc.set(this.fields[index], item.cacheBody);
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * @returns {Map<string, string>}
     */
    valueMapStringString() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc.set(TEXT_DECODER.decode(this.fields[index]), TEXT_DECODER.decode(item.cacheBody));
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, string>}
     */
    valueMap() {
        return this.valueMapStringString();
    }
    /**
     * Returns the data as a Map whose keys are utf-8 strings, decoded from the underlying byte array, and whose values
     * are byte arrays.
     * @returns {Map<string, Uint8Array>}
     */
    valueMapStringUint8Array() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc.set(TEXT_DECODER.decode(this.fields[index]), item.cacheBody);
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, string>}
     */
    valueRecordStringString() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc[TEXT_DECODER.decode(this.fields[index])] = TEXT_DECODER.decode(item.cacheBody);
            }
            return acc;
        }, {});
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    valueRecord() {
        return this.valueRecordStringString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    value() {
        return this.valueRecordStringString();
    }
    /**
     * Returns the data as a Record whose keys are utf-8 strings, decoded from the underlying byte array, and whose
     * values are byte arrays.  This can be used in most places where an Object is desired.
     * @returns {Record<string, Uint8Array>}
     */
    valueRecordStringUint8Array() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc[TEXT_DECODER.decode(this.fields[index])] = item.cacheBody;
            }
            return acc;
        }, {});
    }
    toString() {
        let stringRepresentation = '';
        this.valueMapStringString().forEach((value, key) => {
            const keyValue = `${key}: ${value}, `;
            stringRepresentation = stringRepresentation + keyValue;
        });
        return `${super.toString()}: valueDictionaryStringString: ${stringRepresentation.slice(0, -2)}`;
    }
}
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends (0, response_base_1.ResponseHit)(_Hit) {
}
exports.Hit = Hit;
class _Miss extends Response {
}
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends (0, response_base_1.ResponseMiss)(_Miss) {
}
exports.Miss = Miss;
class _Error extends Response {
    constructor(_innerException) {
        super();
        this._innerException = _innerException;
    }
}
/**
 * Indicates that an error occurred during the dictionary get fields request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends (0, response_base_1.ResponseError)(_Error) {
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,