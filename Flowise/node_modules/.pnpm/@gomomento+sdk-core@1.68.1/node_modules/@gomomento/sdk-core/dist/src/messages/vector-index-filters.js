"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorFilterIdInSetExpression = exports.VectorFilterListContainsExpression = exports.VectorFilterLessThanOrEqualExpression = exports.VectorFilterLessThanExpression = exports.VectorFilterGreaterThanOrEqualExpression = exports.VectorFilterGreaterThanExpression = exports.VectorFilterEqualsExpression = exports.VectorFilterNotExpression = exports.VectorFilterOrExpression = exports.VectorFilterAndExpression = exports.VectorFilterExpressions = exports.VectorFilterExpression = void 0;
/**
 * Base class for all vector index filter expressions.
 */
class VectorFilterExpression {
    /**
     * Creates an AND expression between this expression and another one.
     * @param other The other expression.
     * @returns The AND expression.
     */
    and(other) {
        return VectorFilterExpressions.and(this, other);
    }
    /**
     * Creates an OR expression between this expression and another one.
     * @param other The other expression.
     * @returns The OR expression.
     */
    or(other) {
        return VectorFilterExpressions.or(this, other);
    }
    /**
     * Negates this expression.
     * @returns The negated expression.
     */
    not() {
        return VectorFilterExpressions.not(this);
    }
}
exports.VectorFilterExpression = VectorFilterExpression;
/**
 * Factory for creating vector filter expressions.
 */
class VectorFilterExpressions {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    constructor() { }
    /**
     * Creates an {@link VectorFilterAndExpression} between two vector filter expressions.
     * @param firstExpression The first expression.
     * @param secondExpression The second expression.
     * @returns The AND expression.
     */
    static and(firstExpression, secondExpression) {
        return new VectorFilterAndExpression(firstExpression, secondExpression);
    }
    /**
     * Creates an {@link VectorFilterOrExpression} between two vector filter expressions.
     * @param firstExpression The first expression.
     * @param secondExpression The second expression.
     * @returns The OR expression.
     */
    static or(firstExpression, secondExpression) {
        return new VectorFilterOrExpression(firstExpression, secondExpression);
    }
    /**
     * Creates a {@link VectorFilterNotExpression} expression of a vector filter expression.
     * @param expression The expression.
     * @returns The NOT expression.
     */
    static not(expression) {
        return new VectorFilterNotExpression(expression);
    }
    /**
     * Creates a {@link VectorFilterEqualsExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The equals expression.
     */
    static equals(field, value) {
        return new VectorFilterEqualsExpression(field, value);
    }
    /**
     * Creates a {@link VectorFilterGreaterThanExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The greater than expression.
     */
    static greaterThan(field, value) {
        return new VectorFilterGreaterThanExpression(field, value);
    }
    /**
     * Creates a {@link VectorFilterGreaterThanOrEqualExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The greater than or equal expression.
     */
    static greaterThanOrEqual(field, value) {
        return new VectorFilterGreaterThanOrEqualExpression(field, value);
    }
    /**
     * Creates a {@link VectorFilterLessThanExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The less than expression.
     */
    static lessThan(field, value) {
        return new VectorFilterLessThanExpression(field, value);
    }
    /**
     * Creates a {@link VectorFilterLessThanOrEqualExpression} between a field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The less than or equal expression.
     */
    static lessThanOrEqual(field, value) {
        return new VectorFilterLessThanOrEqualExpression(field, value);
    }
    /**
     * Creates a {@link VectorFilterListContainsExpression} between a list-valued field and a value.
     * @param field The field.
     * @param value The value.
     * @returns The contains expression.
     */
    static listContains(field, value) {
        return new VectorFilterListContainsExpression(field, value);
    }
    /**
     * Creates a {@link VectorFilterIdInSetExpression} for a set of ids.
     * @param ids The ids.
     */
    static idInSet(ids) {
        return new VectorFilterIdInSetExpression(ids);
    }
}
exports.VectorFilterExpressions = VectorFilterExpressions;
/**
 * Represents an AND expression between two vector filter expressions.
 */
class VectorFilterAndExpression extends VectorFilterExpression {
    constructor(firstExpression, secondExpression) {
        super();
        this.firstExpression = firstExpression;
        this.secondExpression = secondExpression;
    }
    get FirstExpression() {
        return this.firstExpression;
    }
    get SecondExpression() {
        return this.secondExpression;
    }
    toString() {
        return `(${this.firstExpression.toString()} AND ${this.secondExpression.toString()})`;
    }
}
exports.VectorFilterAndExpression = VectorFilterAndExpression;
/**
 * Represents an OR expression between two vector filter expressions.
 */
class VectorFilterOrExpression extends VectorFilterExpression {
    constructor(firstExpression, secondExpression) {
        super();
        this.firstExpression = firstExpression;
        this.secondExpression = secondExpression;
    }
    get FirstExpression() {
        return this.firstExpression;
    }
    get SecondExpression() {
        return this.secondExpression;
    }
    toString() {
        return `(${this.firstExpression.toString()} OR ${this.secondExpression.toString()})`;
    }
}
exports.VectorFilterOrExpression = VectorFilterOrExpression;
/**
 * Represents a NOT expression of a vector filter expression.
 */
class VectorFilterNotExpression extends VectorFilterExpression {
    constructor(expression) {
        super();
        this.expression = expression;
    }
    get Expression() {
        return this.expression;
    }
    toString() {
        return `NOT ${this.expression.toString()}`;
    }
}
exports.VectorFilterNotExpression = VectorFilterNotExpression;
/**
 * Represents an equals expression between a field and a value.
 */
class VectorFilterEqualsExpression extends VectorFilterExpression {
    constructor(field, value) {
        super();
        this.field = field;
        this.value = value;
    }
    get Field() {
        return this.field;
    }
    get Value() {
        return this.value;
    }
    toString() {
        return `${this.field}=${this.value.toString()}`;
    }
}
exports.VectorFilterEqualsExpression = VectorFilterEqualsExpression;
/**
 * Represents a greater than expression between a field and a value.
 */
class VectorFilterGreaterThanExpression extends VectorFilterExpression {
    constructor(field, value) {
        super();
        this.field = field;
        this.value = value;
    }
    get Field() {
        return this.field;
    }
    get Value() {
        return this.value;
    }
    toString() {
        return `${this.field} > ${this.value.toString()}`;
    }
}
exports.VectorFilterGreaterThanExpression = VectorFilterGreaterThanExpression;
/**
 * Represents a greater than or equal expression between a field and a value.
 */
class VectorFilterGreaterThanOrEqualExpression extends VectorFilterExpression {
    constructor(field, value) {
        super();
        this.field = field;
        this.value = value;
    }
    get Field() {
        return this.field;
    }
    get Value() {
        return this.value;
    }
    toString() {
        return `${this.field} >= ${this.value.toString()}`;
    }
}
exports.VectorFilterGreaterThanOrEqualExpression = VectorFilterGreaterThanOrEqualExpression;
/**
 * Represents a less than expression between a field and a value.
 */
class VectorFilterLessThanExpression extends VectorFilterExpression {
    constructor(field, value) {
        super();
        this.field = field;
        this.value = value;
    }
    get Field() {
        return this.field;
    }
    get Value() {
        return this.value;
    }
    toString() {
        return `${this.field} < ${this.value.toString()}`;
    }
}
exports.VectorFilterLessThanExpression = VectorFilterLessThanExpression;
/**
 * Represents a less than or equal expression between a field and a value.
 */
class VectorFilterLessThanOrEqualExpression extends VectorFilterExpression {
    constructor(field, value) {
        super();
        this.field = field;
        this.value = value;
    }
    get Field() {
        return this.field;
    }
    get Value() {
        return this.value;
    }
    toString() {
        return `${this.field} <= ${this.value.toString()}`;
    }
}
exports.VectorFilterLessThanOrEqualExpression = VectorFilterLessThanOrEqualExpression;
/**
 * Represents a contains expression between a list-valued field and a value.
 */
class VectorFilterListContainsExpression extends VectorFilterExpression {
    constructor(field, value) {
        super();
        this.field = field;
        this.value = value;
    }
    get Field() {
        return this.field;
    }
    get Value() {
        return this.value;
    }
    toString() {
        return `${this.field} contains ${this.value.toString()}`;
    }
}
exports.VectorFilterListContainsExpression = VectorFilterListContainsExpression;
/**
 * Represents an id in set expression.
 * An item is considered a match if its id is in the set of ids.
 */
class VectorFilterIdInSetExpression extends VectorFilterExpression {
    constructor(ids) {
        super();
        this.ids = ids;
    }
    /**
     * The ids to test for membership.
     * @constructor
     */
    get Ids() {
        return this.ids;
    }
    toString() {
        return `id in [${this.ids.join(', ')}]`;
    }
}
exports.VectorFilterIdInSetExpression = VectorFilterIdInSetExpression;
//# sourceMappingURL=data:application/json;base64,