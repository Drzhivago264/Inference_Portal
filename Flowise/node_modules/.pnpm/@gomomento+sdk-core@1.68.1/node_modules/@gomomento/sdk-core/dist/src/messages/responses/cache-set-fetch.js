"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = exports.Response = void 0;
const response_base_1 = require("./response-base");
const utils_1 = require("../../internal/utils");
const TEXT_DECODER = new TextDecoder();
/**
 * Parent response type for a set fetch request.  The
 * response object is resolved to a type-safe object of one of
 * the following subtypes:
 *
 * - {Hit}
 * - {Miss}
 * - {Error}
 *
 * `instanceof` type guards can be used to operate on the appropriate subtype.
 * @example
 * For example:
 * ```
 * if (response instanceof CacheSetFetch.Error) {
 *   // Handle error as appropriate.  The compiler will smart-cast `response` to type
 *   // `CacheSetFetch.Error` in this block, so you will have access to the properties
 *   // of the Error class; e.g. `response.errorCode()`.
 * }
 * ```
 */
class Response extends response_base_1.ResponseBase {
    value() {
        if (this instanceof Hit) {
            return this.value();
        }
        return undefined;
    }
}
exports.Response = Response;
class _Hit extends Response {
    constructor(elements) {
        super();
        this.elements = elements;
    }
    /**
     * Returns the data as a Set whose values are utf-8 strings, decoded from the underlying byte arrays.  This
     * is a convenience alias for {valueSetString}.
     * @returns {Set<string>}
     */
    valueSet() {
        return this.valueSetString();
    }
    /**
     * Returns the data as a Set whose values are utf-8 strings, decoded from the underlying byte arrays.
     * @returns {Set<string>}
     */
    valueSetString() {
        return new Set(this.elements.map(e => TEXT_DECODER.decode(e)));
    }
    /**
     * Returns the data as a Set whose values are byte arrays.
     * @returns {Set<Uint8Array>}
     */
    valueSetUint8Array() {
        return new Set(this.elements);
    }
    /**
     * Returns the data as an Array whose values are utf-8 strings, decoded from the underlying byte arrays.
     * This accessor is provided because Arrays are sometimes easier to work with in TypeScript/JavaScript than Sets are.
     * This is a convenience alias for {valueArrayString}.
     * @returns {string[]}
     */
    value() {
        return this.valueArrayString();
    }
    /**
     * Returns the data as an Array whose values are utf-8 strings, decoded from the underlying byte arrays.
     * This accessor is provided because Arrays are sometimes easier to work with in TypeScript/JavaScript than Sets are.
     * This is a convenience alias for {valueArrayString}.
     * @returns {string[]}
     */
    valueArray() {
        return this.valueArrayString();
    }
    /**
     * Returns the data as an Array whose values are utf-8 strings, decoded from the underlying byte arrays.
     * This accessor is provided because Arrays are sometimes easier to work with in TypeScript/JavaScript than Sets are.
     * @returns {string[]}
     */
    valueArrayString() {
        return this.elements.map(e => TEXT_DECODER.decode(e));
    }
    /**
     * Returns the data as an Array whose values are byte arrays.
     * This accessor is provided because Arrays are sometimes easier to work with in TypeScript/JavaScript than Sets are.
     * @returns {Uint8Array[]}
     */
    valueArrayUint8Array() {
        return this.elements;
    }
    toString() {
        const truncatedStringArray = (0, utils_1.truncateStringArray)(Array.from(this.valueSetString()));
        return `${super.toString()}: [${truncatedStringArray.toString()}]`;
    }
}
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends (0, response_base_1.ResponseHit)(_Hit) {
}
exports.Hit = Hit;
class _Miss extends Response {
}
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends (0, response_base_1.ResponseMiss)(_Miss) {
}
exports.Miss = Miss;
class _Error extends Response {
    constructor(_innerException) {
        super();
        this._innerException = _innerException;
    }
}
/**
 * Indicates that an error occurred during the set fetch request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends (0, response_base_1.ResponseError)(_Error) {
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2V0LWZldGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy9jYWNoZS1zZXQtZmV0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbURBS3lCO0FBRXpCLGdEQUF5RDtBQUV6RCxNQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBRXZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsTUFBc0IsUUFBUyxTQUFRLDRCQUFZO0lBQzFDLEtBQUs7UUFDVixJQUFJLElBQUksWUFBWSxHQUFHLEVBQUU7WUFDdkIsT0FBUSxJQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDOUI7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFQRCw0QkFPQztBQUVELE1BQU0sSUFBSyxTQUFRLFFBQVE7SUFHekIsWUFBWSxRQUFzQjtRQUNoQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRDs7O09BR0c7SUFDSSxjQUFjO1FBQ25CLE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksa0JBQWtCO1FBQ3ZCLE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLEtBQUs7UUFDVixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLFVBQVU7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksZ0JBQWdCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxvQkFBb0I7UUFDekIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFZSxRQUFRO1FBQ3RCLE1BQU0sb0JBQW9CLEdBQUcsSUFBQSwyQkFBbUIsRUFDOUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FDbEMsQ0FBQztRQUNGLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztJQUNyRSxDQUFDO0NBQ0Y7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLEdBQUksU0FBUSxJQUFBLDJCQUFXLEVBQUMsSUFBSSxDQUFDO0NBQUc7QUFBN0Msa0JBQTZDO0FBRTdDLE1BQU0sS0FBTSxTQUFRLFFBQVE7Q0FBRztBQUUvQjs7R0FFRztBQUNILE1BQWEsSUFBSyxTQUFRLElBQUEsNEJBQVksRUFBQyxLQUFLLENBQUM7Q0FBRztBQUFoRCxvQkFBZ0Q7QUFFaEQsTUFBTSxNQUFPLFNBQVEsUUFBUTtJQUMzQixZQUFtQixlQUF5QjtRQUMxQyxLQUFLLEVBQUUsQ0FBQztRQURTLG9CQUFlLEdBQWYsZUFBZSxDQUFVO0lBRTVDLENBQUM7Q0FDRjtBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLElBQUEsNkJBQWEsRUFBQyxNQUFNLENBQUM7Q0FBRztBQUFuRCxzQkFBbUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBSZXNwb25zZUJhc2UsXG4gIFJlc3BvbnNlRXJyb3IsXG4gIFJlc3BvbnNlTWlzcyxcbiAgUmVzcG9uc2VIaXQsXG59IGZyb20gJy4vcmVzcG9uc2UtYmFzZSc7XG5pbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHt0cnVuY2F0ZVN0cmluZ0FycmF5fSBmcm9tICcuLi8uLi9pbnRlcm5hbC91dGlscyc7XG5cbmNvbnN0IFRFWFRfREVDT0RFUiA9IG5ldyBUZXh0RGVjb2RlcigpO1xuXG4vKipcbiAqIFBhcmVudCByZXNwb25zZSB0eXBlIGZvciBhIHNldCBmZXRjaCByZXF1ZXN0LiAgVGhlXG4gKiByZXNwb25zZSBvYmplY3QgaXMgcmVzb2x2ZWQgdG8gYSB0eXBlLXNhZmUgb2JqZWN0IG9mIG9uZSBvZlxuICogdGhlIGZvbGxvd2luZyBzdWJ0eXBlczpcbiAqXG4gKiAtIHtIaXR9XG4gKiAtIHtNaXNzfVxuICogLSB7RXJyb3J9XG4gKlxuICogYGluc3RhbmNlb2ZgIHR5cGUgZ3VhcmRzIGNhbiBiZSB1c2VkIHRvIG9wZXJhdGUgb24gdGhlIGFwcHJvcHJpYXRlIHN1YnR5cGUuXG4gKiBAZXhhbXBsZVxuICogRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIENhY2hlU2V0RmV0Y2guRXJyb3IpIHtcbiAqICAgLy8gSGFuZGxlIGVycm9yIGFzIGFwcHJvcHJpYXRlLiAgVGhlIGNvbXBpbGVyIHdpbGwgc21hcnQtY2FzdCBgcmVzcG9uc2VgIHRvIHR5cGVcbiAqICAgLy8gYENhY2hlU2V0RmV0Y2guRXJyb3JgIGluIHRoaXMgYmxvY2ssIHNvIHlvdSB3aWxsIGhhdmUgYWNjZXNzIHRvIHRoZSBwcm9wZXJ0aWVzXG4gKiAgIC8vIG9mIHRoZSBFcnJvciBjbGFzczsgZS5nLiBgcmVzcG9uc2UuZXJyb3JDb2RlKClgLlxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlQmFzZSB7XG4gIHB1YmxpYyB2YWx1ZSgpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBIaXQpIHtcbiAgICAgIHJldHVybiAodGhpcyBhcyBIaXQpLnZhbHVlKCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuY2xhc3MgX0hpdCBleHRlbmRzIFJlc3BvbnNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50czogVWludDhBcnJheVtdO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBVaW50OEFycmF5W10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIGFzIGEgU2V0IHdob3NlIHZhbHVlcyBhcmUgdXRmLTggc3RyaW5ncywgZGVjb2RlZCBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ5dGUgYXJyYXlzLiAgVGhpc1xuICAgKiBpcyBhIGNvbnZlbmllbmNlIGFsaWFzIGZvciB7dmFsdWVTZXRTdHJpbmd9LlxuICAgKiBAcmV0dXJucyB7U2V0PHN0cmluZz59XG4gICAqL1xuICBwdWJsaWMgdmFsdWVTZXQoKTogU2V0PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlU2V0U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBhcyBhIFNldCB3aG9zZSB2YWx1ZXMgYXJlIHV0Zi04IHN0cmluZ3MsIGRlY29kZWQgZnJvbSB0aGUgdW5kZXJseWluZyBieXRlIGFycmF5cy5cbiAgICogQHJldHVybnMge1NldDxzdHJpbmc+fVxuICAgKi9cbiAgcHVibGljIHZhbHVlU2V0U3RyaW5nKCk6IFNldDxzdHJpbmc+IHtcbiAgICByZXR1cm4gbmV3IFNldCh0aGlzLmVsZW1lbnRzLm1hcChlID0+IFRFWFRfREVDT0RFUi5kZWNvZGUoZSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIGFzIGEgU2V0IHdob3NlIHZhbHVlcyBhcmUgYnl0ZSBhcnJheXMuXG4gICAqIEByZXR1cm5zIHtTZXQ8VWludDhBcnJheT59XG4gICAqL1xuICBwdWJsaWMgdmFsdWVTZXRVaW50OEFycmF5KCk6IFNldDxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIG5ldyBTZXQodGhpcy5lbGVtZW50cyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBhcyBhbiBBcnJheSB3aG9zZSB2YWx1ZXMgYXJlIHV0Zi04IHN0cmluZ3MsIGRlY29kZWQgZnJvbSB0aGUgdW5kZXJseWluZyBieXRlIGFycmF5cy5cbiAgICogVGhpcyBhY2Nlc3NvciBpcyBwcm92aWRlZCBiZWNhdXNlIEFycmF5cyBhcmUgc29tZXRpbWVzIGVhc2llciB0byB3b3JrIHdpdGggaW4gVHlwZVNjcmlwdC9KYXZhU2NyaXB0IHRoYW4gU2V0cyBhcmUuXG4gICAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBhbGlhcyBmb3Ige3ZhbHVlQXJyYXlTdHJpbmd9LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBwdWJsaWMgdmFsdWUoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlQXJyYXlTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIGFzIGFuIEFycmF5IHdob3NlIHZhbHVlcyBhcmUgdXRmLTggc3RyaW5ncywgZGVjb2RlZCBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ5dGUgYXJyYXlzLlxuICAgKiBUaGlzIGFjY2Vzc29yIGlzIHByb3ZpZGVkIGJlY2F1c2UgQXJyYXlzIGFyZSBzb21ldGltZXMgZWFzaWVyIHRvIHdvcmsgd2l0aCBpbiBUeXBlU2NyaXB0L0phdmFTY3JpcHQgdGhhbiBTZXRzIGFyZS5cbiAgICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIGFsaWFzIGZvciB7dmFsdWVBcnJheVN0cmluZ30uXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIHB1YmxpYyB2YWx1ZUFycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZUFycmF5U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBhcyBhbiBBcnJheSB3aG9zZSB2YWx1ZXMgYXJlIHV0Zi04IHN0cmluZ3MsIGRlY29kZWQgZnJvbSB0aGUgdW5kZXJseWluZyBieXRlIGFycmF5cy5cbiAgICogVGhpcyBhY2Nlc3NvciBpcyBwcm92aWRlZCBiZWNhdXNlIEFycmF5cyBhcmUgc29tZXRpbWVzIGVhc2llciB0byB3b3JrIHdpdGggaW4gVHlwZVNjcmlwdC9KYXZhU2NyaXB0IHRoYW4gU2V0cyBhcmUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIHB1YmxpYyB2YWx1ZUFycmF5U3RyaW5nKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5tYXAoZSA9PiBURVhUX0RFQ09ERVIuZGVjb2RlKGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIGFzIGFuIEFycmF5IHdob3NlIHZhbHVlcyBhcmUgYnl0ZSBhcnJheXMuXG4gICAqIFRoaXMgYWNjZXNzb3IgaXMgcHJvdmlkZWQgYmVjYXVzZSBBcnJheXMgYXJlIHNvbWV0aW1lcyBlYXNpZXIgdG8gd29yayB3aXRoIGluIFR5cGVTY3JpcHQvSmF2YVNjcmlwdCB0aGFuIFNldHMgYXJlLlxuICAgKiBAcmV0dXJucyB7VWludDhBcnJheVtdfVxuICAgKi9cbiAgcHVibGljIHZhbHVlQXJyYXlVaW50OEFycmF5KCk6IFVpbnQ4QXJyYXlbXSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBjb25zdCB0cnVuY2F0ZWRTdHJpbmdBcnJheSA9IHRydW5jYXRlU3RyaW5nQXJyYXkoXG4gICAgICBBcnJheS5mcm9tKHRoaXMudmFsdWVTZXRTdHJpbmcoKSlcbiAgICApO1xuICAgIHJldHVybiBgJHtzdXBlci50b1N0cmluZygpfTogWyR7dHJ1bmNhdGVkU3RyaW5nQXJyYXkudG9TdHJpbmcoKX1dYDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0ZWQgZGF0YSB3YXMgc3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCBmcm9tIHRoZSBjYWNoZS4gIFByb3ZpZGVzXG4gKiBgdmFsdWUqYCBhY2Nlc3NvcnMgdG8gcmV0cmlldmUgdGhlIGRhdGEgaW4gdGhlIGFwcHJvcHJpYXRlIGZvcm1hdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEhpdCBleHRlbmRzIFJlc3BvbnNlSGl0KF9IaXQpIHt9XG5cbmNsYXNzIF9NaXNzIGV4dGVuZHMgUmVzcG9uc2Uge31cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgcmVxdWVzdGVkIGRhdGEgd2FzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGNhY2hlLlxuICovXG5leHBvcnQgY2xhc3MgTWlzcyBleHRlbmRzIFJlc3BvbnNlTWlzcyhfTWlzcykge31cblxuY2xhc3MgX0Vycm9yIGV4dGVuZHMgUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIHNldCBmZXRjaCByZXF1ZXN0LlxuICpcbiAqIFRoaXMgcmVzcG9uc2Ugb2JqZWN0IGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZmllbGRzIHRoYXQgeW91IGNhbiB1c2UgdG8gZGV0ZXJtaW5lXG4gKiBob3cgeW91IHdvdWxkIGxpa2UgdG8gaGFuZGxlIHRoZSBlcnJvcjpcbiAqXG4gKiAtIGBlcnJvckNvZGUoKWAgLSBhIHVuaXF1ZSBNb21lbnRvIGVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogLSBgbWVzc2FnZSgpYCAtIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yXG4gKiAtIGBpbm5lckV4Y2VwdGlvbigpYCAtIHRoZSBvcmlnaW5hbCBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZmFpbHVyZTsgY2FuIGJlIHJlLXRocm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgUmVzcG9uc2VFcnJvcihfRXJyb3IpIHt9XG4iXX0=