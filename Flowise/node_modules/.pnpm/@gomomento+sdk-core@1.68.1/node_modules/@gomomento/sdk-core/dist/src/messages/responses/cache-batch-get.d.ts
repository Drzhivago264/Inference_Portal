import { SdkError } from '../../errors';
import { ResponseBase } from './response-base';
import { CacheGet } from '../..';
/**
 * Parent response type for a cache get batch request.  The
 * response object is resolved to a type-safe object of one of
 * the following subtypes:
 *
 * - {Success}
 * - {Error}
 *
 * `instanceof` type guards can be used to operate on the appropriate subtype.
 * @example
 * For example:
 * ```
 * if (response instanceof BatchGet.Error) {
 *   // Handle error as appropriate.  The compiler will smart-cast `response` to type
 *   // `BatchGet.Error` in this block, so you will have access to the properties
 *   // of the Error class; e.g. `response.errorCode()`.
 * }
 * ```
 */
export declare abstract class Response extends ResponseBase {
    values(): Record<string, string> | undefined;
    results(): CacheGet.Response[] | undefined;
}
declare class _Success extends Response {
    private readonly items;
    private readonly keys;
    constructor(items: CacheGet.Response[], keys: Uint8Array[]);
    /**
     * Returns the status for each request in the batch as a list of CacheGet.Response objects.
     * @returns {CacheGet.Response[]}
     */
    results(): CacheGet.Response[];
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    values(): Record<string, string>;
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    valuesRecord(): Record<string, string>;
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, string>}
     */
    valuesRecordStringString(): Record<string, string>;
    /**
     * Returns the data as a Record whose keys are utf-8 strings, decoded from the underlying byte array, and whose
     * values are byte arrays.  This can be used in most places where an Object is desired.
     * @returns {Record<string, Uint8Array>}
     */
    valuesRecordStringUint8Array(): Record<string, Uint8Array>;
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, string>}
     */
    valuesMap(): Map<string, string>;
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * @returns {Map<string, string>}
     */
    valuesMapStringString(): Map<string, string>;
    /**
     * Returns the data as a Map whose keys and values are byte arrays.
     * @returns {Map<Uint8Array, Uint8Array>}
     */
    valuesMapUint8ArrayUint8Array(): Map<Uint8Array, Uint8Array>;
    toString(): string;
}
declare const Success_base: {
    new (...args: any[]): {
        readonly is_success: boolean;
    };
} & typeof _Success;
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
export declare class Success extends Success_base {
}
declare class _Error extends Response {
    protected _innerException: SdkError;
    constructor(_innerException: SdkError);
}
declare const Error_base: {
    new (...args: any[]): {
        _innerException: SdkError;
        message(): string;
        innerException(): SdkError;
        errorCode(): import("../..").MomentoErrorCode;
        toString(): string;
    };
} & typeof _Error;
/**
 * Indicates that an error occurred during the cache get request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends Error_base {
}
export {};
