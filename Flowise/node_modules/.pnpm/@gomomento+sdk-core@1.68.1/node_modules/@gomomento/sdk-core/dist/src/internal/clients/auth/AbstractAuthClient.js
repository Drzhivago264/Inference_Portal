"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractAuthClient = void 0;
class AbstractAuthClient {
    constructor(props) {
        this.authClient = props.createAuthClient();
    }
    /**
     * Generates a new API key, along with a refresh token to refresh the API key before expiry.
     *
     * @param {PermissionScope} scope - controls the permissions that the new key will have
     * @param {string} expiresIn - How long the API key should be valid for in epoch timestamp.
     * @returns {Promise<GenerateApiKey.Response>} -
     * {@link GenerateApiKey.Success} containing the API key, refresh token, origin and epoch timestamp when token expires.
     * If the API key never expires, then no refresh token will be returned and expires at timestamp will be infinite.
     * {@link GenerateApiKey.Error} on failure.
     */
    async generateApiKey(scope, expiresIn) {
        return await this.authClient.generateApiKey(scope, expiresIn);
    }
    /**
     * @deprecated please use `generateApiKey` instead
     */
    async generateAuthToken(scope, expiresIn) {
        return await this.generateApiKey(scope, expiresIn);
    }
    /**
     * Refreshes an API key.  Returns a new API key and refresh token, that will be able to be refreshed again in the future.
     * The new API key will be valid for the same length of time as the original key, starting from the time of refresh.
     * The original api key will still work until its expired.
     *
     * @param {string} refreshToken - Refresh token used to refresh the API key.
     * @returns {Promise<RefreshApiKey.Response>} -
     * {@link RefreshApiKey.Success} containing the new API key, refresh token, origin and epoch timestamp when the API key expires.
     * {@link RefreshApiKey.Error} on failure.
     */
    async refreshApiKey(refreshToken) {
        return await this.authClient.refreshApiKey(refreshToken);
    }
    /**
     * @deprecated please use `refreshApiKey` instead
     */
    async refreshAuthToken(refreshToken) {
        return await this.refreshApiKey(refreshToken);
    }
    /**
     * Generates a new disposable, fine-grained access token.
     *
     * @param {DisposableTokenScope} scope - controls the permissions that the new token will have
     * @param {string} expiresIn - How long the token is valid for in epoch timestamp.
     * @param {DisposableTokenProps} disposableTokenProps - Additional properties for the API
     * @returns {Promise<GenerateDisposableToken.Response>} -
     * {@link GenerateDisposableToken.Success} containing the api token, origin and epoch timestamp when token expires.
     * {@link GenerateDisposableToken.Error} on failure.
     */
    async generateDisposableToken(scope, expiresIn, disposableTokenProps) {
        return await this.authClient.generateDisposableToken(scope, expiresIn, disposableTokenProps);
    }
}
exports.AbstractAuthClient = AbstractAuthClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RBdXRoQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL2NsaWVudHMvYXV0aC9BYnN0cmFjdEF1dGhDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBY0EsTUFBc0Isa0JBQWtCO0lBSXRDLFlBQXNCLEtBQTBCO1FBQzlDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNJLEtBQUssQ0FBQyxjQUFjLENBQ3pCLEtBQXNCLEVBQ3RCLFNBQW9CO1FBRXBCLE9BQU8sTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLGlCQUFpQixDQUM1QixLQUFzQixFQUN0QixTQUFvQjtRQUVwQixPQUFPLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNJLEtBQUssQ0FBQyxhQUFhLENBQ3hCLFlBQW9CO1FBRXBCLE9BQU8sTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLLENBQUMsZ0JBQWdCLENBQzNCLFlBQW9CO1FBRXBCLE9BQU8sTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSSxLQUFLLENBQUMsdUJBQXVCLENBQ2xDLEtBQTJCLEVBQzNCLFNBQW9CLEVBQ3BCLG9CQUEyQztRQUUzQyxPQUFPLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FDbEQsS0FBSyxFQUNMLFNBQVMsRUFDVCxvQkFBb0IsQ0FDckIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWpGRCxnREFpRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHZW5lcmF0ZUFwaUtleSxcbiAgRXhwaXJlc0luLFxuICBSZWZyZXNoQXBpS2V5LFxuICBHZW5lcmF0ZURpc3Bvc2FibGVUb2tlbixcbiAgRGlzcG9zYWJsZVRva2VuU2NvcGUsXG59IGZyb20gJy4uLy4uLy4uL2luZGV4JztcbmltcG9ydCB7SUF1dGhDbGllbnR9IGZyb20gJy4uLy4uLy4uL2NsaWVudHMvSUF1dGhDbGllbnQnO1xuaW1wb3J0IHtQZXJtaXNzaW9uU2NvcGV9IGZyb20gJy4uLy4uLy4uL2F1dGgvdG9rZW5zL3Blcm1pc3Npb24tc2NvcGUnO1xuaW1wb3J0IHtEaXNwb3NhYmxlVG9rZW5Qcm9wc30gZnJvbSAnLi4vLi4vLi4vYXV0aC90b2tlbnMvZGlzcG9zYWJsZS10b2tlbi1zY29wZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUF1dGhDbGllbnRQcm9wcyB7XG4gIGNyZWF0ZUF1dGhDbGllbnQ6ICgpID0+IElBdXRoQ2xpZW50O1xufVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0QXV0aENsaWVudCBpbXBsZW1lbnRzIElBdXRoQ2xpZW50IHtcbiAgLy8gbWFraW5nIHRoZXNlIHByb3RlY3RlZCB1bnRpbCB3ZSBmdWxseSBhYnN0cmFjdCBhd2F5IHRoZSBub2RlanMgY2xpZW50XG4gIHByb3RlY3RlZCByZWFkb25seSBhdXRoQ2xpZW50OiBJQXV0aENsaWVudDtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvcHM6IEJhc2VBdXRoQ2xpZW50UHJvcHMpIHtcbiAgICB0aGlzLmF1dGhDbGllbnQgPSBwcm9wcy5jcmVhdGVBdXRoQ2xpZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgbmV3IEFQSSBrZXksIGFsb25nIHdpdGggYSByZWZyZXNoIHRva2VuIHRvIHJlZnJlc2ggdGhlIEFQSSBrZXkgYmVmb3JlIGV4cGlyeS5cbiAgICpcbiAgICogQHBhcmFtIHtQZXJtaXNzaW9uU2NvcGV9IHNjb3BlIC0gY29udHJvbHMgdGhlIHBlcm1pc3Npb25zIHRoYXQgdGhlIG5ldyBrZXkgd2lsbCBoYXZlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHBpcmVzSW4gLSBIb3cgbG9uZyB0aGUgQVBJIGtleSBzaG91bGQgYmUgdmFsaWQgZm9yIGluIGVwb2NoIHRpbWVzdGFtcC5cbiAgICogQHJldHVybnMge1Byb21pc2U8R2VuZXJhdGVBcGlLZXkuUmVzcG9uc2U+fSAtXG4gICAqIHtAbGluayBHZW5lcmF0ZUFwaUtleS5TdWNjZXNzfSBjb250YWluaW5nIHRoZSBBUEkga2V5LCByZWZyZXNoIHRva2VuLCBvcmlnaW4gYW5kIGVwb2NoIHRpbWVzdGFtcCB3aGVuIHRva2VuIGV4cGlyZXMuXG4gICAqIElmIHRoZSBBUEkga2V5IG5ldmVyIGV4cGlyZXMsIHRoZW4gbm8gcmVmcmVzaCB0b2tlbiB3aWxsIGJlIHJldHVybmVkIGFuZCBleHBpcmVzIGF0IHRpbWVzdGFtcCB3aWxsIGJlIGluZmluaXRlLlxuICAgKiB7QGxpbmsgR2VuZXJhdGVBcGlLZXkuRXJyb3J9IG9uIGZhaWx1cmUuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2VuZXJhdGVBcGlLZXkoXG4gICAgc2NvcGU6IFBlcm1pc3Npb25TY29wZSxcbiAgICBleHBpcmVzSW46IEV4cGlyZXNJblxuICApOiBQcm9taXNlPEdlbmVyYXRlQXBpS2V5LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYXV0aENsaWVudC5nZW5lcmF0ZUFwaUtleShzY29wZSwgZXhwaXJlc0luKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBwbGVhc2UgdXNlIGBnZW5lcmF0ZUFwaUtleWAgaW5zdGVhZFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlQXV0aFRva2VuKFxuICAgIHNjb3BlOiBQZXJtaXNzaW9uU2NvcGUsXG4gICAgZXhwaXJlc0luOiBFeHBpcmVzSW5cbiAgKTogUHJvbWlzZTxHZW5lcmF0ZUFwaUtleS5SZXNwb25zZT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdlbmVyYXRlQXBpS2V5KHNjb3BlLCBleHBpcmVzSW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2hlcyBhbiBBUEkga2V5LiAgUmV0dXJucyBhIG5ldyBBUEkga2V5IGFuZCByZWZyZXNoIHRva2VuLCB0aGF0IHdpbGwgYmUgYWJsZSB0byBiZSByZWZyZXNoZWQgYWdhaW4gaW4gdGhlIGZ1dHVyZS5cbiAgICogVGhlIG5ldyBBUEkga2V5IHdpbGwgYmUgdmFsaWQgZm9yIHRoZSBzYW1lIGxlbmd0aCBvZiB0aW1lIGFzIHRoZSBvcmlnaW5hbCBrZXksIHN0YXJ0aW5nIGZyb20gdGhlIHRpbWUgb2YgcmVmcmVzaC5cbiAgICogVGhlIG9yaWdpbmFsIGFwaSBrZXkgd2lsbCBzdGlsbCB3b3JrIHVudGlsIGl0cyBleHBpcmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmcmVzaFRva2VuIC0gUmVmcmVzaCB0b2tlbiB1c2VkIHRvIHJlZnJlc2ggdGhlIEFQSSBrZXkuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlZnJlc2hBcGlLZXkuUmVzcG9uc2U+fSAtXG4gICAqIHtAbGluayBSZWZyZXNoQXBpS2V5LlN1Y2Nlc3N9IGNvbnRhaW5pbmcgdGhlIG5ldyBBUEkga2V5LCByZWZyZXNoIHRva2VuLCBvcmlnaW4gYW5kIGVwb2NoIHRpbWVzdGFtcCB3aGVuIHRoZSBBUEkga2V5IGV4cGlyZXMuXG4gICAqIHtAbGluayBSZWZyZXNoQXBpS2V5LkVycm9yfSBvbiBmYWlsdXJlLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIHJlZnJlc2hBcGlLZXkoXG4gICAgcmVmcmVzaFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxSZWZyZXNoQXBpS2V5LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYXV0aENsaWVudC5yZWZyZXNoQXBpS2V5KHJlZnJlc2hUb2tlbik7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSBgcmVmcmVzaEFwaUtleWAgaW5zdGVhZFxuICAgKi9cbiAgcHVibGljIGFzeW5jIHJlZnJlc2hBdXRoVG9rZW4oXG4gICAgcmVmcmVzaFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxSZWZyZXNoQXBpS2V5LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmVmcmVzaEFwaUtleShyZWZyZXNoVG9rZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIG5ldyBkaXNwb3NhYmxlLCBmaW5lLWdyYWluZWQgYWNjZXNzIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge0Rpc3Bvc2FibGVUb2tlblNjb3BlfSBzY29wZSAtIGNvbnRyb2xzIHRoZSBwZXJtaXNzaW9ucyB0aGF0IHRoZSBuZXcgdG9rZW4gd2lsbCBoYXZlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHBpcmVzSW4gLSBIb3cgbG9uZyB0aGUgdG9rZW4gaXMgdmFsaWQgZm9yIGluIGVwb2NoIHRpbWVzdGFtcC5cbiAgICogQHBhcmFtIHtEaXNwb3NhYmxlVG9rZW5Qcm9wc30gZGlzcG9zYWJsZVRva2VuUHJvcHMgLSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgZm9yIHRoZSBBUElcbiAgICogQHJldHVybnMge1Byb21pc2U8R2VuZXJhdGVEaXNwb3NhYmxlVG9rZW4uUmVzcG9uc2U+fSAtXG4gICAqIHtAbGluayBHZW5lcmF0ZURpc3Bvc2FibGVUb2tlbi5TdWNjZXNzfSBjb250YWluaW5nIHRoZSBhcGkgdG9rZW4sIG9yaWdpbiBhbmQgZXBvY2ggdGltZXN0YW1wIHdoZW4gdG9rZW4gZXhwaXJlcy5cbiAgICoge0BsaW5rIEdlbmVyYXRlRGlzcG9zYWJsZVRva2VuLkVycm9yfSBvbiBmYWlsdXJlLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlRGlzcG9zYWJsZVRva2VuKFxuICAgIHNjb3BlOiBEaXNwb3NhYmxlVG9rZW5TY29wZSxcbiAgICBleHBpcmVzSW46IEV4cGlyZXNJbixcbiAgICBkaXNwb3NhYmxlVG9rZW5Qcm9wcz86IERpc3Bvc2FibGVUb2tlblByb3BzXG4gICk6IFByb21pc2U8R2VuZXJhdGVEaXNwb3NhYmxlVG9rZW4uUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5hdXRoQ2xpZW50LmdlbmVyYXRlRGlzcG9zYWJsZVRva2VuKFxuICAgICAgc2NvcGUsXG4gICAgICBleHBpcmVzSW4sXG4gICAgICBkaXNwb3NhYmxlVG9rZW5Qcm9wc1xuICAgICk7XG4gIH1cbn1cbiJdfQ==