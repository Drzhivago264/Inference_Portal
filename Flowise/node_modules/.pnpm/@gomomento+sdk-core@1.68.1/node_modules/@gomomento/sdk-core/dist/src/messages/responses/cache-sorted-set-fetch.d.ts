import { ResponseBase } from './response-base';
import { SdkError } from '../../errors';
import { _SortedSetElement } from './grpc-response-types';
/**
 * Parent response type for a sorted set fetch request.  The
 * response object is resolved to a type-safe object of one of
 * the following subtypes:
 *
 * - {Hit}
 * - {Miss}
 * - {Error}
 *
 * `instanceof` type guards can be used to operate on the appropriate subtype.
 * @example
 * For example:
 * ```
 * if (response instanceof CacheSortedSetFetch.Error) {
 *   // Handle error as appropriate.  The compiler will smart-cast `response` to type
 *   // `CacheSortedSetFetch.Error` in this block, so you will have access to the properties
 *   // of the Error class; e.g. `response.errorCode()`.
 * }
 * ```
 */
export declare abstract class Response extends ResponseBase {
    value(): {
        value: string;
        score: number;
    }[] | undefined;
}
declare class _Hit extends Response {
    private readonly elements;
    private readonly _displayListSizeLimit;
    constructor(elements: _SortedSetElement[]);
    /**
     * Returns the elements as an array of objects, each containing a `value` and `score` field.
     * The value is a byte array, and the score is a number.
     * @returns {{value: Uint8Array; score: number}[]}
     */
    valueArrayUint8Elements(): {
        value: Uint8Array;
        score: number;
    }[];
    /**
     * Returns the elements as an array of objects, each containing a `value` and `score` field.
     * The value is a utf-8 string, decoded from the underlying byte array, and the score is a number.
     * @returns {{value: string; score: number}[]}
     */
    valueArrayStringElements(): {
        value: string;
        score: number;
    }[];
    /**
     * Returns the elements as an array of objects, each containing a `value` and `score` field.
     * The value is a utf-8 string, decoded from the underlying byte array, and the score is a number.
     * This is a convenience alias for {valueArrayStringNumber}.
     * @returns {value: string; score: number}[]
     */
    valueArray(): {
        value: string;
        score: number;
    }[];
    /**
     * Returns the elements as an array of objects, each containing a `value` and `score` field.
     * The value is a utf-8 string, decoded from the underlying byte array, and the score is a number.
     * This is a convenience alias for {valueArrayStringNumber}.
     * @returns {value: string; score: number}[]
     */
    value(): {
        value: string;
        score: number;
    }[];
    private truncateValueStrings;
    toString(): string;
}
declare const Hit_base: {
    new (...args: any[]): {};
} & typeof _Hit;
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
export declare class Hit extends Hit_base {
}
declare class _Miss extends Response {
}
declare const Miss_base: {
    new (...args: any[]): {
        readonly is_miss: boolean;
    };
} & typeof _Miss;
/**
 * Indicates that the requested data was not available in the cache.
 */
export declare class Miss extends Miss_base {
}
declare class _Error extends Response {
    protected _innerException: SdkError;
    constructor(_innerException: SdkError);
}
declare const Error_base: {
    new (...args: any[]): {
        _innerException: SdkError;
        message(): string;
        innerException(): SdkError;
        errorCode(): import("../../errors").MomentoErrorCode;
        toString(): string;
    };
} & typeof _Error;
/**
 * Indicates that an error occurred during the dictionary fetch request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends Error_base {
}
export {};
