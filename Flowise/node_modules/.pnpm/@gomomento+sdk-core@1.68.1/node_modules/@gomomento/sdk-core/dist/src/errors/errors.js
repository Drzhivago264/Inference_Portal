"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnknownServiceError = exports.UnknownError = exports.TimeoutError = exports.ServerUnavailableError = exports.PermissionError = exports.NotFoundError = exports.LimitExceededError = exports.InvalidArgumentError = exports.InternalServerError = exports.FailedPreconditionError = exports.CancelledError = exports.BadRequestError = exports.AuthenticationError = exports.AlreadyExistsError = exports.SdkError = exports.MomentoErrorTransportDetails = exports.MomentoGrpcErrorDetails = exports.MomentoErrorCode = void 0;
var MomentoErrorCode;
(function (MomentoErrorCode) {
    // Invalid argument passed to Momento client
    MomentoErrorCode["INVALID_ARGUMENT_ERROR"] = "INVALID_ARGUMENT_ERROR";
    // Service returned an unknown response
    MomentoErrorCode["UNKNOWN_SERVICE_ERROR"] = "UNKNOWN_SERVICE_ERROR";
    // Cache with specified name already exists
    MomentoErrorCode["ALREADY_EXISTS_ERROR"] = "ALREADY_EXISTS_ERROR";
    // Cache with specified name doesn't exist
    MomentoErrorCode["NOT_FOUND_ERROR"] = "NOT_FOUND_ERROR";
    // An unexpected error occurred while trying to fulfill the request
    MomentoErrorCode["INTERNAL_SERVER_ERROR"] = "INTERNAL_SERVER_ERROR";
    // Insufficient permissions to perform operation
    MomentoErrorCode["PERMISSION_ERROR"] = "PERMISSION_ERROR";
    // Invalid authentication credentials to connect to cache service
    MomentoErrorCode["AUTHENTICATION_ERROR"] = "AUTHENTICATION_ERROR";
    // Request was cancelled by the server
    MomentoErrorCode["CANCELLED_ERROR"] = "CANCELLED_ERROR";
    // Request rate, bandwidth, or object size exceeded the limits for the account
    MomentoErrorCode["LIMIT_EXCEEDED_ERROR"] = "LIMIT_EXCEEDED_ERROR";
    // Request was invalid
    MomentoErrorCode["BAD_REQUEST_ERROR"] = "BAD_REQUEST_ERROR";
    // Client's configured timeout was exceeded
    MomentoErrorCode["TIMEOUT_ERROR"] = "TIMEOUT_ERROR";
    // Server was unable to handle the request
    MomentoErrorCode["SERVER_UNAVAILABLE"] = "SERVER_UNAVAILABLE";
    // A client resource (most likely memory) was exhausted
    MomentoErrorCode["CLIENT_RESOURCE_EXHAUSTED"] = "CLIENT_RESOURCE_EXHAUSTED";
    // System is not in a state required for the operation's execution
    MomentoErrorCode["FAILED_PRECONDITION_ERROR"] = "FAILED_PRECONDITION_ERROR";
    // Unknown error has occurred
    MomentoErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
})(MomentoErrorCode = exports.MomentoErrorCode || (exports.MomentoErrorCode = {}));
class MomentoGrpcErrorDetails {
    constructor(code, details, metadata) {
        this.code = code;
        this.details = details;
        this.metadata = metadata;
    }
}
exports.MomentoGrpcErrorDetails = MomentoGrpcErrorDetails;
class MomentoErrorTransportDetails {
    constructor(grpc) {
        this.grpc = grpc;
    }
}
exports.MomentoErrorTransportDetails = MomentoErrorTransportDetails;
/**
 * Base class for all errors thrown by the sdk
 */
class SdkError extends Error {
    constructor(message, code = 0, metadata = undefined, stack = undefined) {
        super(message);
        const grpcDetails = new MomentoGrpcErrorDetails(code, message, metadata);
        this._transportDetails = new MomentoErrorTransportDetails(grpcDetails);
        this.stack = stack !== null && stack !== void 0 ? stack : undefined;
    }
    wrappedErrorMessage() {
        return `${this._messageWrapper}: ${this.message}`;
    }
    errorCode() {
        return this._errorCode;
    }
    transportDetails() {
        return this._transportDetails;
    }
}
exports.SdkError = SdkError;
/**
 * Error that occurs when trying to create a cache with the same name as an existing cache. To resolve this error,
 * either delete the existing cache and make a new one, or change the name of the cache you are trying to create to
 * one that doesn't already exist
 */
class AlreadyExistsError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.ALREADY_EXISTS_ERROR;
        this._messageWrapper = 'A cache with the specified name already exists.  To resolve this error, either delete the existing cache and make a new one, or use a different name';
    }
}
exports.AlreadyExistsError = AlreadyExistsError;
/**
 * Error when authentication with Cache Service fails
 */
class AuthenticationError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.AUTHENTICATION_ERROR;
        this._messageWrapper = 'Invalid authentication credentials to connect to cache service';
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * Error raised in response to an invalid request
 */
class BadRequestError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.BAD_REQUEST_ERROR;
        this._messageWrapper = 'The request was invalid; please contact us at support@momentohq.com';
    }
}
exports.BadRequestError = BadRequestError;
/**
 * Error when an operation with Cache Service was cancelled
 */
class CancelledError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.CANCELLED_ERROR;
        this._messageWrapper = 'The request was cancelled by the server; please contact us at support@momentohq.com';
    }
}
exports.CancelledError = CancelledError;
/**
 * Error raised when system in not in a state required for the operation's success
 */
class FailedPreconditionError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.FAILED_PRECONDITION_ERROR;
        this._messageWrapper = "System is not in a state required for the operation's execution";
    }
}
exports.FailedPreconditionError = FailedPreconditionError;
/**
 * Cache Service encountered an unexpected exception while trying to fulfill the request
 */
class InternalServerError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.INTERNAL_SERVER_ERROR;
        this._messageWrapper = 'An unexpected error occurred while trying to fulfill the request; please contact us at support@momentohq.com';
    }
}
exports.InternalServerError = InternalServerError;
/**
 * Represents errors thrown when invalid parameters are passed to the Momento Cache
 */
class InvalidArgumentError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.INVALID_ARGUMENT_ERROR;
        this._messageWrapper = 'Invalid argument passed to Momento client';
    }
}
exports.InvalidArgumentError = InvalidArgumentError;
/**
 * Error when calls are throttled due to request limit rate
 */
class LimitExceededError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.LIMIT_EXCEEDED_ERROR;
        this._messageWrapper = 'Request rate, bandwidth, or object size exceeded the limits for this account.  To resolve this error, reduce your usage as appropriate or contact us at support@momentohq.com to request a limit increase';
    }
}
exports.LimitExceededError = LimitExceededError;
/**
 * Error that occurs when trying to get a cache that doesn't exist. To resolve, make sure that the cache you are trying
 * to get exists. If it doesn't create it first and then try again
 */
class NotFoundError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.NOT_FOUND_ERROR;
        this._messageWrapper = 'A cache with the specified name does not exist.  To resolve this error, make sure you have created the cache before attempting to use it';
    }
}
exports.NotFoundError = NotFoundError;
/**
 * Insufficient permissions to perform an operation on Cache Service
 */
class PermissionError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.PERMISSION_ERROR;
        this._messageWrapper = 'Insufficient permissions to perform an operation on a cache';
    }
}
exports.PermissionError = PermissionError;
/**
 * Server was unable to handle the request.
 */
class ServerUnavailableError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.SERVER_UNAVAILABLE;
        this._messageWrapper = 'The server was unable to handle the request; consider retrying.  If the error persists, please contact us at support@momentohq.com';
    }
}
exports.ServerUnavailableError = ServerUnavailableError;
/**
 * Error when an operation did not complete in time
 */
class TimeoutError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.TIMEOUT_ERROR;
        this._messageWrapper = "The client's configured timeout was exceeded; you may need to use a Configuration with more lenient timeouts";
    }
}
exports.TimeoutError = TimeoutError;
/**
 * Error raised when the underlying cause in unknown
 */
class UnknownError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.UNKNOWN_ERROR;
        this._messageWrapper = 'Unknown error has occurred';
    }
}
exports.UnknownError = UnknownError;
/**
 * Error raised when the service returns an unknown response
 */
class UnknownServiceError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.UNKNOWN_SERVICE_ERROR;
        this._messageWrapper = 'Service returned an unknown response; please contact us at support@momentohq.com';
    }
}
exports.UnknownServiceError = UnknownServiceError;
//# sourceMappingURL=data:application/json;base64,