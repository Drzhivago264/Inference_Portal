export declare enum MomentoErrorCode {
    INVALID_ARGUMENT_ERROR = "INVALID_ARGUMENT_ERROR",
    UNKNOWN_SERVICE_ERROR = "UNKNOWN_SERVICE_ERROR",
    ALREADY_EXISTS_ERROR = "ALREADY_EXISTS_ERROR",
    NOT_FOUND_ERROR = "NOT_FOUND_ERROR",
    INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
    PERMISSION_ERROR = "PERMISSION_ERROR",
    AUTHENTICATION_ERROR = "AUTHENTICATION_ERROR",
    CANCELLED_ERROR = "CANCELLED_ERROR",
    LIMIT_EXCEEDED_ERROR = "LIMIT_EXCEEDED_ERROR",
    BAD_REQUEST_ERROR = "BAD_REQUEST_ERROR",
    TIMEOUT_ERROR = "TIMEOUT_ERROR",
    SERVER_UNAVAILABLE = "SERVER_UNAVAILABLE",
    CLIENT_RESOURCE_EXHAUSTED = "CLIENT_RESOURCE_EXHAUSTED",
    FAILED_PRECONDITION_ERROR = "FAILED_PRECONDITION_ERROR",
    UNKNOWN_ERROR = "UNKNOWN_ERROR"
}
export declare class MomentoGrpcErrorDetails {
    readonly code: number;
    readonly details: string;
    readonly metadata?: object;
    constructor(code: number, details: string, metadata?: object);
}
export declare class MomentoErrorTransportDetails {
    readonly grpc: MomentoGrpcErrorDetails;
    constructor(grpc: MomentoGrpcErrorDetails);
}
/**
 * Base class for all errors thrown by the sdk
 */
export declare abstract class SdkError extends Error {
    protected readonly _errorCode: MomentoErrorCode;
    protected readonly _messageWrapper: string;
    private readonly _transportDetails;
    constructor(message: string, code?: number, metadata?: object | undefined, stack?: string | undefined);
    wrappedErrorMessage(): string;
    errorCode(): MomentoErrorCode;
    transportDetails(): MomentoErrorTransportDetails;
}
/**
 * Error that occurs when trying to create a cache with the same name as an existing cache. To resolve this error,
 * either delete the existing cache and make a new one, or change the name of the cache you are trying to create to
 * one that doesn't already exist
 */
export declare class AlreadyExistsError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error when authentication with Cache Service fails
 */
export declare class AuthenticationError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error raised in response to an invalid request
 */
export declare class BadRequestError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error when an operation with Cache Service was cancelled
 */
export declare class CancelledError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error raised when system in not in a state required for the operation's success
 */
export declare class FailedPreconditionError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Cache Service encountered an unexpected exception while trying to fulfill the request
 */
export declare class InternalServerError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Represents errors thrown when invalid parameters are passed to the Momento Cache
 */
export declare class InvalidArgumentError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error when calls are throttled due to request limit rate
 */
export declare class LimitExceededError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error that occurs when trying to get a cache that doesn't exist. To resolve, make sure that the cache you are trying
 * to get exists. If it doesn't create it first and then try again
 */
export declare class NotFoundError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Insufficient permissions to perform an operation on Cache Service
 */
export declare class PermissionError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Server was unable to handle the request.
 */
export declare class ServerUnavailableError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error when an operation did not complete in time
 */
export declare class TimeoutError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error raised when the underlying cause in unknown
 */
export declare class UnknownError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
/**
 * Error raised when the service returns an unknown response
 */
export declare class UnknownServiceError extends SdkError {
    _errorCode: MomentoErrorCode;
    _messageWrapper: string;
}
