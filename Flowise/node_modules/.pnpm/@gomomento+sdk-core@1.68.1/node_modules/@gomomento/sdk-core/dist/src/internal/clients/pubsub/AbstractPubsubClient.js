"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractPubsubClient = void 0;
const utils_1 = require("../../utils");
const errors_1 = require("../../../errors");
const index_1 = require("../../../index");
const subscription_state_1 = require("../../subscription-state");
class AbstractPubsubClient {
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.logger.debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    async publish(cacheName, topicName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateTopicName)(topicName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new index_1.TopicPublish.Error(err));
            // )  new TopicPublish.Error(normalizeSdkError(err as Error));
        }
        this.logger.trace('Issuing publish request; topic: %s, message length: %s', (0, utils_1.truncateString)(topicName), value.length);
        return await this.sendPublish(cacheName, topicName, value);
    }
    async subscribe(cacheName, topicName, options) {
        var _a, _b;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateTopicName)(topicName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new index_1.TopicSubscribe.Error(err));
        }
        this.logger.trace('Issuing subscribe request; topic: %s', (0, utils_1.truncateString)(topicName));
        const onItem = (_a = options.onItem) !== null && _a !== void 0 ? _a : (() => {
            return;
        });
        const onError = (_b = options.onError) !== null && _b !== void 0 ? _b : (() => {
            return;
        });
        const subscriptionState = new subscription_state_1.SubscriptionState();
        const subscription = new index_1.TopicSubscribe.Subscription(subscriptionState);
        return await this.sendSubscribe({
            cacheName: cacheName,
            topicName: topicName,
            onItem: onItem,
            onError: onError,
            subscriptionState: subscriptionState,
            subscription: subscription,
        });
    }
    prepareEndCallback(options) {
        return () => {
            // We want to restart on stream end, except if:
            // 1. The stream was cancelled by the caller.
            // 2. The stream was restarted following an error.
            if (options.restartedDueToError) {
                this.logger.trace('Stream ended after error but was restarted on topic: %s', options.topicName);
                return;
            }
            else if (!options.subscriptionState.isSubscribed) {
                this.logger.trace('Stream ended after unsubscribe on topic: %s', options.topicName);
                return;
            }
            this.logger.trace('Stream ended on topic: %s; restarting.', options.topicName);
            // When restarting the stream we do not do anything with the promises,
            // because we should have already returned the subscription object to the user.
            this.sendSubscribe(options)
                .then(() => {
                return;
            })
                .catch(() => {
                return;
            });
        };
    }
    handleSubscribeError(options, momentoError, isRstStreamNoError) {
        // When the first message is an error, an irrecoverable error has happened,
        // eg the cache does not exist. The user should not receive a subscription
        // object but an error.
        if (options.firstMessage) {
            this.logger.trace('Received subscription stream error; topic: %s', (0, utils_1.truncateString)(options.topicName));
            options.resolve(momentoError);
            options.subscription.unsubscribe();
            return;
        }
        // The service cuts the stream after a period of time.
        // Transparently restart the stream instead of propagating an error.
        if (isRstStreamNoError) {
            this.logger.trace('Server closed stream due to idle activity. Restarting.');
            // When restarting the stream we do not do anything with the promises,
            // because we should have already returned the subscription object to the user.
            this.sendSubscribe(options)
                .then(() => {
                return;
            })
                .catch(() => {
                return;
            });
            options.restartedDueToError = true;
            return;
        }
        // Another special case is when the cache is not found.
        // This happens here if the user deletes the cache in the middle of
        // a subscription.
        if (momentoError.errorCode() === errors_1.MomentoErrorCode.NOT_FOUND_ERROR) {
            this.logger.trace('Stream ended due to cache not found error on topic: %s', options.topicName);
            options.subscription.unsubscribe();
            options.onError(momentoError, options.subscription);
            return;
        }
        else {
            options.onError(momentoError, options.subscription);
        }
    }
}
exports.AbstractPubsubClient = AbstractPubsubClient;
//# sourceMappingURL=data:application/json;base64,