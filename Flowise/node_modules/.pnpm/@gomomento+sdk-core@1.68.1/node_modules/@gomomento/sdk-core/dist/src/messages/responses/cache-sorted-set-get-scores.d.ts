import { SdkError } from '../../errors';
import { ResponseBase } from './response-base';
import * as CacheSortedSetGetScoreResponse from './cache-sorted-set-get-score';
import { _SortedSetGetScoreResponsePart } from './grpc-response-types';
type CacheSortedSetGetScoreResponseType = CacheSortedSetGetScoreResponse.Hit | CacheSortedSetGetScoreResponse.Miss | CacheSortedSetGetScoreResponse.Error;
/**
 * Parent response type for a sorted set get scores request.  The
 * response object is resolved to a type-safe object of one of
 * the following subtypes:
 *
 * - {Hit}
 * - {Miss}
 * - {Error}
 *
 * `instanceof` type guards can be used to operate on the appropriate subtype.
 * @example
 * For example:
 * ```
 * if (response instanceof CacheSortedSetGetScores.Error) {
 *   // Handle error as appropriate.  The compiler will smart-cast `response` to type
 *   // `CacheSortedSetGetScores.Error` in this block, so you will have access to the properties
 *   // of the Error class; e.g. `response.errorCode()`.
 * }
 * ```
 */
export declare abstract class Response extends ResponseBase {
    value(): Record<string, number> | undefined;
}
declare class _Hit extends Response {
    _responses: CacheSortedSetGetScoreResponseType[];
    constructor(scores: _SortedSetGetScoreResponsePart[], values: Uint8Array[]);
    responses(): CacheSortedSetGetScoreResponseType[];
    /**
     * Returns the data as a Map whose keys are byte arrays and values numbers.
     * @returns {Map<Uint8Array, number>}
     */
    valueMapUint8Array(): Map<Uint8Array, number>;
    /**
     * Returns the data as a Map whose keys are utf-8 strings, decoded from the underlying byte arrays and values are numbers.
     * @returns {Map<string, number>}
     */
    valueMapString(): Map<string, number>;
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, number>}
     */
    valueMap(): Map<string, number>;
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, number>}
     */
    valueRecordString(): Record<string, number>;
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, number>}
     */
    valueRecord(): Record<string, number>;
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, number>}
     */
    value(): Record<string, number>;
    toString(): string;
}
declare const Hit_base: {
    new (...args: any[]): {};
} & typeof _Hit;
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
export declare class Hit extends Hit_base {
}
declare class _Miss extends Response {
}
declare const Miss_base: {
    new (...args: any[]): {
        readonly is_miss: boolean;
    };
} & typeof _Miss;
/**
 * Indicates that the requested data was not available in the cache.
 */
export declare class Miss extends Miss_base {
}
declare class _Error extends Response {
    _innerException: SdkError;
    constructor(_innerException: SdkError);
}
declare const Error_base: {
    new (...args: any[]): {
        _innerException: SdkError;
        message(): string;
        innerException(): SdkError;
        errorCode(): import("../../errors").MomentoErrorCode;
        toString(): string;
    };
} & typeof _Error;
/**
 * Indicates that an error occurred during the dictionary get fields request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends Error_base {
}
export {};
