"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateLeaderboardNumberOfElements = exports.validateLeaderboardCount = exports.validateLeaderboardOffset = exports.validateLeaderboardRanks = exports.validateLeaderboardName = exports.isBase64 = exports.validateDisposableTokenTokenID = exports.validateDisposableTokenExpiry = exports.validateTimeout = exports.validateValidForSeconds = exports.validateTtlSeconds = exports.validateTtlMinutes = exports.validateTopK = exports.validateNumDimensions = exports.validateIndexName = exports.validateWebhookName = exports.validateTopicName = exports.validateListSliceStartEnd = exports.validateListName = exports.validateDictionaryName = exports.validateSortedSetCount = exports.validateSortedSetOffset = exports.validateSortedSetScores = exports.validateSortedSetRanks = exports.validateSortedSetName = exports.validateSetName = exports.validateCacheKeyOrPrefix = exports.validateCacheName = void 0;
const errors_1 = require("../../errors");
const string_1 = require("./string");
function validateCacheName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('cache name must not be empty');
    }
}
exports.validateCacheName = validateCacheName;
function validateCacheKeyOrPrefix(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('cache key or key prefix must not be empty');
    }
}
exports.validateCacheKeyOrPrefix = validateCacheKeyOrPrefix;
function validateSetName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('set name must not be empty');
    }
}
exports.validateSetName = validateSetName;
function validateSortedSetName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('sorted set name must not be empty');
    }
}
exports.validateSortedSetName = validateSortedSetName;
function validateSortedSetRanks(start_rank, end_rank) {
    if (end_rank === undefined) {
        return;
    }
    if (start_rank > 0 && end_rank > 0 && start_rank > end_rank) {
        throw new errors_1.InvalidArgumentError('start rank must be less than end rank');
    }
    if (start_rank < 0 && end_rank < 0 && start_rank >= end_rank) {
        throw new errors_1.InvalidArgumentError('negative start rank must be less than negative end rank');
    }
}
exports.validateSortedSetRanks = validateSortedSetRanks;
function validateSortedSetScores(minScore, maxScore) {
    if (minScore === undefined)
        return;
    if (maxScore === undefined)
        return;
    if (minScore > maxScore) {
        throw new errors_1.InvalidArgumentError('minScore must be less than or equal to maxScore');
    }
}
exports.validateSortedSetScores = validateSortedSetScores;
function validateSortedSetOffset(offset) {
    if (offset < 0) {
        throw new errors_1.InvalidArgumentError('offset must be non-negative (>= 0)');
    }
}
exports.validateSortedSetOffset = validateSortedSetOffset;
function validateSortedSetCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be strictly positive (> 0)');
    }
}
exports.validateSortedSetCount = validateSortedSetCount;
function validateDictionaryName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('dictionary name must not be empty');
    }
}
exports.validateDictionaryName = validateDictionaryName;
function validateListName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('list name must not be empty');
    }
}
exports.validateListName = validateListName;
function validateListSliceStartEnd(startIndex, endIndex) {
    if (startIndex === undefined || endIndex === undefined)
        return;
    // can't validate bounds for start and index of either or are negative without list length
    if (startIndex > 0 || endIndex < 0)
        return;
    if (endIndex <= startIndex) {
        throw new errors_1.InvalidArgumentError('endIndex (exclusive) must be larger than startIndex (inclusive)');
    }
}
exports.validateListSliceStartEnd = validateListSliceStartEnd;
function validateTopicName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('topic name must not be empty');
    }
}
exports.validateTopicName = validateTopicName;
function validateWebhookName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('webhook name must not be empty');
    }
}
exports.validateWebhookName = validateWebhookName;
function validateIndexName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('index name must not be empty');
    }
}
exports.validateIndexName = validateIndexName;
function validateNumDimensions(numDimensions) {
    if (numDimensions <= 0) {
        throw new errors_1.InvalidArgumentError('numDimensions must be greater than zero');
    }
}
exports.validateNumDimensions = validateNumDimensions;
function validateTopK(topK) {
    if (topK <= 0) {
        throw new errors_1.InvalidArgumentError('topK must be greater than zero');
    }
}
exports.validateTopK = validateTopK;
function validateTtlMinutes(ttlMinutes) {
    if (ttlMinutes < 0 || !Number.isSafeInteger(ttlMinutes)) {
        throw new errors_1.InvalidArgumentError('ttlMinutes must be a positive integer');
    }
}
exports.validateTtlMinutes = validateTtlMinutes;
// Currently accepting ttl in seconds, but if someone requests support for millis,
// the validator will need to check for Number.isSafeInteger(ttl * 1000).
function validateTtlSeconds(ttl) {
    if (ttl < 0 || !Number.isSafeInteger(ttl)) {
        throw new errors_1.InvalidArgumentError(`ttl must be a positive integer, received ${ttl}`);
    }
}
exports.validateTtlSeconds = validateTtlSeconds;
function validateValidForSeconds(validForSeconds) {
    if (validForSeconds < 0) {
        throw new errors_1.InvalidArgumentError('validForSeconds must be positive');
    }
}
exports.validateValidForSeconds = validateValidForSeconds;
function validateTimeout(timeout) {
    if (timeout < 0) {
        throw new errors_1.InvalidArgumentError('timeout must be positive');
    }
}
exports.validateTimeout = validateTimeout;
function validateDisposableTokenExpiry(expiresIn) {
    if (!expiresIn.doesExpire()) {
        throw new errors_1.InvalidArgumentError('disposable tokens must have an expiry');
    }
    if (expiresIn.seconds() < 0) {
        throw new errors_1.InvalidArgumentError('disposable token expiry must be positive');
    }
    if (expiresIn.seconds() > 60 * 60) {
        // 60 seconds * 60 minutes
        throw new errors_1.InvalidArgumentError('disposable tokens must expire within 1 hour');
    }
}
exports.validateDisposableTokenExpiry = validateDisposableTokenExpiry;
function validateDisposableTokenTokenID(tokenId) {
    if (tokenId.length > 64) {
        throw new errors_1.InvalidArgumentError('TokenID must be less than or equal to 64 characters.');
    }
}
exports.validateDisposableTokenTokenID = validateDisposableTokenTokenID;
function isEmpty(str) {
    return !str.trim();
}
function isBase64(str) {
    try {
        return (0, string_1.encodeToBase64)((0, string_1.decodeFromBase64)(str)) === str;
    }
    catch (e) {
        return false;
    }
}
exports.isBase64 = isBase64;
function validateLeaderboardName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('leaderboard name must not be empty');
    }
}
exports.validateLeaderboardName = validateLeaderboardName;
function validateLeaderboardRanks(start_rank, end_rank) {
    if (start_rank > 0 && end_rank > 0 && start_rank >= end_rank) {
        throw new errors_1.InvalidArgumentError('start rank must be less than end rank');
    }
    if (start_rank < 0 || end_rank < 0) {
        throw new errors_1.InvalidArgumentError('ranks must be positive');
    }
}
exports.validateLeaderboardRanks = validateLeaderboardRanks;
function validateLeaderboardOffset(offset) {
    if (offset < 0) {
        throw new errors_1.InvalidArgumentError('offset must be non-negative (>= 0)');
    }
}
exports.validateLeaderboardOffset = validateLeaderboardOffset;
function validateLeaderboardCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be strictly positive (> 0)');
    }
}
exports.validateLeaderboardCount = validateLeaderboardCount;
function validateLeaderboardNumberOfElements(numElements) {
    if (numElements < 1) {
        throw new errors_1.InvalidArgumentError('must provide at least one element');
    }
}
exports.validateLeaderboardNumberOfElements = validateLeaderboardNumberOfElements;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbnRlcm5hbC91dGlscy92YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFrRDtBQUVsRCxxQ0FBMEQ7QUFFMUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFBWTtJQUM1QyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNqQixNQUFNLElBQUksNkJBQW9CLENBQUMsOEJBQThCLENBQUMsQ0FBQztLQUNoRTtBQUNILENBQUM7QUFKRCw4Q0FJQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLElBQVk7SUFDbkQsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLDZCQUFvQixDQUFDLDJDQUEyQyxDQUFDLENBQUM7S0FDN0U7QUFDSCxDQUFDO0FBSkQsNERBSUM7QUFFRCxTQUFnQixlQUFlLENBQUMsSUFBWTtJQUMxQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNqQixNQUFNLElBQUksNkJBQW9CLENBQUMsNEJBQTRCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUM7QUFKRCwwQ0FJQztBQUVELFNBQWdCLHFCQUFxQixDQUFDLElBQVk7SUFDaEQsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLDZCQUFvQixDQUFDLG1DQUFtQyxDQUFDLENBQUM7S0FDckU7QUFDSCxDQUFDO0FBSkQsc0RBSUM7QUFFRCxTQUFnQixzQkFBc0IsQ0FBQyxVQUFrQixFQUFFLFFBQWlCO0lBQzFFLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtRQUMxQixPQUFPO0tBQ1I7SUFDRCxJQUFJLFVBQVUsR0FBRyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsSUFBSSxVQUFVLEdBQUcsUUFBUSxFQUFFO1FBQzNELE1BQU0sSUFBSSw2QkFBb0IsQ0FBQyx1Q0FBdUMsQ0FB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LElBQUksNkJBQW9CLENBQUMsd0JBQXdCLENBQUMsQ0FBQztLQUMxRDtBQUNILENBQUM7QUFQRCw0REFPQztBQUVELFNBQWdCLHlCQUF5QixDQUFDLE1BQWM7SUFDdEQsSUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2QsTUFBTSxJQUFJLDZCQUFvQixDQUFDLG9DQUFvQyxDQUFDLENBQUM7S0FDdEU7QUFDSCxDQUFDO0FBSkQsOERBSUM7QUFFRCxTQUFnQix3QkFBd0IsQ0FBQyxLQUFhO0lBQ3BELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNiLE1BQU0sSUFBSSw2QkFBb0IsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0tBQ3pFO0FBQ0gsQ0FBQztBQUpELDREQUlDO0FBRUQsU0FBZ0IsbUNBQW1DLENBQUMsV0FBbUI7SUFDckUsSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO1FBQ25CLE1BQU0sSUFBSSw2QkFBb0IsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0tBQ3JFO0FBQ0gsQ0FBQztBQUpELGtGQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbnZhbGlkQXJndW1lbnRFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7RXhwaXJlc0lufSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQge2RlY29kZUZyb21CYXNlNjQsIGVuY29kZVRvQmFzZTY0fSBmcm9tICcuL3N0cmluZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNhY2hlTmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgaWYgKGlzRW1wdHkobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2NhY2hlIG5hbWUgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDYWNoZUtleU9yUHJlZml4KG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignY2FjaGUga2V5IG9yIGtleSBwcmVmaXggbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTZXROYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignc2V0IG5hbWUgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTb3J0ZWRTZXROYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignc29ydGVkIHNldCBuYW1lIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU29ydGVkU2V0UmFua3Moc3RhcnRfcmFuazogbnVtYmVyLCBlbmRfcmFuaz86IG51bWJlcikge1xuICBpZiAoZW5kX3JhbmsgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc3RhcnRfcmFuayA+IDAgJiYgZW5kX3JhbmsgPiAwICYmIHN0YXJ0X3JhbmsgPiBlbmRfcmFuaykge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignc3RhcnQgcmFuayBtdXN0IGJlIGxlc3MgdGhhbiBlbmQgcmFuaycpO1xuICB9XG4gIGlmIChzdGFydF9yYW5rIDwgMCAmJiBlbmRfcmFuayA8IDAgJiYgc3RhcnRfcmFuayA+PSBlbmRfcmFuaykge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICduZWdhdGl2ZSBzdGFydCByYW5rIG11c3QgYmUgbGVzcyB0aGFuIG5lZ2F0aXZlIGVuZCByYW5rJ1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU29ydGVkU2V0U2NvcmVzKG1pblNjb3JlPzogbnVtYmVyLCBtYXhTY29yZT86IG51bWJlcikge1xuICBpZiAobWluU2NvcmUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICBpZiAobWF4U2NvcmUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICBpZiAobWluU2NvcmUgPiBtYXhTY29yZSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICdtaW5TY29yZSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBtYXhTY29yZSdcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNvcnRlZFNldE9mZnNldChvZmZzZXQ6IG51bWJlcikge1xuICBpZiAob2Zmc2V0IDwgMCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignb2Zmc2V0IG11c3QgYmUgbm9uLW5lZ2F0aXZlICg+PSAwKScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNvcnRlZFNldENvdW50KGNvdW50OiBudW1iZXIpIHtcbiAgaWYgKGNvdW50IDwgMSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignY291bnQgbXVzdCBiZSBzdHJpY3RseSBwb3NpdGl2ZSAoPiAwKScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZURpY3Rpb25hcnlOYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignZGljdGlvbmFyeSBuYW1lIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTGlzdE5hbWUobmFtZTogc3RyaW5nKSB7XG4gIGlmIChpc0VtcHR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdsaXN0IG5hbWUgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVMaXN0U2xpY2VTdGFydEVuZChcbiAgc3RhcnRJbmRleD86IG51bWJlcixcbiAgZW5kSW5kZXg/OiBudW1iZXJcbikge1xuICBpZiAoc3RhcnRJbmRleCA9PT0gdW5kZWZpbmVkIHx8IGVuZEluZGV4ID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgLy8gY2FuJ3QgdmFsaWRhdGUgYm91bmRzIGZvciBzdGFydCBhbmQgaW5kZXggb2YgZWl0aGVyIG9yIGFyZSBuZWdhdGl2ZSB3aXRob3V0IGxpc3QgbGVuZ3RoXG4gIGlmIChzdGFydEluZGV4ID4gMCB8fCBlbmRJbmRleCA8IDApIHJldHVybjtcbiAgaWYgKGVuZEluZGV4IDw9IHN0YXJ0SW5kZXgpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAnZW5kSW5kZXggKGV4Y2x1c2l2ZSkgbXVzdCBiZSBsYXJnZXIgdGhhbiBzdGFydEluZGV4IChpbmNsdXNpdmUpJ1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVG9waWNOYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigndG9waWMgbmFtZSBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVdlYmhvb2tOYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignd2ViaG9vayBuYW1lIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5kZXhOYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignaW5kZXggbmFtZSBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU51bURpbWVuc2lvbnMobnVtRGltZW5zaW9uczogbnVtYmVyKSB7XG4gIGlmIChudW1EaW1lbnNpb25zIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ251bURpbWVuc2lvbnMgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybycpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVRvcEsodG9wSzogbnVtYmVyKSB7XG4gIGlmICh0b3BLIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3RvcEsgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybycpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVR0bE1pbnV0ZXModHRsTWludXRlczogbnVtYmVyKSB7XG4gIGlmICh0dGxNaW51dGVzIDwgMCB8fCAhTnVtYmVyLmlzU2FmZUludGVnZXIodHRsTWludXRlcykpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3R0bE1pbnV0ZXMgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgfVxufVxuXG4vLyBDdXJyZW50bHkgYWNjZXB0aW5nIHR0bCBpbiBzZWNvbmRzLCBidXQgaWYgc29tZW9uZSByZXF1ZXN0cyBzdXBwb3J0IGZvciBtaWxsaXMsXG4vLyB0aGUgdmFsaWRhdG9yIHdpbGwgbmVlZCB0byBjaGVjayBmb3IgTnVtYmVyLmlzU2FmZUludGVnZXIodHRsICogMTAwMCkuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUdGxTZWNvbmRzKHR0bDogbnVtYmVyKSB7XG4gIGlmICh0dGwgPCAwIHx8ICFOdW1iZXIuaXNTYWZlSW50ZWdlcih0dGwpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgYHR0bCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgcmVjZWl2ZWQgJHt0dGx9YFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVmFsaWRGb3JTZWNvbmRzKHZhbGlkRm9yU2Vjb25kczogbnVtYmVyKSB7XG4gIGlmICh2YWxpZEZvclNlY29uZHMgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCd2YWxpZEZvclNlY29uZHMgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVRpbWVvdXQodGltZW91dDogbnVtYmVyKSB7XG4gIGlmICh0aW1lb3V0IDwgMCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigndGltZW91dCBtdXN0IGJlIHBvc2l0aXZlJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGlzcG9zYWJsZVRva2VuRXhwaXJ5KGV4cGlyZXNJbjogRXhwaXJlc0luKSB7XG4gIGlmICghZXhwaXJlc0luLmRvZXNFeHBpcmUoKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignZGlzcG9zYWJsZSB0b2tlbnMgbXVzdCBoYXZlIGFuIGV4cGlyeScpO1xuICB9XG4gIGlmIChleHBpcmVzSW4uc2Vjb25kcygpIDwgMCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignZGlzcG9zYWJsZSB0b2tlbiBleHBpcnkgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICB9XG4gIGlmIChleHBpcmVzSW4uc2Vjb25kcygpID4gNjAgKiA2MCkge1xuICAgIC8vIDYwIHNlY29uZHMgKiA2MCBtaW51dGVzXG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgJ2Rpc3Bvc2FibGUgdG9rZW5zIG11c3QgZXhwaXJlIHdpdGhpbiAxIGhvdXInXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEaXNwb3NhYmxlVG9rZW5Ub2tlbklEKHRva2VuSWQ6IHN0cmluZykge1xuICBpZiAodG9rZW5JZC5sZW5ndGggPiA2NCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICdUb2tlbklEIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDY0IGNoYXJhY3RlcnMuJ1xuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFbXB0eShzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gIXN0ci50cmltKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jhc2U2NChzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIHJldHVybiBlbmNvZGVUb0Jhc2U2NChkZWNvZGVGcm9tQmFzZTY0KHN0cikpID09PSBzdHI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTGVhZGVyYm9hcmROYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignbGVhZGVyYm9hcmQgbmFtZSBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUxlYWRlcmJvYXJkUmFua3Moc3RhcnRfcmFuazogbnVtYmVyLCBlbmRfcmFuazogbnVtYmVyKSB7XG4gIGlmIChzdGFydF9yYW5rID4gMCAmJiBlbmRfcmFuayA+IDAgJiYgc3RhcnRfcmFuayA+PSBlbmRfcmFuaykge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignc3RhcnQgcmFuayBtdXN0IGJlIGxlc3MgdGhhbiBlbmQgcmFuaycpO1xuICB9XG4gIGlmIChzdGFydF9yYW5rIDwgMCB8fCBlbmRfcmFuayA8IDApIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3JhbmtzIG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVMZWFkZXJib2FyZE9mZnNldChvZmZzZXQ6IG51bWJlcikge1xuICBpZiAob2Zmc2V0IDwgMCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignb2Zmc2V0IG11c3QgYmUgbm9uLW5lZ2F0aXZlICg+PSAwKScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUxlYWRlcmJvYXJkQ291bnQoY291bnQ6IG51bWJlcikge1xuICBpZiAoY291bnQgPCAxKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdjb3VudCBtdXN0IGJlIHN0cmljdGx5IHBvc2l0aXZlICg+IDApJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTGVhZGVyYm9hcmROdW1iZXJPZkVsZW1lbnRzKG51bUVsZW1lbnRzOiBudW1iZXIpIHtcbiAgaWYgKG51bUVsZW1lbnRzIDwgMSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignbXVzdCBwcm92aWRlIGF0IGxlYXN0IG9uZSBlbGVtZW50Jyk7XG4gIH1cbn1cbiJdfQ==