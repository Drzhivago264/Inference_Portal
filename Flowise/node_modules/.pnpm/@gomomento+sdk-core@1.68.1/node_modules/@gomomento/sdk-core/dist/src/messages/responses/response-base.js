"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseNotFound = exports.ResponseFound = exports.ResponseSuccess = exports.ResponseMiss = exports.ResponseHit = exports.ResponseError = exports.ResponseBase = void 0;
class ResponseBase {
    toString() {
        return this.constructor.name;
    }
}
exports.ResponseBase = ResponseBase;
function ResponseError(Base) {
    return class ResponseError extends Base {
        message() {
            return this._innerException.wrappedErrorMessage();
        }
        innerException() {
            return this._innerException;
        }
        errorCode() {
            return this._innerException.errorCode();
        }
        toString() {
            return this.message();
        }
    };
}
exports.ResponseError = ResponseError;
function ResponseHit(Base) {
    return class ResponseHit extends Base {
    };
}
exports.ResponseHit = ResponseHit;
function ResponseMiss(Base) {
    return class ResponseMiss extends Base {
        constructor() {
            super(...arguments);
            this.is_miss = true;
        }
    };
}
exports.ResponseMiss = ResponseMiss;
function ResponseSuccess(Base) {
    return class ResponseSuccess extends Base {
        constructor() {
            super(...arguments);
            this.is_success = true;
        }
    };
}
exports.ResponseSuccess = ResponseSuccess;
function ResponseFound(Base) {
    return class ResponseFound extends Base {
    };
}
exports.ResponseFound = ResponseFound;
function ResponseNotFound(Base) {
    return class ResponseNotFound extends Base {
    };
}
exports.ResponseNotFound = ResponseNotFound;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UtYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvcmVzcG9uc2UtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFzQixZQUFZO0lBQ3pCLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQUpELG9DQUlDO0FBMkJELFNBQWdCLGFBQWEsQ0FBNEIsSUFBVztJQUNsRSxPQUFPLE1BQU0sYUFBYyxTQUFRLElBQUk7UUFHOUIsT0FBTztZQUNaLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ3BELENBQUM7UUFFTSxjQUFjO1lBQ25CLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUM5QixDQUFDO1FBRU0sU0FBUztZQUNkLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMxQyxDQUFDO1FBRU0sUUFBUTtZQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQXBCRCxzQ0FvQkM7QUFFRCxTQUFnQixXQUFXLENBQTRCLElBQVc7SUFDaEUsT0FBTyxNQUFNLFdBQVksU0FBUSxJQUFJO0tBQUcsQ0FBQztBQUMzQyxDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQixZQUFZLENBQTRCLElBQVc7SUFDakUsT0FBTyxNQUFNLFlBQWEsU0FBUSxJQUFJO1FBQS9COztZQUNXLFlBQU8sR0FBWSxJQUFJLENBQUM7UUFDMUMsQ0FBQztLQUFBLENBQUM7QUFDSixDQUFDO0FBSkQsb0NBSUM7QUFFRCxTQUFnQixlQUFlLENBQTRCLElBQVc7SUFDcEUsT0FBTyxNQUFNLGVBQWdCLFNBQVEsSUFBSTtRQUFsQzs7WUFDVyxlQUFVLEdBQVksSUFBSSxDQUFDO1FBQzdDLENBQUM7S0FBQSxDQUFDO0FBQ0osQ0FBQztBQUpELDBDQUlDO0FBRUQsU0FBZ0IsYUFBYSxDQUE0QixJQUFXO0lBQ2xFLE9BQU8sTUFBTSxhQUFjLFNBQVEsSUFBSTtLQUFHLENBQUM7QUFDN0MsQ0FBQztBQUZELHNDQUVDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQTRCLElBQVc7SUFDckUsT0FBTyxNQUFNLGdCQUFpQixTQUFRLElBQUk7S0FBRyxDQUFDO0FBQ2hELENBQUM7QUFGRCw0Q0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9tZW50b0Vycm9yQ29kZSwgU2RrRXJyb3J9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZXNwb25zZUJhc2Uge1xuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG50eXBlIENvbnN0cnVjdG9yID0gbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4ge307XG5cbi8vIFRoZXNlIGludGVyZmFjZXMgYWxsb3cgdXMgdG8gaWRlbnRpZnkgcmVzcG9uc2VzIGJ5IHRoZWlyIG1peGlucy5cbi8vIFRoZXkgYXJlIG9ubHkgdXNlZCB0byBtYWtlIHNoYXJlZCB0ZXN0cyB3b3JrLlxuLy8gVGhleSBhcmUgbm90IGZvciBwdWJsaWMgY29uc3VtcHRpb24uXG5leHBvcnQgaW50ZXJmYWNlIElSZXNwb25zZUVycm9yIHtcbiAgbWVzc2FnZSgpOiBzdHJpbmc7XG4gIGlubmVyRXhjZXB0aW9uKCk6IFNka0Vycm9yO1xuICBlcnJvckNvZGUoKTogTW9tZW50b0Vycm9yQ29kZTtcbiAgdG9TdHJpbmcoKTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZXNwb25zZVN1Y2Nlc3Mge1xuICBpc19zdWNjZXNzOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZXNwb25zZU1pc3Mge1xuICBpc19taXNzOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0UmVzcG9uc2VTdWNjZXNzIHtcbiAgbGlzdExlbmd0aCgpOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZUVycm9yPFRCYXNlIGV4dGVuZHMgQ29uc3RydWN0b3I+KEJhc2U6IFRCYXNlKSB7XG4gIHJldHVybiBjbGFzcyBSZXNwb25zZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgcHVibGljIF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3I7XG5cbiAgICBwdWJsaWMgbWVzc2FnZSgpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2lubmVyRXhjZXB0aW9uLndyYXBwZWRFcnJvck1lc3NhZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5uZXJFeGNlcHRpb24oKTogU2RrRXJyb3Ige1xuICAgICAgcmV0dXJuIHRoaXMuX2lubmVyRXhjZXB0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBlcnJvckNvZGUoKTogTW9tZW50b0Vycm9yQ29kZSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5uZXJFeGNlcHRpb24uZXJyb3JDb2RlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlKCk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2VIaXQ8VEJhc2UgZXh0ZW5kcyBDb25zdHJ1Y3Rvcj4oQmFzZTogVEJhc2UpIHtcbiAgcmV0dXJuIGNsYXNzIFJlc3BvbnNlSGl0IGV4dGVuZHMgQmFzZSB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlTWlzczxUQmFzZSBleHRlbmRzIENvbnN0cnVjdG9yPihCYXNlOiBUQmFzZSkge1xuICByZXR1cm4gY2xhc3MgUmVzcG9uc2VNaXNzIGV4dGVuZHMgQmFzZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IGlzX21pc3M6IGJvb2xlYW4gPSB0cnVlO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2VTdWNjZXNzPFRCYXNlIGV4dGVuZHMgQ29uc3RydWN0b3I+KEJhc2U6IFRCYXNlKSB7XG4gIHJldHVybiBjbGFzcyBSZXNwb25zZVN1Y2Nlc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNfc3VjY2VzczogYm9vbGVhbiA9IHRydWU7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZUZvdW5kPFRCYXNlIGV4dGVuZHMgQ29uc3RydWN0b3I+KEJhc2U6IFRCYXNlKSB7XG4gIHJldHVybiBjbGFzcyBSZXNwb25zZUZvdW5kIGV4dGVuZHMgQmFzZSB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlTm90Rm91bmQ8VEJhc2UgZXh0ZW5kcyBDb25zdHJ1Y3Rvcj4oQmFzZTogVEJhc2UpIHtcbiAgcmV0dXJuIGNsYXNzIFJlc3BvbnNlTm90Rm91bmQgZXh0ZW5kcyBCYXNlIHt9O1xufVxuIl19