/*! For license information please see tsparticles.shape.text.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],t);else{var o="object"==typeof exports?t(require("@tsparticles/engine")):t(e.window);for(var i in o)("object"==typeof exports?exports:e)[i]=o[i]}}(this,(e=>(()=>{var t={303:t=>{t.exports=e}},o={};function i(e){var n=o[e];if(void 0!==n)return n.exports;var r=o[e]={exports:{}};return t[e](r,r.exports,i),r.exports}i.d=(e,t)=>{for(var o in t)i.o(t,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{i.r(n),i.d(n,{loadTextShape:()=>s});var e=i(303);const t=2,o=.5;function r(e,i,n,r,a,s){const l={x:-(i.length*n*o),y:n*o},p=n*t;s?e.fillText(i,l.x,l.y+p*a):e.strokeText(i,l.x,l.y+p*a)}class a{constructor(){this.validTypes=["text","character","char","multiline-text"]}draw(o){!function(o){const{context:i,particle:n,radius:a,opacity:s}=o,l=n.shapeData;if(!l)return;const p=l.value;if(void 0===p)return;void 0===n.text&&(n.text=(0,e.itemFromSingleOrMultiple)(p,n.randomIndexData));const c=n.text,d=l.style??"",f=l.weight??"400",u=Math.round(a)*t,x=l.font??"Verdana",y=n.shapeFill,h=c?.split("\n");if(h){i.font=`${d} ${f} ${u}px "${x}"`,i.globalAlpha=s;for(let e=0;e<h.length;e++)r(i,h[e],a,0,e,y);i.globalAlpha=1}}(o)}async init(t){const o=t.actualOptions,{validTypes:i}=this;if(i.find((t=>(0,e.isInArray)(t,o.particles.shape.type)))){const t=i.map((e=>o.particles.shape.options[e])).find((e=>!!e)),n=[];(0,e.executeOnSingleOrMultiple)(t,(t=>{n.push((0,e.loadFont)(t.font,t.weight))})),await Promise.all(n)}}particleInit(t,o){if(!o.shape||!this.validTypes.includes(o.shape))return;const i=o.shapeData;if(void 0===i)return;const n=i.value;void 0!==n&&(o.text=(0,e.itemFromSingleOrMultiple)(n,o.randomIndexData))}}async function s(e,t=!0){await e.addShape(new a,t)}})(),n})()));