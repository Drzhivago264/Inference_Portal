/*! For license information please see tsparticles.updater.wobble.min.js.LICENSE.txt */
!function(e,o){if("object"==typeof exports&&"object"==typeof module)module.exports=o(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],o);else{var t="object"==typeof exports?o(require("@tsparticles/engine")):o(e.window);for(var n in t)("object"==typeof exports?exports:e)[n]=t[n]}}(this,(e=>(()=>{var o={303:o=>{o.exports=e}},t={};function n(e){var a=t[e];if(void 0!==a)return a.exports;var s=t[e]={exports:{}};return o[e](s,s.exports,n),s.exports}n.d=(e,o)=>{for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},n.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};return(()=>{n.r(a),n.d(a,{loadWobbleUpdater:()=>r});var e=n(303);class o{constructor(){this.angle=50,this.move=10}load(o){o&&(void 0!==o.angle&&(this.angle=(0,e.setRangeValue)(o.angle)),void 0!==o.move&&(this.move=(0,e.setRangeValue)(o.move)))}}class t{constructor(){this.distance=5,this.enable=!1,this.speed=new o}load(o){if(o&&(void 0!==o.distance&&(this.distance=(0,e.setRangeValue)(o.distance)),void 0!==o.enable&&(this.enable=o.enable),void 0!==o.speed))if((0,e.isNumber)(o.speed))this.speed.load({angle:o.speed});else{const e=o.speed;void 0!==e.min?this.speed.load({angle:e}):this.speed.load(o.speed)}}}const s=2*Math.PI;const i=2*Math.PI;class l{constructor(e){this.container=e}init(o){const t=o.options.wobble;o.wobble=t?.enable?{angle:(0,e.getRandom)()*i,angleSpeed:(0,e.getRangeValue)(t.speed.angle)/360,moveSpeed:(0,e.getRangeValue)(t.speed.move)/10}:{angle:0,angleSpeed:0,moveSpeed:0},o.retina.wobbleDistance=(0,e.getRangeValue)(t?.distance??0)*this.container.retina.pixelRatio}isEnabled(e){return!e.destroyed&&!e.spawning&&!!e.options.wobble?.enable}loadOptions(e,...o){e.wobble||(e.wobble=new t);for(const t of o)e.wobble.load(t?.wobble)}update(o,t){this.isEnabled(o)&&function(o,t){const{wobble:n}=o.options,{wobble:a}=o;if(!n?.enable||!a)return;const i=a.angleSpeed*t.factor,l=a.moveSpeed*t.factor*((o.retina.wobbleDistance??0)*t.factor)/(e.millisecondsToSeconds/60),r=s,{position:d}=o;a.angle+=i,a.angle>r&&(a.angle-=r),d.x+=l*Math.cos(a.angle),d.y+=l*Math.abs(Math.sin(a.angle))}(o,t)}}async function r(e,o=!0){await e.addParticleUpdater("wobble",(e=>Promise.resolve(new l(e))),o)}})(),a})()));