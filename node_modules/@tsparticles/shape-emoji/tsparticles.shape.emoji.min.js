/*! For license information please see tsparticles.shape.emoji.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],t);else{var o="object"==typeof exports?t(require("@tsparticles/engine")):t(e.window);for(var i in o)("object"==typeof exports?exports:e)[i]=o[i]}}(this,(e=>(()=>{var t={303:t=>{t.exports=e}},o={};function i(e){var n=o[e];if(void 0!==n)return n.exports;var a=o[e]={exports:{}};return t[e](a,a.exports,i),a.exports}i.d=(e,t)=>{for(var o in t)i.o(t,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{i.r(n),i.d(n,{loadEmojiShape:()=>a});var e=i(303);const t='"Twemoji Mozilla", Apple Color Emoji, "Segoe UI Emoji", "Noto Color Emoji", "EmojiOne Color"';class o{constructor(){this.validTypes=["emoji"],this._emojiShapeDict=new Map}destroy(){for(const[e,t]of this._emojiShapeDict)t instanceof ImageBitmap&&(t?.close(),this._emojiShapeDict.delete(e))}draw(e){!function(e){const{context:t,particle:o,radius:i,opacity:n}=e,a=o.emojiData,r=2*i,s=t.globalAlpha;a&&(t.globalAlpha=n,t.drawImage(a,-i,-i,r,r),t.globalAlpha=s)}(e)}async init(o){const i=o.actualOptions,{validTypes:n}=this;if(!n.find((t=>(0,e.isInArray)(t,i.particles.shape.type))))return;const a=[(0,e.loadFont)(t)],r=n.map((e=>i.particles.shape.options[e])).find((e=>!!e));r&&(0,e.executeOnSingleOrMultiple)(r,(t=>{t.font&&a.push((0,e.loadFont)(t.font))})),await Promise.all(a)}particleDestroy(e){delete e.emojiData}particleInit(o,i){const n=i.shapeData;if(!n?.value)return;const a=(0,e.itemFromSingleOrMultiple)(n.value,i.randomIndexData),r=n.font??t;if(!a)return;const s=`${a}_${r}`,l=this._emojiShapeDict.get(s);if(l)return void(i.emojiData=l);const p=2*(0,e.getRangeMax)(i.size.value);let c;const f=(0,e.getRangeMax)(i.size.value);if("undefined"!=typeof OffscreenCanvas){const e=new OffscreenCanvas(p,p),t=e.getContext("2d");if(!t)return;t.font=`400 ${2*f}px ${r}`,t.textBaseline="middle",t.textAlign="center",t.fillText(a,f,f),c=e.transferToImageBitmap()}else{const e=document.createElement("canvas");e.width=p,e.height=p;const t=e.getContext("2d");if(!t)return;t.font=`400 ${2*f}px ${r}`,t.textBaseline="middle",t.textAlign="center",t.fillText(a,f,f),c=e}this._emojiShapeDict.set(s,c),i.emojiData=c}}async function a(e,t=!0){await e.addShape(new o,t)}})(),n})()));