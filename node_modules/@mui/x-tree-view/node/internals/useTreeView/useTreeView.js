"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTreeView = void 0;
exports.useTreeViewApiInitialization = useTreeViewApiInitialization;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _useForkRef = _interopRequireDefault(require("@mui/utils/useForkRef"));
var _useTreeViewModels = require("./useTreeViewModels");
var _corePlugins = require("../corePlugins");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useTreeViewApiInitialization(inputApiRef) {
  const fallbackPublicApiRef = React.useRef({});
  if (inputApiRef) {
    if (inputApiRef.current == null) {
      inputApiRef.current = {};
    }
    return inputApiRef.current;
  }
  return fallbackPublicApiRef.current;
}
const useTreeView = inParams => {
  const plugins = [..._corePlugins.TREE_VIEW_CORE_PLUGINS, ...inParams.plugins];
  const params = plugins.reduce((acc, plugin) => {
    if (plugin.getDefaultizedParams) {
      return plugin.getDefaultizedParams(acc);
    }
    return acc;
  }, inParams);
  const models = (0, _useTreeViewModels.useTreeViewModels)(plugins, params);
  const instanceRef = React.useRef({});
  const instance = instanceRef.current;
  const publicAPI = useTreeViewApiInitialization(inParams.apiRef);
  const innerRootRef = React.useRef(null);
  const handleRootRef = (0, _useForkRef.default)(innerRootRef, inParams.rootRef);
  const [state, setState] = React.useState(() => {
    const temp = {};
    plugins.forEach(plugin => {
      if (plugin.getInitialState) {
        Object.assign(temp, plugin.getInitialState(params));
      }
    });
    return temp;
  });
  const rootPropsGetters = [];
  const contextValue = {
    publicAPI,
    instance: instance,
    rootRef: innerRootRef
  };
  const runPlugin = plugin => {
    const pluginResponse = plugin({
      instance,
      params,
      slots: params.slots,
      slotProps: params.slotProps,
      state,
      setState,
      rootRef: innerRootRef,
      models
    });
    if (pluginResponse.getRootProps) {
      rootPropsGetters.push(pluginResponse.getRootProps);
    }
    if (pluginResponse.publicAPI) {
      Object.assign(publicAPI, pluginResponse.publicAPI);
    }
    if (pluginResponse.instance) {
      Object.assign(instance, pluginResponse.instance);
    }
    if (pluginResponse.contextValue) {
      Object.assign(contextValue, pluginResponse.contextValue);
    }
  };
  plugins.forEach(runPlugin);
  contextValue.runItemPlugins = itemPluginProps => {
    let finalRootRef = null;
    let finalContentRef = null;
    plugins.forEach(plugin => {
      if (!plugin.itemPlugin) {
        return;
      }
      const itemPluginResponse = plugin.itemPlugin({
        props: itemPluginProps,
        rootRef: finalRootRef,
        contentRef: finalContentRef
      });
      if (itemPluginResponse?.rootRef) {
        finalRootRef = itemPluginResponse.rootRef;
      }
      if (itemPluginResponse?.contentRef) {
        finalContentRef = itemPluginResponse.contentRef;
      }
    });
    return {
      contentRef: finalContentRef,
      rootRef: finalRootRef
    };
  };
  const itemWrappers = plugins.map(plugin => plugin.wrapItem).filter(wrapItem => !!wrapItem);
  contextValue.wrapItem = ({
    itemId,
    children
  }) => {
    let finalChildren = children;
    itemWrappers.forEach(itemWrapper => {
      finalChildren = itemWrapper({
        itemId,
        children: finalChildren
      });
    });
    return finalChildren;
  };
  const rootWrappers = plugins.map(plugin => plugin.wrapRoot).filter(wrapRoot => !!wrapRoot);
  contextValue.wrapRoot = ({
    children
  }) => {
    let finalChildren = children;
    rootWrappers.forEach(rootWrapper => {
      finalChildren = rootWrapper({
        children: finalChildren
      });
    });
    return finalChildren;
  };
  const getRootProps = (otherHandlers = {}) => {
    const rootProps = (0, _extends2.default)({
      role: 'tree'
    }, otherHandlers, {
      ref: handleRootRef
    });
    rootPropsGetters.forEach(rootPropsGetter => {
      Object.assign(rootProps, rootPropsGetter(otherHandlers));
    });
    return rootProps;
  };
  return {
    getRootProps,
    rootRef: handleRootRef,
    contextValue: contextValue,
    instance: instance
  };
};
exports.useTreeView = useTreeView;